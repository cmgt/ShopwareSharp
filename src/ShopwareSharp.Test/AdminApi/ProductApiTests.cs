/*
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.4.12.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using ShopwareSharp.AdminApi;
using ShopwareSharp.Model;
using Xunit;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ShopwareSharp.Test.AdminApi
{
    /// <summary>
    ///  Class for testing AdminProductApi
    /// </summary>
    public sealed class ProductApiTests : AdminApiTestsBase
    {
        private readonly IAdminProductApi _instance;

        public ProductApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAdminProductApi>();
        }

        /// <summary>
        /// Test CreateProduct
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateProductAsyncTest()
        {
            string? r = default;
            Request<Product>? createProductRequest = default;
            var response = await _instance.CreateProductAsync(r, createProductRequest);
            Assert.IsType<Response<Product>>(response);
        }

        /// <summary>
        /// Test DeleteProduct
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteProductAsyncTest()
        {
            string id = default;
            string? response = default;
            await _instance.DeleteProductAsync(id, response);
        }

        /// <summary>
        /// Test GetProduct
        /// </summary>
        [Fact]
        public async Task GetProductAsyncTest()
        {
            string id = "0f683a27c45a4e408814a97fd7150ffa";
            var response = await _instance.GetProductAsync(id);
            Assert.IsType<Response<Product>>(response);
        }

        /// <summary>
        /// Test GetProductList
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetProductListAsyncTest()
        {
            int? limit = default;
            int? page = default;
            string? query = default;
            var response = await _instance.GetProductListAsync(limit, page, query);
            Assert.IsType<ResponseList<Product>>(response);
        }

        /// <summary>
        /// Test UpdateProduct
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateProductAsyncTest()
        {
            string id = default;
            string? r = default;
            Request<Product>? createProductRequest = default;
            var response = await _instance.UpdateProductAsync(id, r, createProductRequest);
            Assert.IsType<Response<Product>>(response);
        }
    }
}

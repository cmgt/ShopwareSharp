/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using ShopwareSharp.Model;
using ShopwareSharp.StoreApi;
using Xunit;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ShopwareSharp.Test.StoreApi
{
    /// <summary>
    ///  Class for testing PaymentMethodApi
    /// </summary>
    public sealed class PaymentMethodApiTests : StoreApiTestsBase
    {
        private readonly IPaymentMethodApi _instance;

        public PaymentMethodApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IPaymentMethodApi>();
        }


        /// <summary>
        /// Test ReadPaymentMethod
        /// </summary>
        [Fact]
        public async Task ReadPaymentMethodAsyncTest()
        {
            ReadPaymentMethodRequest? readPaymentMethodRequest = default;
            bool? onlyAvailable = true;
            
            var response = await _instance.ReadPaymentMethodAsync(onlyAvailable, readPaymentMethodRequest);
            Assert.IsType<ReadPaymentMethod200Response>(response);
        }
    }
}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using StoreApi;
using ShopwareSharp.Model;
using Xunit;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ShopwareSharp.Test.StoreApi
{
    /// <summary>
    ///  Class for testing AddressApi
    /// </summary>
    public sealed class AddressApiTests : StoreApiTestsBase
    {
        private readonly IAddressApi _instance;

        public AddressApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAddressApi>();
        }


        /// <summary>
        /// Test CreateCustomerAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateCustomerAddressAsyncTest()
        {
            CustomerAddress? customerAddress = default;
            var response = await _instance.CreateCustomerAddressAsync(customerAddress);
            Assert.IsType<CustomerAddress>(response);
        }

        /// <summary>
        /// Test DefaultBillingAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DefaultBillingAddressAsyncTest()
        {
            string addressId = default;
            await _instance.DefaultBillingAddressAsync(addressId);
        }

        /// <summary>
        /// Test DefaultShippingAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DefaultShippingAddressAsyncTest()
        {
            string addressId = default;
            await _instance.DefaultShippingAddressAsync(addressId);
        }

        /// <summary>
        /// Test DeleteCustomerAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCustomerAddressAsyncTest()
        {
            string addressId = default;
            await _instance.DeleteCustomerAddressAsync(addressId);
        }

        /// <summary>
        /// Test ListAddress
        /// </summary>
        [Fact]
        public async Task ListAddressAsyncTest()
        {
            ReadCustomerRequest? readCustomerRequest = default;
            var response = await _instance.ListAddressAsync(readCustomerRequest);
            Assert.IsType<List<CustomerAddress>>(response);
        }

        /// <summary>
        /// Test UpdateCustomerAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateCustomerAddressAsyncTest()
        {
            string addressId = default;
            CustomerAddress? customerAddress = default;
            var response = await _instance.UpdateCustomerAddressAsync(addressId, customerAddress);
            Assert.IsType<CustomerAddress>(response);
        }
    }
}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using ShopwareSharp.Client;
using ShopwareSharp.StoreApi;
using Xunit;

namespace ShopwareSharp.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient = 
            Host.CreateDefaultBuilder(Array.Empty<string>()).ShopwareConfigureApi((context, options) =>
            {
                ApiKeyToken apiKeyToken = new ApiKeyToken($"<token>");
                options.AddTokens(apiKeyToken);
                
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ShopwareConfigureApi((context, options) =>
            {
                ApiKeyToken apiKeyToken = new ApiKeyToken($"<token>");
                options.AddTokens(apiKeyToken);
                
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddShopwareApi(options =>
                {
                    ApiKeyToken apiKeyToken = new ApiKeyToken($"<token>");
                    options.AddTokens(apiKeyToken);
                    
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddShopwareApi(options =>
                {
                    ApiKeyToken apiKeyToken = new ApiKeyToken($"<token>");
                    options.AddTokens(apiKeyToken);
                    
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var cartApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICartApi>();
            Assert.True(cartApi.HttpClient.BaseAddress != null);
            
            var orderApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);
            
            var paymentMethodApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPaymentMethodApi>();
            Assert.True(paymentMethodApi.HttpClient.BaseAddress != null);
            
            var paymentShippingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPaymentShippingApi>();
            Assert.True(paymentShippingApi.HttpClient.BaseAddress != null);
            
            var productApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProductApi>();
            Assert.True(productApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var cartApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICartApi>();
            Assert.True(cartApi.HttpClient.BaseAddress != null);
            
            var orderApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);
            
            var paymentMethodApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPaymentMethodApi>();
            Assert.True(paymentMethodApi.HttpClient.BaseAddress != null);
            
            var paymentShippingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPaymentShippingApi>();
            Assert.True(paymentShippingApi.HttpClient.BaseAddress != null);
            
            var productApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProductApi>();
            Assert.True(productApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var cartApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICartApi>();
            Assert.True(cartApi.HttpClient.BaseAddress != null);
            
            var orderApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);
            
            var paymentMethodApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPaymentMethodApi>();
            Assert.True(paymentMethodApi.HttpClient.BaseAddress != null);
            
            var paymentShippingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPaymentShippingApi>();
            Assert.True(paymentShippingApi.HttpClient.BaseAddress != null);
            
            var productApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProductApi>();
            Assert.True(productApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var cartApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICartApi>();
            Assert.True(cartApi.HttpClient.BaseAddress != null);
            
            var orderApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);
            
            var paymentMethodApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPaymentMethodApi>();
            Assert.True(paymentMethodApi.HttpClient.BaseAddress != null);
            
            var paymentShippingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPaymentShippingApi>();
            Assert.True(paymentShippingApi.HttpClient.BaseAddress != null);
            
            var productApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProductApi>();
            Assert.True(productApi.HttpClient.BaseAddress != null);
        }
    }
}

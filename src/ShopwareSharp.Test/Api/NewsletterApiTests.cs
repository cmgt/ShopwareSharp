/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using ShopwareSharp.Api;
using ShopwareSharp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ShopwareSharp.Test.Api
{
    /// <summary>
    ///  Class for testing NewsletterApi
    /// </summary>
    public sealed class NewsletterApiTests : ApiTestsBase
    {
        private readonly INewsletterApi _instance;

        public NewsletterApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<INewsletterApi>();
        }


        /// <summary>
        /// Test ConfirmNewsletter
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfirmNewsletterAsyncTest()
        {
            ConfirmNewsletterRequest confirmNewsletterRequest = default;
            string contentType = default;
            string accept = default;
            await _instance.ConfirmNewsletterAsync(confirmNewsletterRequest, contentType, accept);
        }

        /// <summary>
        /// Test SubscribeToNewsletter
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SubscribeToNewsletterAsyncTest()
        {
            SubscribeToNewsletterRequest subscribeToNewsletterRequest = default;
            string contentType = default;
            string accept = default;
            await _instance.SubscribeToNewsletterAsync(subscribeToNewsletterRequest, contentType, accept);
        }

        /// <summary>
        /// Test UnsubscribeToNewsletter
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UnsubscribeToNewsletterAsyncTest()
        {
            UnsubscribeToNewsletterRequest unsubscribeToNewsletterRequest = default;
            string contentType = default;
            string accept = default;
            await _instance.UnsubscribeToNewsletterAsync(unsubscribeToNewsletterRequest, contentType, accept);
        }
    }
}

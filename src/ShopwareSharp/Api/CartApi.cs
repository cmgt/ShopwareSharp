// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Threading;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartApi : IApi
    {
        /// <summary>
        /// Add items to the cart
        /// </summary>
        /// <remarks>
        /// This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Cart?&gt;&gt;</returns>
        Task<ApiResponse<Cart?>> AddLineItemWithHttpInfoAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Add items to the cart
        /// </summary>
        /// <remarks>
        /// This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart&gt;</returns>
        Task<Cart?> AddLineItemAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Add items to the cart
        /// </summary>
        /// <remarks>
        /// This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </remarks>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart?&gt;</returns>
        Task<Cart?> AddLineItemOrDefaultAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Delete a cart
        /// </summary>
        /// <remarks>
        /// This route deletes the cart of the customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;SuccessResponse?&gt;&gt;</returns>
        Task<ApiResponse<SuccessResponse?>> DeleteCartWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Delete a cart
        /// </summary>
        /// <remarks>
        /// This route deletes the cart of the customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SuccessResponse&gt;</returns>
        Task<SuccessResponse?> DeleteCartAsync(System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Delete a cart
        /// </summary>
        /// <remarks>
        /// This route deletes the cart of the customer.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SuccessResponse?&gt;</returns>
        Task<SuccessResponse?> DeleteCartOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Fetch or create a cart
        /// </summary>
        /// <remarks>
        /// Used to fetch the current cart or for creating a new one.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Cart?&gt;&gt;</returns>
        Task<ApiResponse<Cart?>> ReadCartWithHttpInfoAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch or create a cart
        /// </summary>
        /// <remarks>
        /// Used to fetch the current cart or for creating a new one.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart&gt;</returns>
        Task<Cart?> ReadCartAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch or create a cart
        /// </summary>
        /// <remarks>
        /// Used to fetch the current cart or for creating a new one.
        /// </remarks>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart?&gt;</returns>
        Task<Cart?> ReadCartOrDefaultAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Remove items from the cart
        /// </summary>
        /// <remarks>
        /// This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Cart?&gt;&gt;</returns>
        Task<ApiResponse<Cart?>> RemoveLineItemWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Remove items from the cart
        /// </summary>
        /// <remarks>
        /// This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart&gt;</returns>
        Task<Cart?> RemoveLineItemAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Remove items from the cart
        /// </summary>
        /// <remarks>
        /// This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </remarks>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart?&gt;</returns>
        Task<Cart?> RemoveLineItemOrDefaultAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Update items in the cart
        /// </summary>
        /// <remarks>
        /// This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Cart?&gt;&gt;</returns>
        Task<ApiResponse<Cart?>> UpdateLineItemWithHttpInfoAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Update items in the cart
        /// </summary>
        /// <remarks>
        /// This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart&gt;</returns>
        Task<Cart?> UpdateLineItemAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Update items in the cart
        /// </summary>
        /// <remarks>
        /// This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </remarks>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Cart?&gt;</returns>
        Task<Cart?> UpdateLineItemOrDefaultAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null);

            }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartApi : ICartApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CartApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartApi(ILogger<CartApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Add items to the cart This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> AddLineItemAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?> result = await AddLineItemWithHttpInfoAsync(cartItems, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Add items to the cart This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> AddLineItemOrDefaultAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?>? result = null;
            try 
            {
                result = await AddLineItemWithHttpInfoAsync(cartItems, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Add items to the cart This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the &#x60;referencedId&#x60;-parameter.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Cart"/></returns>
        public async Task<ApiResponse<Cart?>> AddLineItemWithHttpInfoAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = HttpClient.BaseAddress!.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/checkout/cart/line-item";

                    request.Content = (cartItems as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(cartItems, _jsonSerializerOptions));

                    
                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    apiKey.UseInHeader(request, "sw-access-key");
                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/checkout/cart/line-item"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<Cart?> apiResponse = new ApiResponse<Cart?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<Cart>(apiResponse.RawContent, _jsonSerializerOptions);

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Delete a cart This route deletes the cart of the customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SuccessResponse"/>&gt;</returns>
        public async Task<SuccessResponse?> DeleteCartAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SuccessResponse?> result = await DeleteCartWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Delete a cart This route deletes the cart of the customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SuccessResponse"/>&gt;</returns>
        public async Task<SuccessResponse?> DeleteCartOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SuccessResponse?>? result = null;
            try 
            {
                result = await DeleteCartWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Delete a cart This route deletes the cart of the customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SuccessResponse"/></returns>
        public async Task<ApiResponse<SuccessResponse?>> DeleteCartWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = HttpClient.BaseAddress!.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/checkout/cart";

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Delete;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/checkout/cart"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<SuccessResponse?> apiResponse = new ApiResponse<SuccessResponse?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<SuccessResponse>(apiResponse.RawContent, _jsonSerializerOptions);

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Fetch or create a cart Used to fetch the current cart or for creating a new one.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> ReadCartAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?> result = await ReadCartWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch or create a cart Used to fetch the current cart or for creating a new one.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> ReadCartOrDefaultAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?>? result = null;
            try 
            {
                result = await ReadCartWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch or create a cart Used to fetch the current cart or for creating a new one.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the new cart. This parameter will only be used when creating a new cart. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Cart"/></returns>
        public async Task<ApiResponse<Cart?>> ReadCartWithHttpInfoAsync(string? name = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = HttpClient.BaseAddress!.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/checkout/cart";

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    if (name != null)
                        parseQueryString["name"] = Uri.EscapeDataString(name.ToString()!);

                    uriBuilder.Query = parseQueryString.ToString();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Get;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/checkout/cart"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<Cart?> apiResponse = new ApiResponse<Cart?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<Cart>(apiResponse.RawContent, _jsonSerializerOptions);

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Remove items from the cart This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> RemoveLineItemAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?> result = await RemoveLineItemWithHttpInfoAsync(ids, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Remove items from the cart This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> RemoveLineItemOrDefaultAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?>? result = null;
            try 
            {
                result = await RemoveLineItemWithHttpInfoAsync(ids, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Remove items from the cart This route removes items from the cart and recalculates it.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of product identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Cart"/></returns>
        public async Task<ApiResponse<Cart?>> RemoveLineItemWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (ids == null)
                    throw new ArgumentNullException(nameof(ids));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = HttpClient.BaseAddress!.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/checkout/cart/line-item";

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryString["ids"] = Uri.EscapeDataString(ids.ToString()!);
                    
                    uriBuilder.Query = parseQueryString.ToString();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Delete;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/checkout/cart/line-item"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<Cart?> apiResponse = new ApiResponse<Cart?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<Cart>(apiResponse.RawContent, _jsonSerializerOptions);

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Update items in the cart This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> UpdateLineItemAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?> result = await UpdateLineItemWithHttpInfoAsync(cartItems, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Update items in the cart This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Cart"/>&gt;</returns>
        public async Task<Cart?> UpdateLineItemOrDefaultAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Cart?>? result = null;
            try 
            {
                result = await UpdateLineItemWithHttpInfoAsync(cartItems, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Update items in the cart This route updates items in the cart. A typical example is updating the quantity of an item.  Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        
        
        /// <param name="cartItems"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Cart"/></returns>
        public async Task<ApiResponse<Cart?>> UpdateLineItemWithHttpInfoAsync(CartItems? cartItems = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = HttpClient.BaseAddress!.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/checkout/cart/line-item";

                    request.Content = (cartItems as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(cartItems, _jsonSerializerOptions));


                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    apiKey.UseInHeader(request, "sw-access-key");
                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Patch;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/checkout/cart/line-item"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<Cart?> apiResponse = new ApiResponse<Cart?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<Cart>(apiResponse.RawContent, _jsonSerializerOptions);

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }    }
}

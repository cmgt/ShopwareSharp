// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApi
    {
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;StateMachineState?&gt;&gt;</returns>
        Task<ApiResponse<StateMachineState?>> CancelOrderWithHttpInfoAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;StateMachineState&gt;</returns>
        Task<StateMachineState?> CancelOrderAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;StateMachineState?&gt;</returns>
        Task<StateMachineState?> CancelOrderOrDefaultAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Order?&gt;&gt;</returns>
        Task<ApiResponse<Order?>> CreateOrderWithHttpInfoAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Order&gt;</returns>
        Task<Order?> CreateOrderAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Order?&gt;</returns>
        Task<Order?> CreateOrderOrDefaultAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;SuccessResponse?&gt;&gt;</returns>
        Task<ApiResponse<SuccessResponse?>> OrderSetPaymentWithHttpInfoAsync(
            OrderSetPaymentRequest orderSetPaymentRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SuccessResponse&gt;</returns>
        Task<SuccessResponse?> OrderSetPaymentAsync(OrderSetPaymentRequest orderSetPaymentRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SuccessResponse?&gt;</returns>
        Task<SuccessResponse?> OrderSetPaymentOrDefaultAsync(OrderSetPaymentRequest orderSetPaymentRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;OrderRouteResponse?&gt;&gt;</returns>
        Task<ApiResponse<OrderRouteResponse?>> ReadOrderWithHttpInfoAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;OrderRouteResponse&gt;</returns>
        Task<OrderRouteResponse?> ReadOrderAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;OrderRouteResponse?&gt;</returns>
        Task<OrderRouteResponse?> ReadOrderOrDefaultAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : ApiBase, IOrderApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(ILogger<OrderApi> logger, HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TokenProvider<ApiKeyToken> apiKeyProvider, TokenProvider<ContextKeyToken> contextKeyTokenProvider) : base(
            logger, httpClient, jsonSerializerOptionsProvider, apiKeyProvider, contextKeyTokenProvider)
        {
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="StateMachineState"/>&gt;</returns>
        public async Task<StateMachineState?> CancelOrderAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<StateMachineState?> result =
                await CancelOrderWithHttpInfoAsync(cancelOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="StateMachineState"/>&gt;</returns>
        public async Task<StateMachineState?> CancelOrderOrDefaultAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<StateMachineState?>? result = null;
            try
            {
                result = await CancelOrderWithHttpInfoAsync(cancelOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="StateMachineState"/></returns>
        public Task<ApiResponse<StateMachineState?>> CancelOrderWithHttpInfoAsync(CancelOrderRequest cancelOrderRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/order/state/cancel";

            return ExecuteRequest<StateMachineState?>(queryPath, default, HttpMethod.Post, cancelOrderRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Order"/>&gt;</returns>
        public async Task<Order?> CreateOrderAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Order?> result =
                await CreateOrderWithHttpInfoAsync(createOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Order"/>&gt;</returns>
        public async Task<Order?> CreateOrderOrDefaultAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Order?>? result = null;
            try
            {
                result = await CreateOrderWithHttpInfoAsync(createOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Order"/></returns>
        public Task<ApiResponse<Order?>> CreateOrderWithHttpInfoAsync(CreateOrderRequest? createOrderRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/checkout/order";

            return ExecuteRequest<Order?>(queryPath, default, HttpMethod.Post, createOrderRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SuccessResponse"/>&gt;</returns>
        public async Task<SuccessResponse?> OrderSetPaymentAsync(OrderSetPaymentRequest orderSetPaymentRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SuccessResponse?> result =
                await OrderSetPaymentWithHttpInfoAsync(orderSetPaymentRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SuccessResponse"/>&gt;</returns>
        public async Task<SuccessResponse?> OrderSetPaymentOrDefaultAsync(OrderSetPaymentRequest orderSetPaymentRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SuccessResponse?>? result = null;
            try
            {
                result = await OrderSetPaymentWithHttpInfoAsync(orderSetPaymentRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SuccessResponse"/></returns>
        public Task<ApiResponse<SuccessResponse?>> OrderSetPaymentWithHttpInfoAsync(
            OrderSetPaymentRequest orderSetPaymentRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (orderSetPaymentRequest == null)
                throw new ArgumentNullException(nameof(orderSetPaymentRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'


            const string queryPath = "/order/payment";

            return ExecuteRequest<SuccessResponse?>(queryPath, default, HttpMethod.Post, orderSetPaymentRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="OrderRouteResponse"/>&gt;</returns>
        public async Task<OrderRouteResponse?> ReadOrderAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<OrderRouteResponse?> result =
                await ReadOrderWithHttpInfoAsync(readOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="OrderRouteResponse"/>&gt;</returns>
        public async Task<OrderRouteResponse?> ReadOrderOrDefaultAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<OrderRouteResponse?>? result = null;
            try
            {
                result = await ReadOrderWithHttpInfoAsync(readOrderRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="OrderRouteResponse"/></returns>
        public Task<ApiResponse<OrderRouteResponse?>> ReadOrderWithHttpInfoAsync(ReadOrderRequest readOrderRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (readOrderRequest == null)
                throw new ArgumentNullException(nameof(readOrderRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            const string queryPath = "/order";

            return ExecuteRequest<OrderRouteResponse?>(queryPath, default, HttpMethod.Post, readOrderRequest,
                requestOptions, cancellationToken);
        }
    }
}

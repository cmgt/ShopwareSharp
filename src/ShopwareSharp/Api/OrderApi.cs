/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <returns>StateMachineState</returns>
        StateMachineState CancelOrder(string contentType, string accept, CancelOrderRequest cancelOrderRequest);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <returns>ApiResponse of StateMachineState</returns>
        ApiResponse<StateMachineState> CancelOrderWithHttpInfo(string contentType, string accept, CancelOrderRequest cancelOrderRequest);
        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <returns>Order</returns>
        Order CreateOrder(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?));

        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateOrderWithHttpInfo(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?));
        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse OrderSetPayment(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest);

        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> OrderSetPaymentWithHttpInfo(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest);
        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <returns>OrderRouteResponse</returns>
        OrderRouteResponse ReadOrder(string contentType, string accept, ReadOrderRequest readOrderRequest);

        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <returns>ApiResponse of OrderRouteResponse</returns>
        ApiResponse<OrderRouteResponse> ReadOrderWithHttpInfo(string contentType, string accept, ReadOrderRequest readOrderRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StateMachineState</returns>
        System.Threading.Tasks.Task<StateMachineState> CancelOrderAsync(string contentType, string accept, CancelOrderRequest cancelOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StateMachineState)</returns>
        System.Threading.Tasks.Task<ApiResponse<StateMachineState>> CancelOrderWithHttpInfoAsync(string contentType, string accept, CancelOrderRequest cancelOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> CreateOrderAsync(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an order from a cart
        /// </summary>
        /// <remarks>
        /// Creates a new order from the current cart and deletes the cart.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> CreateOrderWithHttpInfoAsync(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> OrderSetPaymentAsync(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the payment method of an order
        /// </summary>
        /// <remarks>
        /// Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> OrderSetPaymentWithHttpInfoAsync(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderRouteResponse</returns>
        System.Threading.Tasks.Task<OrderRouteResponse> ReadOrderAsync(string contentType, string accept, ReadOrderRequest readOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of orders
        /// </summary>
        /// <remarks>
        /// List orders of a customer.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderRouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderRouteResponse>> ReadOrderWithHttpInfoAsync(string contentType, string accept, ReadOrderRequest readOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IDisposable, IOrderApi
    {
        private ShopwareSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrderApi(string basePath)
        {
            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrderApi(ShopwareSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrderApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrderApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrderApi(HttpClient client, ShopwareSharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrderApi(ShopwareSharp.Client.ISynchronousClient client, ShopwareSharp.Client.IAsynchronousClient asyncClient, ShopwareSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ShopwareSharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShopwareSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShopwareSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShopwareSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShopwareSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <returns>StateMachineState</returns>
        public StateMachineState CancelOrder(string contentType, string accept, CancelOrderRequest cancelOrderRequest)
        {
            ShopwareSharp.Client.ApiResponse<StateMachineState> localVarResponse = CancelOrderWithHttpInfo(contentType, accept, cancelOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <returns>ApiResponse of StateMachineState</returns>
        public ShopwareSharp.Client.ApiResponse<StateMachineState> CancelOrderWithHttpInfo(string contentType, string accept, CancelOrderRequest cancelOrderRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->CancelOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->CancelOrder");

            // verify the required parameter 'cancelOrderRequest' is set
            if (cancelOrderRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'cancelOrderRequest' when calling OrderApi->CancelOrder");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = cancelOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StateMachineState>("/order/state/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StateMachineState</returns>
        public async System.Threading.Tasks.Task<StateMachineState> CancelOrderAsync(string contentType, string accept, CancelOrderRequest cancelOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<StateMachineState> localVarResponse = await CancelOrderWithHttpInfoAsync(contentType, accept, cancelOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an order Cancels an order. The order state will be set to &#39;cancelled&#39;.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StateMachineState)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<StateMachineState>> CancelOrderWithHttpInfoAsync(string contentType, string accept, CancelOrderRequest cancelOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->CancelOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->CancelOrder");

            // verify the required parameter 'cancelOrderRequest' is set
            if (cancelOrderRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'cancelOrderRequest' when calling OrderApi->CancelOrder");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = cancelOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StateMachineState>("/order/state/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <returns>Order</returns>
        public Order CreateOrder(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?))
        {
            ShopwareSharp.Client.ApiResponse<Order> localVarResponse = CreateOrderWithHttpInfo(contentType, accept, createOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ShopwareSharp.Client.ApiResponse<Order> CreateOrderWithHttpInfo(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->CreateOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->CreateOrder");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = createOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/checkout/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> CreateOrderAsync(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<Order> localVarResponse = await CreateOrderWithHttpInfoAsync(contentType, accept, createOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order from a cart Creates a new order from the current cart and deletes the cart.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="createOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<Order>> CreateOrderWithHttpInfoAsync(string contentType, string accept, CreateOrderRequest? createOrderRequest = default(CreateOrderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->CreateOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->CreateOrder");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = createOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/checkout/order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse OrderSetPayment(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest)
        {
            ShopwareSharp.Client.ApiResponse<SuccessResponse> localVarResponse = OrderSetPaymentWithHttpInfo(contentType, accept, orderSetPaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ShopwareSharp.Client.ApiResponse<SuccessResponse> OrderSetPaymentWithHttpInfo(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->OrderSetPayment");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->OrderSetPayment");

            // verify the required parameter 'orderSetPaymentRequest' is set
            if (orderSetPaymentRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'orderSetPaymentRequest' when calling OrderApi->OrderSetPayment");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = orderSetPaymentRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/order/payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderSetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> OrderSetPaymentAsync(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<SuccessResponse> localVarResponse = await OrderSetPaymentWithHttpInfoAsync(contentType, accept, orderSetPaymentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the payment method of an order Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the &#x60;paymentChangeable&#x60;- array in the response.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="orderSetPaymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<SuccessResponse>> OrderSetPaymentWithHttpInfoAsync(string contentType, string accept, OrderSetPaymentRequest orderSetPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->OrderSetPayment");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->OrderSetPayment");

            // verify the required parameter 'orderSetPaymentRequest' is set
            if (orderSetPaymentRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'orderSetPaymentRequest' when calling OrderApi->OrderSetPayment");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = orderSetPaymentRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/order/payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderSetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <returns>OrderRouteResponse</returns>
        public OrderRouteResponse ReadOrder(string contentType, string accept, ReadOrderRequest readOrderRequest)
        {
            ShopwareSharp.Client.ApiResponse<OrderRouteResponse> localVarResponse = ReadOrderWithHttpInfo(contentType, accept, readOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <returns>ApiResponse of OrderRouteResponse</returns>
        public ShopwareSharp.Client.ApiResponse<OrderRouteResponse> ReadOrderWithHttpInfo(string contentType, string accept, ReadOrderRequest readOrderRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->ReadOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->ReadOrder");

            // verify the required parameter 'readOrderRequest' is set
            if (readOrderRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'readOrderRequest' when calling OrderApi->ReadOrder");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderRouteResponse>("/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderRouteResponse</returns>
        public async System.Threading.Tasks.Task<OrderRouteResponse> ReadOrderAsync(string contentType, string accept, ReadOrderRequest readOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<OrderRouteResponse> localVarResponse = await ReadOrderWithHttpInfoAsync(contentType, accept, readOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of orders List orders of a customer.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderRouteResponse)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<OrderRouteResponse>> ReadOrderWithHttpInfoAsync(string contentType, string accept, ReadOrderRequest readOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling OrderApi->ReadOrder");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling OrderApi->ReadOrder");

            // verify the required parameter 'readOrderRequest' is set
            if (readOrderRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'readOrderRequest' when calling OrderApi->ReadOrder");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readOrderRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderRouteResponse>("/order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IApi
    {
        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadProduct200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadProduct200Response?>> ReadProductWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadProduct200Response&gt;</returns>
        Task<ReadProduct200Response?> ReadProductAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadProduct200Response?&gt;</returns>
        Task<ReadProduct200Response?> ReadProductOrDefaultAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;CrossSellingElementCollectionInner&gt;?&gt;&gt;</returns>
        Task<ApiResponse<IEnumerable<CrossSellingElementCollectionInner>?>> ReadProductCrossSellingsWithHttpInfoAsync(
            string productId, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;List&lt;CrossSellingElementCollectionInner&gt;&gt;</returns>
        Task<IEnumerable<CrossSellingElementCollectionInner>?> ReadProductCrossSellingsAsync(string productId,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;List&lt;CrossSellingElementCollectionInner&gt;?&gt;</returns>
        Task<IEnumerable<CrossSellingElementCollectionInner>?> ReadProductCrossSellingsOrDefaultAsync(string productId,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ProductDetailResponse?&gt;&gt;</returns>
        Task<ApiResponse<ProductDetailResponse?>> ReadProductDetailWithHttpInfoAsync(string productId,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductDetailResponse&gt;</returns>
        Task<ProductDetailResponse?> ReadProductDetailAsync(string productId, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductDetailResponse?&gt;</returns>
        Task<ProductDetailResponse?> ReadProductDetailOrDefaultAsync(string productId,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> ReadProductExportWithHttpInfoAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> ReadProductExportAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> ReadProductExportOrDefaultAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ProductListingResult?&gt;&gt;</returns>
        Task<ApiResponse<ProductListingResult?>> ReadProductListingWithHttpInfoAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult&gt;</returns>
        Task<ProductListingResult?> ReadProductListingAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult?&gt;</returns>
        Task<ProductListingResult?> ReadProductListingOrDefaultAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadProductReviews200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadProductReviews200Response?>> ReadProductReviewsWithHttpInfoAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadProductReviews200Response&gt;</returns>
        Task<ReadProductReviews200Response?> ReadProductReviewsAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadProductReviews200Response?&gt;</returns>
        Task<ReadProductReviews200Response?> ReadProductReviewsOrDefaultAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> SaveProductReviewWithHttpInfoAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> SaveProductReviewAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> SaveProductReviewOrDefaultAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ProductListingResult?&gt;&gt;</returns>
        Task<ApiResponse<ProductListingResult?>> SearchPageWithHttpInfoAsync(
            SearchPageRequest? searchPageRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult&gt;</returns>
        Task<ProductListingResult?> SearchPageAsync(SearchPageRequest? searchPageRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult?&gt;</returns>
        Task<ProductListingResult?> SearchPageOrDefaultAsync(SearchPageRequest? searchPageRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ProductListingResult?&gt;&gt;</returns>
        Task<ApiResponse<ProductListingResult?>> SearchSuggestWithHttpInfoAsync(
            SearchSuggestRequest searchSuggestRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult&gt;</returns>
        Task<ProductListingResult?> SearchSuggestAsync(SearchSuggestRequest searchSuggestRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ProductListingResult?&gt;</returns>
        Task<ProductListingResult?> SearchSuggestOrDefaultAsync(SearchSuggestRequest searchSuggestRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : ApiBase, IProductApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(ILogger<ProductApi> logger, HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TokenProvider<ApiKeyToken> apiKeyProvider, TokenProvider<ContextKeyToken> contextKeyProvider) : base(logger,
            httpClient, jsonSerializerOptionsProvider, apiKeyProvider, contextKeyProvider)
        {
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadProduct200Response"/>&gt;</returns>
        public async Task<ReadProduct200Response?> ReadProductAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadProduct200Response?> result =
                await ReadProductWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadProduct200Response"/>&gt;</returns>
        public async Task<ReadProduct200Response?> ReadProductOrDefaultAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadProduct200Response?>? result = null;
            try
            {
                result = await ReadProductWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadProduct200Response"/></returns>
        public Task<ApiResponse<ReadProduct200Response?>> ReadProductWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/product";

            return ExecuteRequest<ReadProduct200Response?>(queryPath, default, HttpMethod.Post, readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;CrossSellingElementCollectionInner&gt;"/>&gt;</returns>
        public async Task<IEnumerable<CrossSellingElementCollectionInner>?> ReadProductCrossSellingsAsync(
            string productId, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<IEnumerable<CrossSellingElementCollectionInner>?> result =
                await ReadProductCrossSellingsWithHttpInfoAsync(productId, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;CrossSellingElementCollectionInner&gt;"/>&gt;</returns>
        public async Task<IEnumerable<CrossSellingElementCollectionInner>?> ReadProductCrossSellingsOrDefaultAsync(
            string productId, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<IEnumerable<CrossSellingElementCollectionInner>?>? result = null;
            try
            {
                result = await ReadProductCrossSellingsWithHttpInfoAsync(productId, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List&lt;CrossSellingElementCollectionInner&gt;"/></returns>
        public Task<ApiResponse<IEnumerable<CrossSellingElementCollectionInner>?>>
            ReadProductCrossSellingsWithHttpInfoAsync(string productId, RequestOptions? requestOptions = default,
                System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (productId == null)
                throw new ArgumentNullException(nameof(productId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product/{productId}/cross-selling";

            return ExecuteRequest<IEnumerable<CrossSellingElementCollectionInner>?>(queryPath, default, HttpMethod.Post,
                default,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductDetailResponse"/>&gt;</returns>
        public async Task<ProductDetailResponse?> ReadProductDetailAsync(string productId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductDetailResponse?> result =
                await ReadProductDetailWithHttpInfoAsync(productId, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductDetailResponse"/>&gt;</returns>
        public async Task<ProductDetailResponse?> ReadProductDetailOrDefaultAsync(string productId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductDetailResponse?>? result = null;
            try
            {
                result = await ReadProductDetailWithHttpInfoAsync(productId, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ProductDetailResponse"/></returns>
        public Task<ApiResponse<ProductDetailResponse?>> ReadProductDetailWithHttpInfoAsync(string productId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (productId == null)
                throw new ArgumentNullException(nameof(productId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product/{productId}";

            return ExecuteRequest<ProductDetailResponse?>(queryPath, default, HttpMethod.Post, default, requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> ReadProductExportAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result =
                await ReadProductExportWithHttpInfoAsync(accessKey, fileName, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> ReadProductExportOrDefaultAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try
            {
                result = await ReadProductExportWithHttpInfoAsync(accessKey, fileName, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public Task<ApiResponse<object?>> ReadProductExportWithHttpInfoAsync(string accessKey, string fileName,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (accessKey == null)
                throw new ArgumentNullException(nameof(accessKey));

            if (fileName == null)
                throw new ArgumentNullException(nameof(fileName));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product-export/{accessKey}/{fileName}";

            return ExecuteRequest<object?>(queryPath, default, HttpMethod.Post, default, requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> ReadProductListingAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?> result =
                await ReadProductListingWithHttpInfoAsync(categoryId, readProductListingRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> ReadProductListingOrDefaultAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?>? result = null;
            try
            {
                result = await ReadProductListingWithHttpInfoAsync(categoryId, readProductListingRequest,
                    requestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ProductListingResult"/></returns>
        public Task<ApiResponse<ProductListingResult?>> ReadProductListingWithHttpInfoAsync(string categoryId,
            ReadProductListingRequest? readProductListingRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (categoryId == null)
                throw new ArgumentNullException(nameof(categoryId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product-listing/{categoryId}";

            return ExecuteRequest<ProductListingResult?>(queryPath, default, HttpMethod.Post, readProductListingRequest,
                requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadProductReviews200Response"/>&gt;</returns>
        public async Task<ReadProductReviews200Response?> ReadProductReviewsAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadProductReviews200Response?> result =
                await ReadProductReviewsWithHttpInfoAsync(productId, readCustomerRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadProductReviews200Response"/>&gt;</returns>
        public async Task<ReadProductReviews200Response?> ReadProductReviewsOrDefaultAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadProductReviews200Response?>? result = null;
            try
            {
                result = await ReadProductReviewsWithHttpInfoAsync(productId, readCustomerRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadProductReviews200Response"/></returns>
        public Task<ApiResponse<ReadProductReviews200Response?>> ReadProductReviewsWithHttpInfoAsync(string productId,
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (productId == null)
                throw new ArgumentNullException(nameof(productId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product/{productId}/reviews";

            return ExecuteRequest<ReadProductReviews200Response?>(queryPath, default, HttpMethod.Post,
                readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> SaveProductReviewAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result =
                await SaveProductReviewWithHttpInfoAsync(productId, saveProductReviewRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> SaveProductReviewOrDefaultAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try
            {
                result = await SaveProductReviewWithHttpInfoAsync(productId, saveProductReviewRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public Task<ApiResponse<object?>> SaveProductReviewWithHttpInfoAsync(string productId,
            SaveProductReviewRequest? saveProductReviewRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (productId == null)
                throw new ArgumentNullException(nameof(productId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/product/{productId}/review";

            return ExecuteRequest<object?>(queryPath, default, HttpMethod.Post, saveProductReviewRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> SearchPageAsync(SearchPageRequest searchPageRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?> result =
                await SearchPageWithHttpInfoAsync(searchPageRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> SearchPageOrDefaultAsync(SearchPageRequest? searchPageRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?>? result = null;
            try
            {
                result = await SearchPageWithHttpInfoAsync(searchPageRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ProductListingResult"/></returns>
        public Task<ApiResponse<ProductListingResult?>> SearchPageWithHttpInfoAsync(
            SearchPageRequest? searchPageRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/search";

            return ExecuteRequest<ProductListingResult?>(queryPath, default, HttpMethod.Post, searchPageRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> SearchSuggestAsync(SearchSuggestRequest searchSuggestRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?> result =
                await SearchSuggestWithHttpInfoAsync(searchSuggestRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ProductListingResult"/>&gt;</returns>
        public async Task<ProductListingResult?> SearchSuggestOrDefaultAsync(SearchSuggestRequest searchSuggestRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ProductListingResult?>? result = null;
            try
            {
                result = await SearchSuggestWithHttpInfoAsync(searchSuggestRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ProductListingResult"/></returns>
        public Task<ApiResponse<ProductListingResult?>> SearchSuggestWithHttpInfoAsync(
            SearchSuggestRequest searchSuggestRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (searchSuggestRequest == null)
                throw new ArgumentNullException(nameof(searchSuggestRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            const string queryPath = "/search-suggest";

            return ExecuteRequest<ProductListingResult?>(queryPath, default, HttpMethod.Post, searchSuggestRequest,
                requestOptions, cancellationToken);
        }
    }
}

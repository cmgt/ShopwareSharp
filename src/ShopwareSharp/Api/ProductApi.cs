/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadProduct200Response</returns>
        ReadProduct200Response ReadProduct(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));

        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadProduct200Response</returns>
        ApiResponse<ReadProduct200Response> ReadProductWithHttpInfo(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));
        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>List&lt;CrossSellingElementCollectionInner&gt;</returns>
        List<CrossSellingElementCollectionInner> ReadProductCrossSellings(string productId, string contentType, string accept);

        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of List&lt;CrossSellingElementCollectionInner&gt;</returns>
        ApiResponse<List<CrossSellingElementCollectionInner>> ReadProductCrossSellingsWithHttpInfo(string productId, string contentType, string accept);
        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ProductDetailResponse</returns>
        ProductDetailResponse ReadProductDetail(string productId, string contentType, string accept);

        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        ApiResponse<ProductDetailResponse> ReadProductDetailWithHttpInfo(string productId, string contentType, string accept);
        /// <summary>
        /// Export product export
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns></returns>
        void ReadProductExport(string accessKey, string fileName, string contentType, string accept);

        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReadProductExportWithHttpInfo(string accessKey, string fileName, string contentType, string accept);
        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <returns>ProductListingResult</returns>
        ProductListingResult ReadProductListing(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?));

        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        ApiResponse<ProductListingResult> ReadProductListingWithHttpInfo(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?));
        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadProductReviews200Response</returns>
        ReadProductReviews200Response ReadProductReviews(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));

        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadProductReviews200Response</returns>
        ApiResponse<ReadProductReviews200Response> ReadProductReviewsWithHttpInfo(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));
        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <returns></returns>
        void SaveProductReview(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?));

        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveProductReviewWithHttpInfo(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?));
        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <returns>ProductListingResult</returns>
        ProductListingResult SearchPage(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?));

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        ApiResponse<ProductListingResult> SearchPageWithHttpInfo(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?));
        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <returns>ProductListingResult</returns>
        ProductListingResult SearchSuggest(string contentType, string accept, SearchSuggestRequest searchSuggestRequest);

        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        ApiResponse<ProductListingResult> SearchSuggestWithHttpInfo(string contentType, string accept, SearchSuggestRequest searchSuggestRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadProduct200Response</returns>
        System.Threading.Tasks.Task<ReadProduct200Response> ReadProductAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of products
        /// </summary>
        /// <remarks>
        /// List products that match the given criteria. For performance ressons a limit should always be set.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadProduct200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadProduct200Response>> ReadProductWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CrossSellingElementCollectionInner&gt;</returns>
        System.Threading.Tasks.Task<List<CrossSellingElementCollectionInner>> ReadProductCrossSellingsAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch cross-selling groups of a product
        /// </summary>
        /// <remarks>
        /// This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CrossSellingElementCollectionInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CrossSellingElementCollectionInner>>> ReadProductCrossSellingsWithHttpInfoAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        System.Threading.Tasks.Task<ProductDetailResponse> ReadProductDetailAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a single product
        /// </summary>
        /// <remarks>
        /// This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDetailResponse>> ReadProductDetailWithHttpInfoAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReadProductExportAsync(string accessKey, string fileName, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export product export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReadProductExportWithHttpInfoAsync(string accessKey, string fileName, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        System.Threading.Tasks.Task<ProductListingResult> ReadProductListingAsync(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a product listing by category
        /// </summary>
        /// <remarks>
        /// Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductListingResult>> ReadProductListingWithHttpInfoAsync(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadProductReviews200Response</returns>
        System.Threading.Tasks.Task<ReadProductReviews200Response> ReadProductReviewsAsync(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch product reviews
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for product reviews.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadProductReviews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadProductReviews200Response>> ReadProductReviewsWithHttpInfoAsync(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveProductReviewAsync(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save a product review
        /// </summary>
        /// <remarks>
        /// Saves a review for a product. Reviews have to be activated in the settings.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductReviewWithHttpInfoAsync(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        System.Threading.Tasks.Task<ProductListingResult> SearchPageAsync(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Performs a search for products which can be used to display a product listing.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductListingResult>> SearchPageWithHttpInfoAsync(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        System.Threading.Tasks.Task<ProductListingResult> SearchSuggestAsync(string contentType, string accept, SearchSuggestRequest searchSuggestRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for products (suggest)
        /// </summary>
        /// <remarks>
        /// Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductListingResult>> SearchSuggestWithHttpInfoAsync(string contentType, string accept, SearchSuggestRequest searchSuggestRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IDisposable, IProductApi
    {
        private ShopwareSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProductApi(string basePath)
        {
            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProductApi(ShopwareSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductApi(HttpClient client, ShopwareSharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProductApi(ShopwareSharp.Client.ISynchronousClient client, ShopwareSharp.Client.IAsynchronousClient asyncClient, ShopwareSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ShopwareSharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShopwareSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShopwareSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShopwareSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShopwareSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadProduct200Response</returns>
        public ReadProduct200Response ReadProduct(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            ShopwareSharp.Client.ApiResponse<ReadProduct200Response> localVarResponse = ReadProductWithHttpInfo(contentType, accept, readCustomerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadProduct200Response</returns>
        public ShopwareSharp.Client.ApiResponse<ReadProduct200Response> ReadProductWithHttpInfo(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProduct");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProduct");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReadProduct200Response>("/product", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProduct", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadProduct200Response</returns>
        public async System.Threading.Tasks.Task<ReadProduct200Response> ReadProductAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ReadProduct200Response> localVarResponse = await ReadProductWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of products List products that match the given criteria. For performance ressons a limit should always be set.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadProduct200Response)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ReadProduct200Response>> ReadProductWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProduct");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProduct");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReadProduct200Response>("/product", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProduct", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>List&lt;CrossSellingElementCollectionInner&gt;</returns>
        public List<CrossSellingElementCollectionInner> ReadProductCrossSellings(string productId, string contentType, string accept)
        {
            ShopwareSharp.Client.ApiResponse<List<CrossSellingElementCollectionInner>> localVarResponse = ReadProductCrossSellingsWithHttpInfo(productId, contentType, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of List&lt;CrossSellingElementCollectionInner&gt;</returns>
        public ShopwareSharp.Client.ApiResponse<List<CrossSellingElementCollectionInner>> ReadProductCrossSellingsWithHttpInfo(string productId, string contentType, string accept)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductCrossSellings");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductCrossSellings");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductCrossSellings");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CrossSellingElementCollectionInner>>("/product/{productId}/cross-selling", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductCrossSellings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CrossSellingElementCollectionInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CrossSellingElementCollectionInner>> ReadProductCrossSellingsAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<List<CrossSellingElementCollectionInner>> localVarResponse = await ReadProductCrossSellingsWithHttpInfoAsync(productId, contentType, accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch cross-selling groups of a product This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CrossSellingElementCollectionInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<List<CrossSellingElementCollectionInner>>> ReadProductCrossSellingsWithHttpInfoAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductCrossSellings");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductCrossSellings");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductCrossSellings");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CrossSellingElementCollectionInner>>("/product/{productId}/cross-selling", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductCrossSellings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ProductDetailResponse</returns>
        public ProductDetailResponse ReadProductDetail(string productId, string contentType, string accept)
        {
            ShopwareSharp.Client.ApiResponse<ProductDetailResponse> localVarResponse = ReadProductDetailWithHttpInfo(productId, contentType, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        public ShopwareSharp.Client.ApiResponse<ProductDetailResponse> ReadProductDetailWithHttpInfo(string productId, string contentType, string accept)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductDetail");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductDetail");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductDetail");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductDetailResponse>("/product/{productId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        public async System.Threading.Tasks.Task<ProductDetailResponse> ReadProductDetailAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ProductDetailResponse> localVarResponse = await ReadProductDetailWithHttpInfoAsync(productId, contentType, accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a single product This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ProductDetailResponse>> ReadProductDetailWithHttpInfoAsync(string productId, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductDetail");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductDetail");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductDetail");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductDetailResponse>("/product/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns></returns>
        public void ReadProductExport(string accessKey, string fileName, string contentType, string accept)
        {
            ReadProductExportWithHttpInfo(accessKey, fileName, contentType, accept);
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ShopwareSharp.Client.ApiResponse<Object> ReadProductExportWithHttpInfo(string accessKey, string fileName, string contentType, string accept)
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'fileName' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductExport");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accessKey", ShopwareSharp.Client.ClientUtils.ParameterToString(accessKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileName", ShopwareSharp.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/product-export/{accessKey}/{fileName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductExport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReadProductExportAsync(string accessKey, string fileName, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReadProductExportWithHttpInfoAsync(accessKey, fileName, contentType, accept, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Export product export 
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">Access Key</param>
        /// <param name="fileName">File Name</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<Object>> ReadProductExportWithHttpInfoAsync(string accessKey, string fileName, string contentType, string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'fileName' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductExport");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductExport");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accessKey", ShopwareSharp.Client.ClientUtils.ParameterToString(accessKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileName", ShopwareSharp.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/product-export/{accessKey}/{fileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductExport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <returns>ProductListingResult</returns>
        public ProductListingResult ReadProductListing(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?))
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = ReadProductListingWithHttpInfo(categoryId, contentType, accept, readProductListingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        public ShopwareSharp.Client.ApiResponse<ProductListingResult> ReadProductListingWithHttpInfo(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductApi->ReadProductListing");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductListing");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductListing");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("categoryId", ShopwareSharp.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readProductListingRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductListingResult>("/product-listing/{categoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        public async System.Threading.Tasks.Task<ProductListingResult> ReadProductListingAsync(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = await ReadProductListingWithHttpInfoAsync(categoryId, contentType, accept, readProductListingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a product listing by category Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Identifier of a category.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readProductListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ProductListingResult>> ReadProductListingWithHttpInfoAsync(string categoryId, string contentType, string accept, ReadProductListingRequest? readProductListingRequest = default(ReadProductListingRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductApi->ReadProductListing");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductListing");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductListing");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("categoryId", ShopwareSharp.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readProductListingRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductListingResult>("/product-listing/{categoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadProductReviews200Response</returns>
        public ReadProductReviews200Response ReadProductReviews(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            ShopwareSharp.Client.ApiResponse<ReadProductReviews200Response> localVarResponse = ReadProductReviewsWithHttpInfo(productId, contentType, accept, readCustomerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadProductReviews200Response</returns>
        public ShopwareSharp.Client.ApiResponse<ReadProductReviews200Response> ReadProductReviewsWithHttpInfo(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductReviews");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductReviews");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductReviews");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReadProductReviews200Response>("/product/{productId}/reviews", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductReviews", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadProductReviews200Response</returns>
        public async System.Threading.Tasks.Task<ReadProductReviews200Response> ReadProductReviewsAsync(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ReadProductReviews200Response> localVarResponse = await ReadProductReviewsWithHttpInfoAsync(productId, contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch product reviews Perform a filtered search for product reviews.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadProductReviews200Response)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ReadProductReviews200Response>> ReadProductReviewsWithHttpInfoAsync(string productId, string contentType, string accept, ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ReadProductReviews");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->ReadProductReviews");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->ReadProductReviews");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReadProductReviews200Response>("/product/{productId}/reviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProductReviews", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <returns></returns>
        public void SaveProductReview(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?))
        {
            SaveProductReviewWithHttpInfo(productId, contentType, accept, saveProductReviewRequest);
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ShopwareSharp.Client.ApiResponse<Object> SaveProductReviewWithHttpInfo(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->SaveProductReview");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SaveProductReview");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SaveProductReview");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = saveProductReviewRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/product/{productId}/review", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveProductReview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveProductReviewAsync(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SaveProductReviewWithHttpInfoAsync(productId, contentType, accept, saveProductReviewRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Save a product review Saves a review for a product. Reviews have to be activated in the settings.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Identifier of the product which is reviewed.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="saveProductReviewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<Object>> SaveProductReviewWithHttpInfoAsync(string productId, string contentType, string accept, SaveProductReviewRequest? saveProductReviewRequest = default(SaveProductReviewRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->SaveProductReview");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SaveProductReview");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SaveProductReview");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", ShopwareSharp.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = saveProductReviewRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }
            // authentication (ContextToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-context-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-context-token", this.Configuration.GetApiKeyWithPrefix("sw-context-token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/product/{productId}/review", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveProductReview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <returns>ProductListingResult</returns>
        public ProductListingResult SearchPage(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?))
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = SearchPageWithHttpInfo(contentType, accept, searchPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        public ShopwareSharp.Client.ApiResponse<ProductListingResult> SearchPageWithHttpInfo(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SearchPage");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SearchPage");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = searchPageRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductListingResult>("/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        public async System.Threading.Tasks.Task<ProductListingResult> SearchPageAsync(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = await SearchPageWithHttpInfoAsync(contentType, accept, searchPageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products Performs a search for products which can be used to display a product listing.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ProductListingResult>> SearchPageWithHttpInfoAsync(string contentType, string accept, SearchPageRequest? searchPageRequest = default(SearchPageRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SearchPage");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SearchPage");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = searchPageRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductListingResult>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <returns>ProductListingResult</returns>
        public ProductListingResult SearchSuggest(string contentType, string accept, SearchSuggestRequest searchSuggestRequest)
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = SearchSuggestWithHttpInfo(contentType, accept, searchSuggestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <returns>ApiResponse of ProductListingResult</returns>
        public ShopwareSharp.Client.ApiResponse<ProductListingResult> SearchSuggestWithHttpInfo(string contentType, string accept, SearchSuggestRequest searchSuggestRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SearchSuggest");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SearchSuggest");

            // verify the required parameter 'searchSuggestRequest' is set
            if (searchSuggestRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'searchSuggestRequest' when calling ProductApi->SearchSuggest");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = searchSuggestRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductListingResult>("/search-suggest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSuggest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListingResult</returns>
        public async System.Threading.Tasks.Task<ProductListingResult> SearchSuggestAsync(string contentType, string accept, SearchSuggestRequest searchSuggestRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ProductListingResult> localVarResponse = await SearchSuggestWithHttpInfoAsync(contentType, accept, searchSuggestRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products (suggest) Can be used to implement search previews or suggestion listings, that don’t require any interaction.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="searchSuggestRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListingResult)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ProductListingResult>> SearchSuggestWithHttpInfoAsync(string contentType, string accept, SearchSuggestRequest searchSuggestRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->SearchSuggest");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductApi->SearchSuggest");

            // verify the required parameter 'searchSuggestRequest' is set
            if (searchSuggestRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'searchSuggestRequest' when calling ProductApi->SearchSuggest");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = searchSuggestRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductListingResult>("/search-suggest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSuggest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressApi : IApi
    {
        /// <summary>
        /// Create a new address for a customer
        /// </summary>
        /// <remarks>
        /// Creates a new address for a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CustomerAddress?&gt;&gt;</returns>
        Task<ApiResponse<CustomerAddress?>> CreateCustomerAddressWithHttpInfoAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create a new address for a customer
        /// </summary>
        /// <remarks>
        /// Creates a new address for a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerAddress&gt;</returns>
        Task<CustomerAddress?> CreateCustomerAddressAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create a new address for a customer
        /// </summary>
        /// <remarks>
        /// Creates a new address for a customer.
        /// </remarks>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerAddress?&gt;</returns>
        Task<CustomerAddress?> CreateCustomerAddressOrDefaultAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Change a customer&#39;s default billing address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) billing addresses of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> DefaultBillingAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Change a customer&#39;s default billing address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) billing addresses of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> DefaultBillingAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Change a customer&#39;s default billing address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) billing addresses of a customer.
        /// </remarks>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> DefaultBillingAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Change a customer&#39;s default shipping address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) shipping addresses of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> DefaultShippingAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Change a customer&#39;s default shipping address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) shipping addresses of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> DefaultShippingAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Change a customer&#39;s default shipping address
        /// </summary>
        /// <remarks>
        /// Updates the default (preselected) shipping addresses of a customer.
        /// </remarks>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> DefaultShippingAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Delete an address of a customer
        /// </summary>
        /// <remarks>
        /// Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> DeleteCustomerAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Delete an address of a customer
        /// </summary>
        /// <remarks>
        /// Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> DeleteCustomerAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Delete an address of a customer
        /// </summary>
        /// <remarks>
        /// Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </remarks>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> DeleteCustomerAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Fetch addresses of a customer
        /// </summary>
        /// <remarks>
        /// Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;CustomerAddress&gt;?&gt;&gt;</returns>
        Task<ApiResponse<List<CustomerAddress>?>> ListAddressWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch addresses of a customer
        /// </summary>
        /// <remarks>
        /// Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;List&lt;CustomerAddress&gt;&gt;</returns>
        Task<List<CustomerAddress>?> ListAddressAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch addresses of a customer
        /// </summary>
        /// <remarks>
        /// Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </remarks>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;List&lt;CustomerAddress&gt;?&gt;</returns>
        Task<List<CustomerAddress>?> ListAddressOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Modify an address of a customer
        /// </summary>
        /// <remarks>
        /// Modifies an existing address of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CustomerAddress?&gt;&gt;</returns>
        Task<ApiResponse<CustomerAddress?>> UpdateCustomerAddressWithHttpInfoAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Modify an address of a customer
        /// </summary>
        /// <remarks>
        /// Modifies an existing address of a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerAddress&gt;</returns>
        Task<CustomerAddress?> UpdateCustomerAddressAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Modify an address of a customer
        /// </summary>
        /// <remarks>
        /// Modifies an existing address of a customer.
        /// </remarks>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerAddress?&gt;</returns>
        Task<CustomerAddress?> UpdateCustomerAddressOrDefaultAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null);

            }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressApi : IAddressApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AddressApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(ILogger<AddressApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Create a new address for a customer Creates a new address for a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerAddress"/>&gt;</returns>
        public async Task<CustomerAddress?> CreateCustomerAddressAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerAddress?> result = await CreateCustomerAddressWithHttpInfoAsync(contentType, accept, customerAddress, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Create a new address for a customer Creates a new address for a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerAddress"/>&gt;</returns>
        public async Task<CustomerAddress?> CreateCustomerAddressOrDefaultAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerAddress?>? result = null;
            try 
            {
                result = await CreateCustomerAddressWithHttpInfoAsync(contentType, accept, customerAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Create a new address for a customer Creates a new address for a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CustomerAddress"/></returns>
        public async Task<ApiResponse<CustomerAddress?>> CreateCustomerAddressWithHttpInfoAsync(string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/address";

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (customerAddress as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(customerAddress, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/address"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<CustomerAddress?> apiResponse = new ApiResponse<CustomerAddress?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<CustomerAddress>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Change a customer&#39;s default billing address Updates the default (preselected) billing addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DefaultBillingAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result = await DefaultBillingAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Change a customer&#39;s default billing address Updates the default (preselected) billing addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DefaultBillingAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try 
            {
                result = await DefaultBillingAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Change a customer&#39;s default billing address Updates the default (preselected) billing addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object?>> DefaultBillingAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (addressId == null)
                    throw new ArgumentNullException(nameof(addressId));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/address/default-billing/{addressId}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;
                        
                    request.Method = HttpMethod.Patch;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/address/default-billing/{addressId}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<object?> apiResponse = new ApiResponse<object?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Change a customer&#39;s default shipping address Updates the default (preselected) shipping addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DefaultShippingAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result = await DefaultShippingAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Change a customer&#39;s default shipping address Updates the default (preselected) shipping addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DefaultShippingAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try 
            {
                result = await DefaultShippingAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Change a customer&#39;s default shipping address Updates the default (preselected) shipping addresses of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object?>> DefaultShippingAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (addressId == null)
                    throw new ArgumentNullException(nameof(addressId));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/address/default-shipping/{addressId}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;
                        
                    request.Method = HttpMethod.Patch;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/address/default-shipping/{addressId}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<object?> apiResponse = new ApiResponse<object?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Delete an address of a customer Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DeleteCustomerAddressAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result = await DeleteCustomerAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Delete an address of a customer Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> DeleteCustomerAddressOrDefaultAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try 
            {
                result = await DeleteCustomerAddressWithHttpInfoAsync(addressId, contentType, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Delete an address of a customer Delete an address of customer.  Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.       **A customer must have at least one address (which can be used for shipping and billing).**  An automatic fallback is not applied.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">ID of the address to be deleted.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object?>> DeleteCustomerAddressWithHttpInfoAsync(string addressId, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (addressId == null)
                    throw new ArgumentNullException(nameof(addressId));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/address/{addressId}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;
                        
                    request.Method = HttpMethod.Delete;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/address/{addressId}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<object?> apiResponse = new ApiResponse<object?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Fetch addresses of a customer Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;CustomerAddress&gt;"/>&gt;</returns>
        public async Task<List<CustomerAddress>?> ListAddressAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<List<CustomerAddress>?> result = await ListAddressWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch addresses of a customer Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;CustomerAddress&gt;"/>&gt;</returns>
        public async Task<List<CustomerAddress>?> ListAddressOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<List<CustomerAddress>?>? result = null;
            try 
            {
                result = await ListAddressWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch addresses of a customer Lists all addresses of the current customer and allows filtering them based on a criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List&lt;CustomerAddress&gt;"/></returns>
        public async Task<ApiResponse<List<CustomerAddress>?>> ListAddressWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/list-address";

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (readCustomerRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(readCustomerRequest, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/list-address"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<List<CustomerAddress>?> apiResponse = new ApiResponse<List<CustomerAddress>?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<List<CustomerAddress>>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Modify an address of a customer Modifies an existing address of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerAddress"/>&gt;</returns>
        public async Task<CustomerAddress?> UpdateCustomerAddressAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerAddress?> result = await UpdateCustomerAddressWithHttpInfoAsync(addressId, contentType, accept, customerAddress, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Modify an address of a customer Modifies an existing address of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerAddress"/>&gt;</returns>
        public async Task<CustomerAddress?> UpdateCustomerAddressOrDefaultAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerAddress?>? result = null;
            try 
            {
                result = await UpdateCustomerAddressWithHttpInfoAsync(addressId, contentType, accept, customerAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Modify an address of a customer Modifies an existing address of a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId">Address ID</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="customerAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CustomerAddress"/></returns>
        public async Task<ApiResponse<CustomerAddress?>> UpdateCustomerAddressWithHttpInfoAsync(string addressId, string contentType, string accept, CustomerAddress? customerAddress = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (addressId == null)
                    throw new ArgumentNullException(nameof(addressId));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/account/address/{addressId}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (customerAddress as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(customerAddress, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-context-token");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Patch;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/account/address/{addressId}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<CustomerAddress?> apiResponse = new ApiResponse<CustomerAddress?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<CustomerAddress>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }    }
}

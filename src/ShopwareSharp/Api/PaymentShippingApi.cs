/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentShippingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Initiate a payment for an order
        /// </summary>
        /// <remarks>
        /// This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <returns></returns>
        void HandlePaymentMethod(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest);

        /// <summary>
        /// Initiate a payment for an order
        /// </summary>
        /// <remarks>
        /// This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandlePaymentMethodWithHttpInfo(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest);
        /// <summary>
        /// Fetch shipping methods
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for shipping methods.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadShippingMethod200Response</returns>
        ReadShippingMethod200Response ReadShippingMethod(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));

        /// <summary>
        /// Fetch shipping methods
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for shipping methods.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadShippingMethod200Response</returns>
        ApiResponse<ReadShippingMethod200Response> ReadShippingMethodWithHttpInfo(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentShippingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Initiate a payment for an order
        /// </summary>
        /// <remarks>
        /// This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandlePaymentMethodAsync(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate a payment for an order
        /// </summary>
        /// <remarks>
        /// This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandlePaymentMethodWithHttpInfoAsync(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch shipping methods
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for shipping methods.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadShippingMethod200Response</returns>
        System.Threading.Tasks.Task<ReadShippingMethod200Response> ReadShippingMethodAsync(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch shipping methods
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for shipping methods.
        /// </remarks>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadShippingMethod200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadShippingMethod200Response>> ReadShippingMethodWithHttpInfoAsync(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentShippingApi : IPaymentShippingApiSync, IPaymentShippingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentShippingApi : IDisposable, IPaymentShippingApi
    {
        private ShopwareSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PaymentShippingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PaymentShippingApi(string basePath)
        {
            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PaymentShippingApi(ShopwareSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PaymentShippingApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PaymentShippingApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                new ShopwareSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PaymentShippingApi(HttpClient client, ShopwareSharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ShopwareSharp.Client.Configuration.MergeConfigurations(
                ShopwareSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ShopwareSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentShippingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PaymentShippingApi(ShopwareSharp.Client.ISynchronousClient client, ShopwareSharp.Client.IAsynchronousClient asyncClient, ShopwareSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShopwareSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ShopwareSharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShopwareSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShopwareSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShopwareSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShopwareSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Initiate a payment for an order This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <returns></returns>
        public void HandlePaymentMethod(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest)
        {
            HandlePaymentMethodWithHttpInfo(contentType, accept, handlePaymentMethodRequest);
        }

        /// <summary>
        /// Initiate a payment for an order This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ShopwareSharp.Client.ApiResponse<Object> HandlePaymentMethodWithHttpInfo(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentShippingApi->HandlePaymentMethod");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling PaymentShippingApi->HandlePaymentMethod");

            // verify the required parameter 'handlePaymentMethodRequest' is set
            if (handlePaymentMethodRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'handlePaymentMethodRequest' when calling PaymentShippingApi->HandlePaymentMethod");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = handlePaymentMethodRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/handle-payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandlePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a payment for an order This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandlePaymentMethodAsync(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HandlePaymentMethodWithHttpInfoAsync(contentType, accept, handlePaymentMethodRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Initiate a payment for an order This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.  The endpoint internally calls the payment handler of the payment method currently set for the order.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="handlePaymentMethodRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<Object>> HandlePaymentMethodWithHttpInfoAsync(string contentType, string accept, HandlePaymentMethodRequest handlePaymentMethodRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentShippingApi->HandlePaymentMethod");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling PaymentShippingApi->HandlePaymentMethod");

            // verify the required parameter 'handlePaymentMethodRequest' is set
            if (handlePaymentMethodRequest == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'handlePaymentMethodRequest' when calling PaymentShippingApi->HandlePaymentMethod");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = handlePaymentMethodRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/handle-payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandlePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch shipping methods Perform a filtered search for shipping methods.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ReadShippingMethod200Response</returns>
        public ReadShippingMethod200Response ReadShippingMethod(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            ShopwareSharp.Client.ApiResponse<ReadShippingMethod200Response> localVarResponse = ReadShippingMethodWithHttpInfo(contentType, accept, onlyAvailable, readCustomerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch shipping methods Perform a filtered search for shipping methods.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <returns>ApiResponse of ReadShippingMethod200Response</returns>
        public ShopwareSharp.Client.ApiResponse<ReadShippingMethod200Response> ReadShippingMethodWithHttpInfo(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentShippingApi->ReadShippingMethod");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling PaymentShippingApi->ReadShippingMethod");

            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (onlyAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShopwareSharp.Client.ClientUtils.ParameterToMultiMap("", "onlyAvailable", onlyAvailable));
            }
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReadShippingMethod200Response>("/shipping-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadShippingMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch shipping methods Perform a filtered search for shipping methods.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadShippingMethod200Response</returns>
        public async System.Threading.Tasks.Task<ReadShippingMethod200Response> ReadShippingMethodAsync(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShopwareSharp.Client.ApiResponse<ReadShippingMethod200Response> localVarResponse = await ReadShippingMethodWithHttpInfoAsync(contentType, accept, onlyAvailable, readCustomerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch shipping methods Perform a filtered search for shipping methods.
        /// </summary>
        /// <exception cref="ShopwareSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="onlyAvailable">List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. (optional)</param>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadShippingMethod200Response)</returns>
        public async System.Threading.Tasks.Task<ShopwareSharp.Client.ApiResponse<ReadShippingMethod200Response>> ReadShippingMethodWithHttpInfoAsync(string contentType, string accept, bool? onlyAvailable = default(bool?), ReadCustomerRequest? readCustomerRequest = default(ReadCustomerRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentShippingApi->ReadShippingMethod");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ShopwareSharp.Client.ApiException(400, "Missing required parameter 'accept' when calling PaymentShippingApi->ReadShippingMethod");


            ShopwareSharp.Client.RequestOptions localVarRequestOptions = new ShopwareSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ShopwareSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ShopwareSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (onlyAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShopwareSharp.Client.ClientUtils.ParameterToMultiMap("", "onlyAvailable", onlyAvailable));
            }
            localVarRequestOptions.HeaderParameters.Add("Content-Type", ShopwareSharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", ShopwareSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = readCustomerRequest;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sw-access-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("sw-access-key", this.Configuration.GetApiKeyWithPrefix("sw-access-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReadShippingMethod200Response>("/shipping-method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadShippingMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApi : IApi
    {
        /// <summary>
        /// Fetch and resolve a CMS page
        /// </summary>
        /// <remarks>
        /// Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CmsPage?&gt;&gt;</returns>
        Task<ApiResponse<CmsPage?>> ReadCmsWithHttpInfoAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch and resolve a CMS page
        /// </summary>
        /// <remarks>
        /// Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CmsPage&gt;</returns>
        Task<CmsPage?> ReadCmsAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch and resolve a CMS page
        /// </summary>
        /// <remarks>
        /// Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CmsPage?&gt;</returns>
        Task<CmsPage?> ReadCmsOrDefaultAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Fetch a landing page with the resolved CMS page
        /// </summary>
        /// <remarks>
        /// Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;LandingPage?&gt;&gt;</returns>
        Task<ApiResponse<LandingPage?>> ReadLandingPageWithHttpInfoAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a landing page with the resolved CMS page
        /// </summary>
        /// <remarks>
        /// Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;LandingPage&gt;</returns>
        Task<LandingPage?> ReadLandingPageAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch a landing page with the resolved CMS page
        /// </summary>
        /// <remarks>
        /// Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </remarks>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;LandingPage?&gt;</returns>
        Task<LandingPage?> ReadLandingPageOrDefaultAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
        /// <summary>
        /// Submit a contact form message
        /// </summary>
        /// <remarks>
        /// Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> SendContactMailWithHttpInfoAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Submit a contact form message
        /// </summary>
        /// <remarks>
        /// Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> SendContactMailAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Submit a contact form message
        /// </summary>
        /// <remarks>
        /// Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </remarks>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> SendContactMailOrDefaultAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

            }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentApi : IContentApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContentApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(ILogger<ContentApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Fetch and resolve a CMS page Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CmsPage"/>&gt;</returns>
        public async Task<CmsPage?> ReadCmsAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CmsPage?> result = await ReadCmsWithHttpInfoAsync(id, contentType, accept, readCmsRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch and resolve a CMS page Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CmsPage"/>&gt;</returns>
        public async Task<CmsPage?> ReadCmsOrDefaultAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CmsPage?>? result = null;
            try 
            {
                result = await ReadCmsWithHttpInfoAsync(id, contentType, accept, readCmsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch and resolve a CMS page Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the CMS page to be resolved</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readCmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CmsPage"/></returns>
        public async Task<ApiResponse<CmsPage?>> ReadCmsWithHttpInfoAsync(string id, string contentType, string accept, ReadCmsRequest? readCmsRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (id == null)
                    throw new ArgumentNullException(nameof(id));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/cms/{id}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (readCmsRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(readCmsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json", 
                        "application/vnd.api+json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/cms/{id}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<CmsPage?> apiResponse = new ApiResponse<CmsPage?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<CmsPage>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Fetch a landing page with the resolved CMS page Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LandingPage"/>&gt;</returns>
        public async Task<LandingPage?> ReadLandingPageAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<LandingPage?> result = await ReadLandingPageWithHttpInfoAsync(landingPageId, contentType, accept, readLandingPageRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch a landing page with the resolved CMS page Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LandingPage"/>&gt;</returns>
        public async Task<LandingPage?> ReadLandingPageOrDefaultAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<LandingPage?>? result = null;
            try 
            {
                result = await ReadLandingPageWithHttpInfoAsync(landingPageId, contentType, accept, readLandingPageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch a landing page with the resolved CMS page Loads a landing page by its identifier and resolves the CMS page.  **Important notice**  The criteria passed with this route also affects the listing, if there is one within the cms page.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="landingPageId">Identifier of the landing page.</param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="readLandingPageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LandingPage"/></returns>
        public async Task<ApiResponse<LandingPage?>> ReadLandingPageWithHttpInfoAsync(string landingPageId, string contentType, string accept, ReadLandingPageRequest? readLandingPageRequest = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (landingPageId == null)
                    throw new ArgumentNullException(nameof(landingPageId));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/landing-page/{landingPageId}";
                    uriBuilder.Path = uriBuilder.Path.Replace("%7BlandingPageId%7D", Uri.EscapeDataString(landingPageId.ToString()));

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (readLandingPageRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(readLandingPageRequest, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);

                    string[] accepts = new string[] { 
                        "application/json", 
                        "application/vnd.api+json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/landing-page/{landingPageId}"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<LandingPage?> apiResponse = new ApiResponse<LandingPage?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<LandingPage>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Submit a contact form message Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> SendContactMailAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result = await SendContactMailWithHttpInfoAsync(sendContactMailRequest, contentType, accept, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Submit a contact form message Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> SendContactMailOrDefaultAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try 
            {
                result = await SendContactMailWithHttpInfoAsync(sendContactMailRequest, contentType, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Submit a contact form message Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactMailRequest"></param>
        /// <param name="contentType">Content type of the request</param>
        /// <param name="accept">Accepted response content types</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object?>> SendContactMailWithHttpInfoAsync(SendContactMailRequest sendContactMailRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (sendContactMailRequest == null)
                    throw new ArgumentNullException(nameof(sendContactMailRequest));

                if (contentType == null)
                    throw new ArgumentNullException(nameof(contentType));

                if (accept == null)
                    throw new ArgumentNullException(nameof(accept));

                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/contact-form";

                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

                    request.Content = (sendContactMailRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(sendContactMailRequest, _jsonSerializerOptions));

                    List<TokenBase> tokens = new List<TokenBase>();

                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokens.Add(apiKey);

                    apiKey.UseInHeader(request, "sw-access-key");

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.Add("ContentType", contentType);
                        
                    request.Method = HttpMethod.Post;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/contact-form"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<object?> apiResponse = new ApiResponse<object?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }    }
}

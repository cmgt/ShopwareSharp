// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginRegistrationApi : IApi
    {
        /// <summary>
        /// Fetch registration settings for customer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CustomerGroup?&gt;&gt;</returns>
        Task<ApiResponse<CustomerGroup?>> GetCustomerGroupRegistrationInfoWithHttpInfoAsync(string customerGroupId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch registration settings for customer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerGroup&gt;</returns>
        Task<CustomerGroup?> GetCustomerGroupRegistrationInfoAsync(string customerGroupId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch registration settings for customer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CustomerGroup?&gt;</returns>
        Task<CustomerGroup?> GetCustomerGroupRegistrationInfoOrDefaultAsync(string customerGroupId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Log in a customer
        /// </summary>
        /// <remarks>
        /// Logs in customers given their credentials.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ContextTokenResponse?&gt;&gt;</returns>
        Task<ApiResponse<ContextTokenResponse?>> LoginCustomerWithHttpInfoAsync(
            LoginCustomerRequest loginCustomerRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Log in a customer
        /// </summary>
        /// <remarks>
        /// Logs in customers given their credentials.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse&gt;</returns>
        Task<ContextTokenResponse?> LoginCustomerAsync(LoginCustomerRequest loginCustomerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Log in a customer
        /// </summary>
        /// <remarks>
        /// Logs in customers given their credentials.
        /// </remarks>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse?&gt;</returns>
        Task<ContextTokenResponse?> LoginCustomerOrDefaultAsync(LoginCustomerRequest loginCustomerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Log out a customer
        /// </summary>
        /// <remarks>
        /// Logs out a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ContextTokenResponse?&gt;&gt;</returns>
        Task<ApiResponse<ContextTokenResponse?>> LogoutCustomerWithHttpInfoAsync(
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Log out a customer
        /// </summary>
        /// <remarks>
        /// Logs out a customer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse&gt;</returns>
        Task<ContextTokenResponse?> LogoutCustomerAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Log out a customer
        /// </summary>
        /// <remarks>
        /// Logs out a customer.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse?&gt;</returns>
        Task<ContextTokenResponse?> LogoutCustomerOrDefaultAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Register a customer
        /// </summary>
        /// <remarks>
        /// Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Customer?&gt;&gt;</returns>
        Task<ApiResponse<Customer?>> RegisterWithHttpInfoAsync(RegisterRequest registerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Register a customer
        /// </summary>
        /// <remarks>
        /// Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Customer&gt;</returns>
        Task<Customer?> RegisterAsync(RegisterRequest registerRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Register a customer
        /// </summary>
        /// <remarks>
        /// Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </remarks>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;Customer?&gt;</returns>
        Task<Customer?> RegisterOrDefaultAsync(RegisterRequest registerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Confirm a customer registration
        /// </summary>
        /// <remarks>
        /// Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object?&gt;&gt;</returns>
        Task<ApiResponse<object?>> RegisterConfirmWithHttpInfoAsync(RegisterConfirmRequest registerConfirmRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Confirm a customer registration
        /// </summary>
        /// <remarks>
        /// Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object?> RegisterConfirmAsync(RegisterConfirmRequest registerConfirmRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Confirm a customer registration
        /// </summary>
        /// <remarks>
        /// Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </remarks>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object?&gt;</returns>
        Task<object?> RegisterConfirmOrDefaultAsync(RegisterConfirmRequest registerConfirmRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoginRegistrationApi : ApiBase, ILoginRegistrationApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginRegistrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginRegistrationApi(ILogger<LoginRegistrationApi> logger, HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TokenProvider<ApiKeyToken> apiKeyProvider, TokenProvider<ContextKeyToken> contextTokenProvider) : base(
            logger, httpClient, jsonSerializerOptionsProvider, apiKeyProvider, contextTokenProvider)
        {
        }

        /// <summary>
        /// Fetch registration settings for customer group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerGroup"/>&gt;</returns>
        public async Task<CustomerGroup?> GetCustomerGroupRegistrationInfoAsync(string customerGroupId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerGroup?> result =
                await GetCustomerGroupRegistrationInfoWithHttpInfoAsync(customerGroupId, requestOptions,
                    cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch registration settings for customer group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CustomerGroup"/>&gt;</returns>
        public async Task<CustomerGroup?> GetCustomerGroupRegistrationInfoOrDefaultAsync(string customerGroupId,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CustomerGroup?>? result = null;
            try
            {
                result = await GetCustomerGroupRegistrationInfoWithHttpInfoAsync(customerGroupId, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch registration settings for customer group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerGroupId">Customer group id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CustomerGroup"/></returns>
        public Task<ApiResponse<CustomerGroup?>> GetCustomerGroupRegistrationInfoWithHttpInfoAsync(
            string customerGroupId, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (customerGroupId == null)
                throw new ArgumentNullException(nameof(customerGroupId));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            var queryPath = $"/customer-group-registration/config/{Uri.EscapeDataString(customerGroupId)}";
            return ExecuteRequest<CustomerGroup?>(queryPath, default, HttpMethod.Get, default, requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Log in a customer Logs in customers given their credentials.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> LoginCustomerAsync(LoginCustomerRequest loginCustomerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?> result =
                await LoginCustomerWithHttpInfoAsync(loginCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Log in a customer Logs in customers given their credentials.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> LoginCustomerOrDefaultAsync(LoginCustomerRequest loginCustomerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?>? result = null;
            try
            {
                result = await LoginCustomerWithHttpInfoAsync(loginCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Log in a customer Logs in customers given their credentials.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCustomerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ContextTokenResponse"/></returns>
        public Task<ApiResponse<ContextTokenResponse?>> LoginCustomerWithHttpInfoAsync(
            LoginCustomerRequest loginCustomerRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (loginCustomerRequest == null)
                throw new ArgumentNullException(nameof(loginCustomerRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            // try

            const string queryPath = "/account/login";
            return ExecuteRequest<ContextTokenResponse?>(queryPath, default, HttpMethod.Post, loginCustomerRequest,
                requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Log out a customer Logs out a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> LogoutCustomerAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?> result =
                await LogoutCustomerWithHttpInfoAsync(requestOptions, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Log out a customer Logs out a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> LogoutCustomerOrDefaultAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?>? result = null;
            try
            {
                result = await LogoutCustomerWithHttpInfoAsync(requestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Log out a customer Logs out a customer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ContextTokenResponse"/></returns>
        public Task<ApiResponse<ContextTokenResponse?>> LogoutCustomerWithHttpInfoAsync(
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/account/logout";
            return ExecuteRequest<ContextTokenResponse?>(queryPath, default, HttpMethod.Post, default,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Register a customer Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Customer"/>&gt;</returns>
        public async Task<Customer?> RegisterAsync(RegisterRequest registerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Customer?> result =
                await RegisterWithHttpInfoAsync(registerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Register a customer Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Customer"/>&gt;</returns>
        public async Task<Customer?> RegisterOrDefaultAsync(RegisterRequest registerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<Customer?>? result = null;
            try
            {
                result = await RegisterWithHttpInfoAsync(registerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Register a customer Registers a customer. Used both for normal customers and guest customers.  See the Guide \&quot;Register a customer\&quot; for more information on customer registration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Customer"/></returns>
        public Task<ApiResponse<Customer?>> RegisterWithHttpInfoAsync(RegisterRequest registerRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (registerRequest == null)
                throw new ArgumentNullException(nameof(registerRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            const string queryPath = "/account/register";
            return ExecuteRequest<Customer?>(queryPath, default, HttpMethod.Post, registerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Confirm a customer registration Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> RegisterConfirmAsync(RegisterConfirmRequest registerConfirmRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?> result =
                await RegisterConfirmWithHttpInfoAsync(registerConfirmRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Confirm a customer registration Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object?> RegisterConfirmOrDefaultAsync(RegisterConfirmRequest registerConfirmRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object?>? result = null;
            try
            {
                result = await RegisterConfirmWithHttpInfoAsync(registerConfirmRequest, requestOptions,
                    cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Confirm a customer registration Confirms a customer registration when double opt-in is activated.  Learn more about double opt-in registration in our guide \&quot;Register a customer\&quot;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerConfirmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public Task<ApiResponse<object?>> RegisterConfirmWithHttpInfoAsync(
            RegisterConfirmRequest registerConfirmRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (registerConfirmRequest == null)
                throw new ArgumentNullException(nameof(registerConfirmRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            const string queryPath = "/account/register-confirm";
            return ExecuteRequest<object?>(queryPath, default, HttpMethod.Post, registerConfirmRequest,
                requestOptions, cancellationToken);
        }
    }
}

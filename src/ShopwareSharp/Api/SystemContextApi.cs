// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ShopwareSharp.Client;
using ShopwareSharp.Model;

namespace ShopwareSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemContextApi : IApi
    {
        /// <summary>
        /// Fetch the current context
        /// </summary>
        /// <remarks>
        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;SalesChannelContext?&gt;&gt;</returns>
        Task<ApiResponse<SalesChannelContext?>> ReadContextWithHttpInfoAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch the current context
        /// </summary>
        /// <remarks>
        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SalesChannelContext&gt;</returns>
        Task<SalesChannelContext?> ReadContextAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch the current context
        /// </summary>
        /// <remarks>
        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;SalesChannelContext?&gt;</returns>
        Task<SalesChannelContext?> ReadContextOrDefaultAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch countries
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for countries
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadCountry200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadCountry200Response?>> ReadCountryWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch countries
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for countries
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadCountry200Response&gt;</returns>
        Task<ReadCountry200Response?> ReadCountryAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch countries
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for countries
        /// </remarks>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadCountry200Response?&gt;</returns>
        Task<ReadCountry200Response?> ReadCountryOrDefaultAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch currencies
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadCurrency200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadCurrency200Response?>> ReadCurrencyWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch currencies
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadCurrency200Response&gt;</returns>
        Task<ReadCurrency200Response?> ReadCurrencyAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch currencies
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for currencies.
        /// </remarks>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadCurrency200Response?&gt;</returns>
        Task<ReadCurrency200Response?> ReadCurrencyOrDefaultAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch languages
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for languages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadLanguages200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadLanguages200Response?>> ReadLanguagesWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch languages
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for languages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadLanguages200Response&gt;</returns>
        Task<ReadLanguages200Response?> ReadLanguagesAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch languages
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for languages.
        /// </remarks>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadLanguages200Response?&gt;</returns>
        Task<ReadLanguages200Response?> ReadLanguagesOrDefaultAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Fetch salutations
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for salutations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ReadSalutation200Response?&gt;&gt;</returns>
        Task<ApiResponse<ReadSalutation200Response?>> ReadSalutationWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch salutations
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for salutations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadSalutation200Response&gt;</returns>
        Task<ReadSalutation200Response?> ReadSalutationAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Fetch salutations
        /// </summary>
        /// <remarks>
        /// Perform a filtered search for salutations.
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ReadSalutation200Response?&gt;</returns>
        Task<ReadSalutation200Response?> ReadSalutationOrDefaultAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);


        /// <summary>
        /// Modify the current context
        /// </summary>
        /// <remarks>
        /// Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ContextTokenResponse?&gt;&gt;</returns>
        Task<ApiResponse<ContextTokenResponse?>> UpdateContextWithHttpInfoAsync(
            UpdateContextRequest updateContextRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Modify the current context
        /// </summary>
        /// <remarks>
        /// Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse&gt;</returns>
        Task<ContextTokenResponse?> UpdateContextAsync(UpdateContextRequest updateContextRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Modify the current context
        /// </summary>
        /// <remarks>
        /// Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </remarks>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ContextTokenResponse?&gt;</returns>
        Task<ContextTokenResponse?> UpdateContextOrDefaultAsync(UpdateContextRequest updateContextRequest,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemContextApi : ApiBase, ISystemContextApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemContextApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemContextApi(ILogger<SystemContextApi> logger, HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TokenProvider<ApiKeyToken> apiKeyProvider, TokenProvider<ContextKeyToken> contextTokenProvider) : base(
            logger, httpClient, jsonSerializerOptionsProvider, apiKeyProvider, contextTokenProvider)
        {
        }

        /// <summary>
        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SalesChannelContext"/>&gt;</returns>
        public async Task<SalesChannelContext?> ReadContextAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SalesChannelContext?> result =
                await ReadContextWithHttpInfoAsync(requestOptions, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="SalesChannelContext"/>&gt;</returns>
        public async Task<SalesChannelContext?> ReadContextOrDefaultAsync(RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<SalesChannelContext?>? result = null;
            try
            {
                result = await ReadContextWithHttpInfoAsync(requestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SalesChannelContext"/></returns>
        public Task<ApiResponse<SalesChannelContext?>> ReadContextWithHttpInfoAsync(
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/context";

            return ExecuteRequest<SalesChannelContext?>(queryPath, default, HttpMethod.Get, default, requestOptions,
                cancellationToken);
        }

        /// <summary>
        /// Fetch countries Perform a filtered search for countries
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadCountry200Response"/>&gt;</returns>
        public async Task<ReadCountry200Response?> ReadCountryAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadCountry200Response?> result =
                await ReadCountryWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch countries Perform a filtered search for countries
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadCountry200Response"/>&gt;</returns>
        public async Task<ReadCountry200Response?> ReadCountryOrDefaultAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadCountry200Response?>? result = null;
            try
            {
                result = await ReadCountryWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch countries Perform a filtered search for countries
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadCountry200Response"/></returns>
        public Task<ApiResponse<ReadCountry200Response?>> ReadCountryWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/country";

            return ExecuteRequest<ReadCountry200Response?>(queryPath, default, HttpMethod.Post, readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch currencies Perform a filtered search for currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadCurrency200Response"/>&gt;</returns>
        public async Task<ReadCurrency200Response?> ReadCurrencyAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadCurrency200Response?> result =
                await ReadCurrencyWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch currencies Perform a filtered search for currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadCurrency200Response"/>&gt;</returns>
        public async Task<ReadCurrency200Response?> ReadCurrencyOrDefaultAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadCurrency200Response?>? result = null;
            try
            {
                result = await ReadCurrencyWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch currencies Perform a filtered search for currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadCurrency200Response"/></returns>
        public Task<ApiResponse<ReadCurrency200Response?>> ReadCurrencyWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/currency";

            return ExecuteRequest<ReadCurrency200Response?>(queryPath, default, HttpMethod.Post, readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch languages Perform a filtered search for languages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadLanguages200Response"/>&gt;</returns>
        public async Task<ReadLanguages200Response?> ReadLanguagesAsync(ReadCustomerRequest? readCustomerRequest = null,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadLanguages200Response?> result =
                await ReadLanguagesWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch languages Perform a filtered search for languages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadLanguages200Response"/>&gt;</returns>
        public async Task<ReadLanguages200Response?> ReadLanguagesOrDefaultAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadLanguages200Response?>? result = null;
            try
            {
                result = await ReadLanguagesWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch languages Perform a filtered search for languages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadLanguages200Response"/></returns>
        public Task<ApiResponse<ReadLanguages200Response?>> ReadLanguagesWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/language";

            return ExecuteRequest<ReadLanguages200Response?>(queryPath, default, HttpMethod.Post, readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Fetch salutations Perform a filtered search for salutations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadSalutation200Response"/>&gt;</returns>
        public async Task<ReadSalutation200Response?> ReadSalutationAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadSalutation200Response?> result =
                await ReadSalutationWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Fetch salutations Perform a filtered search for salutations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ReadSalutation200Response"/>&gt;</returns>
        public async Task<ReadSalutation200Response?> ReadSalutationOrDefaultAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ReadSalutation200Response?>? result = null;
            try
            {
                result = await ReadSalutationWithHttpInfoAsync(readCustomerRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Fetch salutations Perform a filtered search for salutations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="readCustomerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadSalutation200Response"/></returns>
        public Task<ApiResponse<ReadSalutation200Response?>> ReadSalutationWithHttpInfoAsync(
            ReadCustomerRequest? readCustomerRequest = null, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            const string queryPath = "/salutation";

            return ExecuteRequest<ReadSalutation200Response?>(queryPath, default, HttpMethod.Post, readCustomerRequest,
                requestOptions, cancellationToken);
        }

        /// <summary>
        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> UpdateContextAsync(UpdateContextRequest updateContextRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?> result =
                await UpdateContextWithHttpInfoAsync(updateContextRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
        public async Task<ContextTokenResponse?> UpdateContextOrDefaultAsync(UpdateContextRequest updateContextRequest,
            RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ContextTokenResponse?>? result = null;
            try
            {
                result = await UpdateContextWithHttpInfoAsync(updateContextRequest, requestOptions, cancellationToken)
                    .ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ContextTokenResponse"/></returns>
        public Task<ApiResponse<ContextTokenResponse?>> UpdateContextWithHttpInfoAsync(
            UpdateContextRequest updateContextRequest, RequestOptions? requestOptions = default,
            System.Threading.CancellationToken? cancellationToken = null)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (updateContextRequest == null)
                throw new ArgumentNullException(nameof(updateContextRequest));

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

            const string queryPath = "/context";

            return ExecuteRequest<ContextTokenResponse?>(queryPath, default, HttpMethod.Patch, updateContextRequest,
                requestOptions, cancellationToken);
        }
    }
}

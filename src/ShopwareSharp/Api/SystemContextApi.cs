//// <auto-generated>
///*
// * Shopware Store API
// *
// * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
// *
// * The version of the OpenAPI document: 6.4.9999999.9999999-dev
// * Generated by: https://github.com/openapitools/openapi-generator.git
// */

//#nullable enable

//using System;
//using System.Collections.Generic;
//using System.Net;
//using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
//using System.Net.Http;
//using System.Net.Http.Headers;
//using System.Text.Json;
//using ShopwareSharp.Client;
//using ShopwareSharp.Model;

//namespace ShopwareSharp.Api
//{
//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//    public interface ISystemContextApi : IApi
//    {
//        /// <summary>
//        /// Fetch the current context
//        /// </summary>
//        /// <remarks>
//        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;SalesChannelContext?&gt;&gt;</returns>
//        Task<ApiResponse<SalesChannelContext?>> ReadContextWithHttpInfoAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch the current context
//        /// </summary>
//        /// <remarks>
//        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;SalesChannelContext&gt;</returns>
//        Task<SalesChannelContext?> ReadContextAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch the current context
//        /// </summary>
//        /// <remarks>
//        /// Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </remarks>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;SalesChannelContext?&gt;</returns>
//        Task<SalesChannelContext?> ReadContextOrDefaultAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

        
//        /// <summary>
//        /// Fetch countries
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for countries
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;ReadCountry200Response?&gt;&gt;</returns>
//        Task<ApiResponse<ReadCountry200Response?>> ReadCountryWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch countries
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for countries
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadCountry200Response&gt;</returns>
//        Task<ReadCountry200Response?> ReadCountryAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch countries
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for countries
//        /// </remarks>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadCountry200Response?&gt;</returns>
//        Task<ReadCountry200Response?> ReadCountryOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
//        /// <summary>
//        /// Fetch currencies
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for currencies.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;ReadCurrency200Response?&gt;&gt;</returns>
//        Task<ApiResponse<ReadCurrency200Response?>> ReadCurrencyWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch currencies
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for currencies.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadCurrency200Response&gt;</returns>
//        Task<ReadCurrency200Response?> ReadCurrencyAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch currencies
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for currencies.
//        /// </remarks>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadCurrency200Response?&gt;</returns>
//        Task<ReadCurrency200Response?> ReadCurrencyOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
//        /// <summary>
//        /// Fetch languages
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for languages.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;ReadLanguages200Response?&gt;&gt;</returns>
//        Task<ApiResponse<ReadLanguages200Response?>> ReadLanguagesWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch languages
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for languages.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadLanguages200Response&gt;</returns>
//        Task<ReadLanguages200Response?> ReadLanguagesAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch languages
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for languages.
//        /// </remarks>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadLanguages200Response?&gt;</returns>
//        Task<ReadLanguages200Response?> ReadLanguagesOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
//        /// <summary>
//        /// Fetch salutations
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for salutations.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;ReadSalutation200Response?&gt;&gt;</returns>
//        Task<ApiResponse<ReadSalutation200Response?>> ReadSalutationWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch salutations
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for salutations.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadSalutation200Response&gt;</returns>
//        Task<ReadSalutation200Response?> ReadSalutationAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Fetch salutations
//        /// </summary>
//        /// <remarks>
//        /// Perform a filtered search for salutations.
//        /// </remarks>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ReadSalutation200Response?&gt;</returns>
//        Task<ReadSalutation200Response?> ReadSalutationOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null);

        
//        /// <summary>
//        /// Modify the current context
//        /// </summary>
//        /// <remarks>
//        /// Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task&lt;ApiResponse&lt;ContextTokenResponse?&gt;&gt;</returns>
//        Task<ApiResponse<ContextTokenResponse?>> UpdateContextWithHttpInfoAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Modify the current context
//        /// </summary>
//        /// <remarks>
//        /// Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </remarks>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ContextTokenResponse&gt;</returns>
//        Task<ContextTokenResponse?> UpdateContextAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

//        /// <summary>
//        /// Modify the current context
//        /// </summary>
//        /// <remarks>
//        /// Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </remarks>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns>Task of ApiResponse&lt;ContextTokenResponse?&gt;</returns>
//        Task<ContextTokenResponse?> UpdateContextOrDefaultAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null);

//            }

//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//    public partial class SystemContextApi : ISystemContextApi
//    {
//        private JsonSerializerOptions _jsonSerializerOptions;

//        /// <summary>
//        /// An event to track the health of the server. 
//        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
//        /// </summary>
//        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

//        /// <summary>
//        /// The logger
//        /// </summary>
//        public ILogger<SystemContextApi> Logger { get; }

//        /// <summary>
//        /// The HttpClient
//        /// </summary>
//        public HttpClient HttpClient { get; }

//        /// <summary>
//        /// A token provider of type <see cref="ApiKeyProvider"/>
//        /// </summary>
//        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

//        /// <summary>
//        /// Initializes a new instance of the <see cref="SystemContextApi"/> class.
//        /// </summary>
//        /// <returns></returns>
//        public SystemContextApi(ILogger<SystemContextApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
//            TokenProvider<ApiKeyToken> apiKeyProvider)
//        {
//            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
//            Logger = logger;
//            HttpClient = httpClient;
//            ApiKeyProvider = apiKeyProvider;
//        }

//        /// <summary>
//        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="SalesChannelContext"/>&gt;</returns>
//        public async Task<SalesChannelContext?> ReadContextAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<SalesChannelContext?> result = await ReadContextWithHttpInfoAsync(contentType, accept, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="SalesChannelContext"/>&gt;</returns>
//        public async Task<SalesChannelContext?> ReadContextOrDefaultAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<SalesChannelContext?>? result = null;
//            try 
//            {
//                result = await ReadContextWithHttpInfoAsync(contentType, accept, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Fetch the current context Fetches the current context. This includes for example the &#x60;customerGroup&#x60;, &#x60;currency&#x60;, &#x60;taxRules&#x60; and many more.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SalesChannelContext"/></returns>
//        public async Task<ApiResponse<SalesChannelContext?>> ReadContextWithHttpInfoAsync(string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/context";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Get;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/context"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<SalesChannelContext?> apiResponse = new ApiResponse<SalesChannelContext?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<SalesChannelContext>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }

//        /// <summary>
//        /// Fetch countries Perform a filtered search for countries
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadCountry200Response"/>&gt;</returns>
//        public async Task<ReadCountry200Response?> ReadCountryAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadCountry200Response?> result = await ReadCountryWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Fetch countries Perform a filtered search for countries
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadCountry200Response"/>&gt;</returns>
//        public async Task<ReadCountry200Response?> ReadCountryOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadCountry200Response?>? result = null;
//            try 
//            {
//                result = await ReadCountryWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Fetch countries Perform a filtered search for countries
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadCountry200Response"/></returns>
//        public async Task<ApiResponse<ReadCountry200Response?>> ReadCountryWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/country";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    request.Content = (readCustomerRequest as object) is System.IO.Stream stream
//                        ? request.Content = new StreamContent(stream)
//                        : request.Content = new StringContent(JsonSerializer.Serialize(readCustomerRequest, _jsonSerializerOptions));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] contentTypes = new string[] {
//                        "application/json" 
//                    };

//                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

//                    if (contentType != null)
//                        request.Content.Headers.Add("ContentType", contentType);

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Post;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/country"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<ReadCountry200Response?> apiResponse = new ApiResponse<ReadCountry200Response?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<ReadCountry200Response>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }

//        /// <summary>
//        /// Fetch currencies Perform a filtered search for currencies.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadCurrency200Response"/>&gt;</returns>
//        public async Task<ReadCurrency200Response?> ReadCurrencyAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadCurrency200Response?> result = await ReadCurrencyWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Fetch currencies Perform a filtered search for currencies.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadCurrency200Response"/>&gt;</returns>
//        public async Task<ReadCurrency200Response?> ReadCurrencyOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadCurrency200Response?>? result = null;
//            try 
//            {
//                result = await ReadCurrencyWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Fetch currencies Perform a filtered search for currencies.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadCurrency200Response"/></returns>
//        public async Task<ApiResponse<ReadCurrency200Response?>> ReadCurrencyWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/currency";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    request.Content = (readCustomerRequest as object) is System.IO.Stream stream
//                        ? request.Content = new StreamContent(stream)
//                        : request.Content = new StringContent(JsonSerializer.Serialize(readCustomerRequest, _jsonSerializerOptions));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] contentTypes = new string[] {
//                        "application/json" 
//                    };

//                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

//                    if (contentType != null)
//                        request.Content.Headers.Add("ContentType", contentType);

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Post;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/currency"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<ReadCurrency200Response?> apiResponse = new ApiResponse<ReadCurrency200Response?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<ReadCurrency200Response>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }

//        /// <summary>
//        /// Fetch languages Perform a filtered search for languages.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadLanguages200Response"/>&gt;</returns>
//        public async Task<ReadLanguages200Response?> ReadLanguagesAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadLanguages200Response?> result = await ReadLanguagesWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Fetch languages Perform a filtered search for languages.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadLanguages200Response"/>&gt;</returns>
//        public async Task<ReadLanguages200Response?> ReadLanguagesOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadLanguages200Response?>? result = null;
//            try 
//            {
//                result = await ReadLanguagesWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Fetch languages Perform a filtered search for languages.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadLanguages200Response"/></returns>
//        public async Task<ApiResponse<ReadLanguages200Response?>> ReadLanguagesWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/language";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    request.Content = (readCustomerRequest as object) is System.IO.Stream stream
//                        ? request.Content = new StreamContent(stream)
//                        : request.Content = new StringContent(JsonSerializer.Serialize(readCustomerRequest, _jsonSerializerOptions));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] contentTypes = new string[] {
//                        "application/json" 
//                    };

//                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

//                    if (contentType != null)
//                        request.Content.Headers.Add("ContentType", contentType);

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Post;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/language"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<ReadLanguages200Response?> apiResponse = new ApiResponse<ReadLanguages200Response?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<ReadLanguages200Response>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }

//        /// <summary>
//        /// Fetch salutations Perform a filtered search for salutations.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadSalutation200Response"/>&gt;</returns>
//        public async Task<ReadSalutation200Response?> ReadSalutationAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadSalutation200Response?> result = await ReadSalutationWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Fetch salutations Perform a filtered search for salutations.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ReadSalutation200Response"/>&gt;</returns>
//        public async Task<ReadSalutation200Response?> ReadSalutationOrDefaultAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ReadSalutation200Response?>? result = null;
//            try 
//            {
//                result = await ReadSalutationWithHttpInfoAsync(contentType, accept, readCustomerRequest, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Fetch salutations Perform a filtered search for salutations.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="readCustomerRequest"> (optional)</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ReadSalutation200Response"/></returns>
//        public async Task<ApiResponse<ReadSalutation200Response?>> ReadSalutationWithHttpInfoAsync(string contentType, string accept, ReadCustomerRequest? readCustomerRequest = null, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/salutation";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    request.Content = (readCustomerRequest as object) is System.IO.Stream stream
//                        ? request.Content = new StreamContent(stream)
//                        : request.Content = new StringContent(JsonSerializer.Serialize(readCustomerRequest, _jsonSerializerOptions));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] contentTypes = new string[] {
//                        "application/json" 
//                    };

//                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

//                    if (contentType != null)
//                        request.Content.Headers.Add("ContentType", contentType);

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Post;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/salutation"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<ReadSalutation200Response?> apiResponse = new ApiResponse<ReadSalutation200Response?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<ReadSalutation200Response>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }

//        /// <summary>
//        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
//        public async Task<ContextTokenResponse?> UpdateContextAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ContextTokenResponse?> result = await UpdateContextWithHttpInfoAsync(updateContextRequest, contentType, accept, cancellationToken).ConfigureAwait(false);

//            if (result.Content == null)
//                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

//            return result.Content;
//        }

//        /// <summary>
//        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ContextTokenResponse"/>&gt;</returns>
//        public async Task<ContextTokenResponse?> UpdateContextOrDefaultAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            ApiResponse<ContextTokenResponse?>? result = null;
//            try 
//            {
//                result = await UpdateContextWithHttpInfoAsync(updateContextRequest, contentType, accept, cancellationToken).ConfigureAwait(false);
//            }
//            catch (Exception)
//            {
//            }

//            return result != null && result.IsSuccessStatusCode
//                ? result.Content
//                : null;
//        }

//        /// <summary>
//        /// Modify the current context Used for switching the context. A typical example would be changing the language or changing the currency.
//        /// </summary>
//        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
//        /// <param name="updateContextRequest"></param>
//        /// <param name="contentType">Content type of the request</param>
//        /// <param name="accept">Accepted response content types</param>
//        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
//        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ContextTokenResponse"/></returns>
//        public async Task<ApiResponse<ContextTokenResponse?>> UpdateContextWithHttpInfoAsync(UpdateContextRequest updateContextRequest, string contentType, string accept, System.Threading.CancellationToken? cancellationToken = null)
//        {
//            try
//            {
//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                if (updateContextRequest == null)
//                    throw new ArgumentNullException(nameof(updateContextRequest));

//                if (contentType == null)
//                    throw new ArgumentNullException(nameof(contentType));

//                if (accept == null)
//                    throw new ArgumentNullException(nameof(accept));

//                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

//                using (HttpRequestMessage request = new HttpRequestMessage())
//                {
//                    UriBuilder uriBuilder = new UriBuilder();
//                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
//                    uriBuilder.Scheme = ClientUtils.SCHEME;
//                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/context";

//                    request.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType));

//                    request.Headers.Add("Accept", ClientUtils.ParameterToString(accept));

//                    request.Content = (updateContextRequest as object) is System.IO.Stream stream
//                        ? request.Content = new StreamContent(stream)
//                        : request.Content = new StringContent(JsonSerializer.Serialize(updateContextRequest, _jsonSerializerOptions));

//                    List<TokenBase> tokens = new List<TokenBase>();

//                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

//                    tokens.Add(apiKey);

//                    apiKey.UseInHeader(request, "sw-access-key");

//                    request.RequestUri = uriBuilder.Uri;

//                    string[] contentTypes = new string[] {
//                        "application/json" 
//                    };

//                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

//                    if (contentType != null)
//                        request.Content.Headers.Add("ContentType", contentType);

//                    string[] accepts = new string[] { 
//                        "application/json" 
//                    };

//                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

//                    if (accept != null)
//                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
//                    request.Method = HttpMethod.Patch;

//                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
//                    {
//                        DateTime requestedAt = DateTime.UtcNow;

//                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

//                        if (ApiResponded != null)
//                        {
//                            try
//                            {
//                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/context"));
//                            }
//                            catch(Exception e)
//                            {
//                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
//                            }
//                        }

//                        ApiResponse<ContextTokenResponse?> apiResponse = new ApiResponse<ContextTokenResponse?>(responseMessage, responseContent);

//                        if (apiResponse.IsSuccessStatusCode)
//                            apiResponse.Content = JsonSerializer.Deserialize<ContextTokenResponse>(apiResponse.RawContent, _jsonSerializerOptions);
//                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
//                            foreach(TokenBase token in tokens)
//                                token.BeginRateLimit();

//                        return apiResponse;
//                    }
//                }
//            }
//            catch(Exception e)
//            {
//                Logger.LogError(e, "An error occured while sending the request to the server.");
//                throw;
//            }
//        }    }
//}

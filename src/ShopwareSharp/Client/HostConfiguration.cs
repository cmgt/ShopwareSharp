/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using ShopwareSharp.Api;
using ShopwareSharp.Model;

namespace ShopwareSharp.Client
{
    /// <summary>
    /// Provides hosting configuration for ShopwareSharp
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new OpenAPIDateJsonConverter());
            _jsonOptions.Converters.Add(new CartJsonConverter());
            _jsonOptions.Converters.Add(new CartItemsJsonConverter());
            _jsonOptions.Converters.Add(new CategoryJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new CountryJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new CountryStateJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new CurrencyJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new DataJsonConverter());
            _jsonOptions.Converters.Add(new EntitySearchResultJsonConverter());
            _jsonOptions.Converters.Add(new LandingPageJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new LanguageJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new LinkJsonConverter());
            _jsonOptions.Converters.Add(new MainCategoryJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new PaymentMethodJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new ProductJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new ProductListingCriteriaJsonConverter());
            _jsonOptions.Converters.Add(new ProductListingResultJsonConverter());
            _jsonOptions.Converters.Add(new ReadCategoryList200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadCategoryRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadCmsRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadCountry200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadCurrency200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadCustomerRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadLandingPageRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadLanguages200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadNavigationRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadPaymentMethodRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadProduct200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadProductListingRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReadProductReviews200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadSalutation200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReadSeoUrl200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new RelationshipLinksSelfJsonConverter());
            _jsonOptions.Converters.Add(new RelationshipToOneJsonConverter());
            _jsonOptions.Converters.Add(new RelationshipsJsonConverter());
            _jsonOptions.Converters.Add(new SalesChannelContextJsonConverter());
            _jsonOptions.Converters.Add(new SalutationJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new SearchPageRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchSuggestRequestJsonConverter());
            _jsonOptions.Converters.Add(new SeoUrlJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new ShippingMethodJsonApiJsonConverter());
            _jsonOptions.Converters.Add(new SitemapJsonConverter());
            _jsonOptions.Converters.Add(new SuccessLinksJsonConverter());
            _services.AddSingleton(new JsonSerializerOptionsProvider(_jsonOptions));
            _services.AddSingleton<IAddressApi, AddressApi>();
            _services.AddSingleton<ICartApi, CartApi>();
            _services.AddSingleton<ICategoryApi, CategoryApi>();
            _services.AddSingleton<IContentApi, ContentApi>();
            _services.AddSingleton<IEndpointsSupportingCriteriaApi, EndpointsSupportingCriteriaApi>();
            _services.AddSingleton<ILoginRegistrationApi, LoginRegistrationApi>();
            _services.AddSingleton<INewsletterApi, NewsletterApi>();
            _services.AddSingleton<IOrderApi, OrderApi>();
            _services.AddSingleton<IPaymentMethodApi, PaymentMethodApi>();
            _services.AddSingleton<IPaymentShippingApi, PaymentShippingApi>();
            _services.AddSingleton<IProductApi, ProductApi>();
            _services.AddSingleton<IProfileApi, ProfileApi>();
            _services.AddSingleton<ISitemapRoutesApi, SitemapRoutesApi>();
            _services.AddSingleton<ISystemContextApi, SystemContextApi>();
            _services.AddSingleton<IWishlistApi, WishlistApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients<TAddressApi, TCartApi, TCategoryApi, TContentApi, TEndpointsSupportingCriteriaApi, TLoginRegistrationApi, TNewsletterApi, TOrderApi, TPaymentMethodApi, TPaymentShippingApi, TProductApi, TProfileApi, TSitemapRoutesApi, TSystemContextApi, TWishlistApi>
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
            where TAddressApi : class, IAddressApi
            where TCartApi : class, ICartApi
            where TCategoryApi : class, ICategoryApi
            where TContentApi : class, IContentApi
            where TEndpointsSupportingCriteriaApi : class, IEndpointsSupportingCriteriaApi
            where TLoginRegistrationApi : class, ILoginRegistrationApi
            where TNewsletterApi : class, INewsletterApi
            where TOrderApi : class, IOrderApi
            where TPaymentMethodApi : class, IPaymentMethodApi
            where TPaymentShippingApi : class, IPaymentShippingApi
            where TProductApi : class, IProductApi
            where TProfileApi : class, IProfileApi
            where TSitemapRoutesApi : class, ISitemapRoutesApi
            where TSystemContextApi : class, ISystemContextApi
            where TWishlistApi : class, IWishlistApi
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();
            
            builders.Add(_services.AddHttpClient<IAddressApi, TAddressApi>(client));
            builders.Add(_services.AddHttpClient<ICartApi, TCartApi>(client));
            builders.Add(_services.AddHttpClient<ICategoryApi, TCategoryApi>(client));
            builders.Add(_services.AddHttpClient<IContentApi, TContentApi>(client));
            builders.Add(_services.AddHttpClient<IEndpointsSupportingCriteriaApi, TEndpointsSupportingCriteriaApi>(client));
            builders.Add(_services.AddHttpClient<ILoginRegistrationApi, TLoginRegistrationApi>(client));
            builders.Add(_services.AddHttpClient<INewsletterApi, TNewsletterApi>(client));
            builders.Add(_services.AddHttpClient<IOrderApi, TOrderApi>(client));
            builders.Add(_services.AddHttpClient<IPaymentMethodApi, TPaymentMethodApi>(client));
            builders.Add(_services.AddHttpClient<IPaymentShippingApi, TPaymentShippingApi>(client));
            builders.Add(_services.AddHttpClient<IProductApi, TProductApi>(client));
            builders.Add(_services.AddHttpClient<IProfileApi, TProfileApi>(client));
            builders.Add(_services.AddHttpClient<ISitemapRoutesApi, TSitemapRoutesApi>(client));
            builders.Add(_services.AddHttpClient<ISystemContextApi, TSystemContextApi>(client));
            builders.Add(_services.AddHttpClient<IWishlistApi, TWishlistApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients(Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            AddApiHttpClients<AddressApi, CartApi, CategoryApi, ContentApi, EndpointsSupportingCriteriaApi, LoginRegistrationApi, NewsletterApi, OrderApi, PaymentMethodApi, PaymentShippingApi, ProductApi, ProfileApi, SitemapRoutesApi, SystemContextApi, WishlistApi>(client, builder);

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}

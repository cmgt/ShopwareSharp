// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Additional search parameters for product listings
    /// </summary>
    public partial class ProductListingCriteriaAllOf : IEquatable<ProductListingCriteriaAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListingCriteriaAllOf" /> class.
        /// </summary>
        /// <param name="order">Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.</param>
        /// <param name="limit">Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.</param>
        /// <param name="manufacturer">Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;.</param>
        /// <param name="rating">Filter products with a minimum average rating.</param>
        /// <param name="properties">Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;.</param>
        /// <param name="propertyWhitelist">A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect.</param>
        /// <param name="reduceAggregations">By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.</param>
        /// <param name="p">Search result page (default to 1)</param>
        /// <param name="minPrice">Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter. (default to 0)</param>
        /// <param name="maxPrice">Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter. (default to 0)</param>
        /// <param name="shippingFree">Filters products that are marked as shipping-free. (default to false)</param>
        /// <param name="manufacturerFilter">Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response. (default to true)</param>
        /// <param name="priceFilter">Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response. (default to true)</param>
        /// <param name="ratingFilter">Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response. (default to true)</param>
        /// <param name="shippingFreeFilter">Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response. (default to true)</param>
        /// <param name="propertyFilter">Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response. (default to true)</param>
        public ProductListingCriteriaAllOf(string? order = default, int? limit = default, string? manufacturer = default, int? rating = default, string? properties = default, string? propertyWhitelist = default, string? reduceAggregations = default, int? p = 1, int? minPrice = 0, int? maxPrice = 0, bool? shippingFree = false, bool? manufacturerFilter = true, bool? priceFilter = true, bool? ratingFilter = true, bool? shippingFreeFilter = true, bool? propertyFilter = true)
        {
            Order = order;
            Limit = limit;
            Manufacturer = manufacturer;
            Rating = rating;
            Properties = properties;
            PropertyWhitelist = propertyWhitelist;
            ReduceAggregations = reduceAggregations;
            P = p;
            MinPrice = minPrice;
            MaxPrice = maxPrice;
            ShippingFree = shippingFree;
            ManufacturerFilter = manufacturerFilter;
            PriceFilter = priceFilter;
            RatingFilter = ratingFilter;
            ShippingFreeFilter = shippingFreeFilter;
            PropertyFilter = propertyFilter;
        }

        /// <summary>
        /// Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.
        /// </summary>
        /// <value>Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.</value>
        [JsonPropertyName("order")]
        public string? Order { get; set; }

        /// <summary>
        /// Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.
        /// </summary>
        /// <value>Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.</value>
        [JsonPropertyName("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;.
        /// </summary>
        /// <value>Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;.</value>
        [JsonPropertyName("manufacturer")]
        public string? Manufacturer { get; set; }

        /// <summary>
        /// Filter products with a minimum average rating.
        /// </summary>
        /// <value>Filter products with a minimum average rating.</value>
        [JsonPropertyName("rating")]
        public int? Rating { get; set; }

        /// <summary>
        /// Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;.
        /// </summary>
        /// <value>Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;.</value>
        [JsonPropertyName("properties")]
        public string? Properties { get; set; }

        /// <summary>
        /// A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect.
        /// </summary>
        /// <value>A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect.</value>
        [JsonPropertyName("property-whitelist")]
        public string? PropertyWhitelist { get; set; }

        /// <summary>
        /// By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.
        /// </summary>
        /// <value>By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.</value>
        [JsonPropertyName("reduce-aggregations")]
        public string? ReduceAggregations { get; set; }

        /// <summary>
        /// Search result page
        /// </summary>
        /// <value>Search result page</value>
        [JsonPropertyName("p")]
        public int? P { get; set; }

        /// <summary>
        /// Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter.
        /// </summary>
        /// <value>Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter.</value>
        [JsonPropertyName("min-price")]
        public int? MinPrice { get; set; }

        /// <summary>
        /// Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter.
        /// </summary>
        /// <value>Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter.</value>
        [JsonPropertyName("max-price")]
        public int? MaxPrice { get; set; }

        /// <summary>
        /// Filters products that are marked as shipping-free.
        /// </summary>
        /// <value>Filters products that are marked as shipping-free.</value>
        [JsonPropertyName("shipping-free")]
        public bool? ShippingFree { get; set; }

        /// <summary>
        /// Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response.</value>
        [JsonPropertyName("manufacturer-filter")]
        public bool? ManufacturerFilter { get; set; }

        /// <summary>
        /// Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response.</value>
        [JsonPropertyName("price-filter")]
        public bool? PriceFilter { get; set; }

        /// <summary>
        /// Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response.</value>
        [JsonPropertyName("rating-filter")]
        public bool? RatingFilter { get; set; }

        /// <summary>
        /// Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response.</value>
        [JsonPropertyName("shipping-free-filter")]
        public bool? ShippingFreeFilter { get; set; }

        /// <summary>
        /// Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response.</value>
        [JsonPropertyName("property-filter")]
        public bool? PropertyFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductListingCriteriaAllOf {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PropertyWhitelist: ").Append(PropertyWhitelist).Append("\n");
            sb.Append("  ReduceAggregations: ").Append(ReduceAggregations).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  ShippingFree: ").Append(ShippingFree).Append("\n");
            sb.Append("  ManufacturerFilter: ").Append(ManufacturerFilter).Append("\n");
            sb.Append("  PriceFilter: ").Append(PriceFilter).Append("\n");
            sb.Append("  RatingFilter: ").Append(RatingFilter).Append("\n");
            sb.Append("  ShippingFreeFilter: ").Append(ShippingFreeFilter).Append("\n");
            sb.Append("  PropertyFilter: ").Append(PropertyFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ProductListingCriteriaAllOf);
        }

        /// <summary>
        /// Returns true if ProductListingCriteriaAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductListingCriteriaAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductListingCriteriaAllOf? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Rating == input.Rating ||
                    this.Rating.Equals(input.Rating)
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.PropertyWhitelist == input.PropertyWhitelist ||
                    (this.PropertyWhitelist != null &&
                    this.PropertyWhitelist.Equals(input.PropertyWhitelist))
                ) && 
                (
                    this.ReduceAggregations == input.ReduceAggregations ||
                    (this.ReduceAggregations != null &&
                    this.ReduceAggregations.Equals(input.ReduceAggregations))
                ) && 
                (
                    this.P == input.P ||
                    this.P.Equals(input.P)
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    this.MinPrice.Equals(input.MinPrice)
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    this.MaxPrice.Equals(input.MaxPrice)
                ) && 
                (
                    this.ShippingFree == input.ShippingFree ||
                    this.ShippingFree.Equals(input.ShippingFree)
                ) && 
                (
                    this.ManufacturerFilter == input.ManufacturerFilter ||
                    this.ManufacturerFilter.Equals(input.ManufacturerFilter)
                ) && 
                (
                    this.PriceFilter == input.PriceFilter ||
                    this.PriceFilter.Equals(input.PriceFilter)
                ) && 
                (
                    this.RatingFilter == input.RatingFilter ||
                    this.RatingFilter.Equals(input.RatingFilter)
                ) && 
                (
                    this.ShippingFreeFilter == input.ShippingFreeFilter ||
                    this.ShippingFreeFilter.Equals(input.ShippingFreeFilter)
                ) && 
                (
                    this.PropertyFilter == input.PropertyFilter ||
                    this.PropertyFilter.Equals(input.PropertyFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.PropertyWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyWhitelist.GetHashCode();
                }
                if (this.ReduceAggregations != null)
                {
                    hashCode = (hashCode * 59) + this.ReduceAggregations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.P.GetHashCode();
                hashCode = (hashCode * 59) + this.MinPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFree.GetHashCode();
                hashCode = (hashCode * 59) + this.ManufacturerFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.RatingFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFreeFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.PropertyFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Limit (int) minimum
            if (this.Limit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 0.", new [] { "Limit" });
            }

            // MinPrice (int) minimum
            if (this.MinPrice < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinPrice, must be a value greater than or equal to 0.", new [] { "MinPrice" });
            }

            // MaxPrice (int) minimum
            if (this.MaxPrice < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxPrice, must be a value greater than or equal to 0.", new [] { "MaxPrice" });
            }

            yield break;
        }
    }

}

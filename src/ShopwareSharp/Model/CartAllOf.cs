// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// CartAllOf
    /// </summary>
    public partial class CartAllOf : IEquatable<CartAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartAllOf" /> class.
        /// </summary>
        /// <param name="name">Name of the cart - for example &#x60;guest-cart&#x60;</param>
        /// <param name="token">Context token identifying the cart and the user session</param>
        /// <param name="price">price</param>
        /// <param name="lineItems">All items within the cart</param>
        /// <param name="errors">A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers.</param>
        /// <param name="transactions">A list of all payment transactions associated with the current cart.</param>
        /// <param name="modified">modified</param>
        /// <param name="customerComment">A comment that can be added to the cart.</param>
        /// <param name="affiliateCode">An affiliate tracking code</param>
        /// <param name="campaignCode">A campaign tracking code</param>
        public CartAllOf(string? name = default, string? token = default, CartAllOfPrice? price = default,
            List<LineItem>? lineItems = default, Object? errors = default,
            List<CartDelivery>? deliveries = default,
            List<CartAllOfTransactions>? transactions = default, bool? modified = default,
            string? customerComment = default, string? affiliateCode = default, string? campaignCode = default)
        {
            Name = name;
            Token = token;
            Price = price;
            LineItems = lineItems;
            Errors = errors;
            Transactions = transactions;
            Modified = modified;
            CustomerComment = customerComment;
            AffiliateCode = affiliateCode;
            CampaignCode = campaignCode;
            Deliveries = deliveries;
        }

        public List<CartDelivery>? Deliveries { get; set; }

        [JsonConstructor]
        public CartAllOf()
        {}

        /// <summary>
        /// Name of the cart - for example &#x60;guest-cart&#x60;
        /// </summary>
        /// <value>Name of the cart - for example &#x60;guest-cart&#x60;</value>
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Context token identifying the cart and the user session
        /// </summary>
        /// <value>Context token identifying the cart and the user session</value>
        [JsonPropertyName("token")]
        public string? Token { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public CartAllOfPrice? Price { get; set; }

        /// <summary>
        /// All items within the cart
        /// </summary>
        /// <value>All items within the cart</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem>? LineItems { get; set; }

        /// <summary>
        /// A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers.
        /// </summary>
        /// <value>A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers.</value>
        [JsonPropertyName("errors")]
        public Object? Errors { get; set; }

        /// <summary>
        /// A list of all payment transactions associated with the current cart.
        /// </summary>
        /// <value>A list of all payment transactions associated with the current cart.</value>
        [JsonPropertyName("transactions")]
        public List<CartAllOfTransactions>? Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [JsonPropertyName("modified")]
        public bool? Modified { get; set; }

        /// <summary>
        /// A comment that can be added to the cart.
        /// </summary>
        /// <value>A comment that can be added to the cart.</value>
        [JsonPropertyName("customerComment")]
        public string? CustomerComment { get; set; }

        /// <summary>
        /// An affiliate tracking code
        /// </summary>
        /// <value>An affiliate tracking code</value>
        [JsonPropertyName("affiliateCode")]
        public string? AffiliateCode { get; set; }

        /// <summary>
        /// A campaign tracking code
        /// </summary>
        /// <value>A campaign tracking code</value>
        [JsonPropertyName("campaignCode")]
        public string? CampaignCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  CustomerComment: ").Append(CustomerComment).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CartAllOf);
        }

        /// <summary>
        /// Returns true if CartAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CartAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartAllOf? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) &&
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Modified == input.Modified ||
                    this.Modified.Equals(input.Modified)
                ) && 
                (
                    this.CustomerComment == input.CustomerComment ||
                    (this.CustomerComment != null &&
                    this.CustomerComment.Equals(input.CustomerComment))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                if (this.CustomerComment != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerComment.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

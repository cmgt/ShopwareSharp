/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Country")]
    public partial class Country : IEquatable<Country>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Country" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Country() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Country" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="iso">iso.</param>
        /// <param name="position">position.</param>
        /// <param name="taxFree">taxFree.</param>
        /// <param name="active">active.</param>
        /// <param name="shippingAvailable">shippingAvailable.</param>
        /// <param name="iso3">iso3.</param>
        /// <param name="displayStateInRegistration">displayStateInRegistration.</param>
        /// <param name="forceStateInRegistration">forceStateInRegistration.</param>
        /// <param name="companyTaxFree">companyTaxFree.</param>
        /// <param name="checkVatIdPattern">checkVatIdPattern.</param>
        /// <param name="vatIdPattern">vatIdPattern.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="translated">translated.</param>
        /// <param name="states">states.</param>
        public Country(string id = default(string), string name = default(string), string iso = default(string), long position = default(long), bool taxFree = default(bool), bool active = default(bool), bool shippingAvailable = default(bool), string iso3 = default(string), bool displayStateInRegistration = default(bool), bool forceStateInRegistration = default(bool), bool companyTaxFree = default(bool), bool checkVatIdPattern = default(bool), string vatIdPattern = default(string), Object customFields = default(Object), Object translated = default(Object), CountryState states = default(CountryState))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Country and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.Iso = iso;
            this.Position = position;
            this.TaxFree = taxFree;
            this.Active = active;
            this.ShippingAvailable = shippingAvailable;
            this.Iso3 = iso3;
            this.DisplayStateInRegistration = displayStateInRegistration;
            this.ForceStateInRegistration = forceStateInRegistration;
            this.CompanyTaxFree = companyTaxFree;
            this.CheckVatIdPattern = checkVatIdPattern;
            this.VatIdPattern = vatIdPattern;
            this.CustomFields = customFields;
            this.Translated = translated;
            this.States = states;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Iso
        /// </summary>
        [DataMember(Name = "iso", EmitDefaultValue = false)]
        public string Iso { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public long Position { get; set; }

        /// <summary>
        /// Gets or Sets TaxFree
        /// </summary>
        [DataMember(Name = "taxFree", EmitDefaultValue = true)]
        public bool TaxFree { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAvailable
        /// </summary>
        [DataMember(Name = "shippingAvailable", EmitDefaultValue = true)]
        public bool ShippingAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Iso3
        /// </summary>
        [DataMember(Name = "iso3", EmitDefaultValue = false)]
        public string Iso3 { get; set; }

        /// <summary>
        /// Gets or Sets DisplayStateInRegistration
        /// </summary>
        [DataMember(Name = "displayStateInRegistration", EmitDefaultValue = true)]
        public bool DisplayStateInRegistration { get; set; }

        /// <summary>
        /// Gets or Sets ForceStateInRegistration
        /// </summary>
        [DataMember(Name = "forceStateInRegistration", EmitDefaultValue = true)]
        public bool ForceStateInRegistration { get; set; }

        /// <summary>
        /// Gets or Sets CompanyTaxFree
        /// </summary>
        [DataMember(Name = "companyTaxFree", EmitDefaultValue = true)]
        public bool CompanyTaxFree { get; set; }

        /// <summary>
        /// Gets or Sets CheckVatIdPattern
        /// </summary>
        [DataMember(Name = "checkVatIdPattern", EmitDefaultValue = true)]
        public bool CheckVatIdPattern { get; set; }

        /// <summary>
        /// Gets or Sets VatIdPattern
        /// </summary>
        [DataMember(Name = "vatIdPattern", EmitDefaultValue = false)]
        public string VatIdPattern { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name = "states", EmitDefaultValue = false)]
        public CountryState States { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Country {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  TaxFree: ").Append(TaxFree).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ShippingAvailable: ").Append(ShippingAvailable).Append("\n");
            sb.Append("  Iso3: ").Append(Iso3).Append("\n");
            sb.Append("  DisplayStateInRegistration: ").Append(DisplayStateInRegistration).Append("\n");
            sb.Append("  ForceStateInRegistration: ").Append(ForceStateInRegistration).Append("\n");
            sb.Append("  CompanyTaxFree: ").Append(CompanyTaxFree).Append("\n");
            sb.Append("  CheckVatIdPattern: ").Append(CheckVatIdPattern).Append("\n");
            sb.Append("  VatIdPattern: ").Append(VatIdPattern).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Country);
        }

        /// <summary>
        /// Returns true if Country instances are equal
        /// </summary>
        /// <param name="input">Instance of Country to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Country input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Iso == input.Iso ||
                    (this.Iso != null &&
                    this.Iso.Equals(input.Iso))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.TaxFree == input.TaxFree ||
                    this.TaxFree.Equals(input.TaxFree)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.ShippingAvailable == input.ShippingAvailable ||
                    this.ShippingAvailable.Equals(input.ShippingAvailable)
                ) && 
                (
                    this.Iso3 == input.Iso3 ||
                    (this.Iso3 != null &&
                    this.Iso3.Equals(input.Iso3))
                ) && 
                (
                    this.DisplayStateInRegistration == input.DisplayStateInRegistration ||
                    this.DisplayStateInRegistration.Equals(input.DisplayStateInRegistration)
                ) && 
                (
                    this.ForceStateInRegistration == input.ForceStateInRegistration ||
                    this.ForceStateInRegistration.Equals(input.ForceStateInRegistration)
                ) && 
                (
                    this.CompanyTaxFree == input.CompanyTaxFree ||
                    this.CompanyTaxFree.Equals(input.CompanyTaxFree)
                ) && 
                (
                    this.CheckVatIdPattern == input.CheckVatIdPattern ||
                    this.CheckVatIdPattern.Equals(input.CheckVatIdPattern)
                ) && 
                (
                    this.VatIdPattern == input.VatIdPattern ||
                    (this.VatIdPattern != null &&
                    this.VatIdPattern.Equals(input.VatIdPattern))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.States == input.States ||
                    (this.States != null &&
                    this.States.Equals(input.States))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Iso != null)
                {
                    hashCode = (hashCode * 59) + this.Iso.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxFree.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingAvailable.GetHashCode();
                if (this.Iso3 != null)
                {
                    hashCode = (hashCode * 59) + this.Iso3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayStateInRegistration.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceStateInRegistration.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyTaxFree.GetHashCode();
                hashCode = (hashCode * 59) + this.CheckVatIdPattern.GetHashCode();
                if (this.VatIdPattern != null)
                {
                    hashCode = (hashCode * 59) + this.VatIdPattern.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}

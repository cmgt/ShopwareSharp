/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.4.0.0
    /// </summary>
    [DataContract(Name = "LandingPage")]
    public partial class LandingPage : IEquatable<LandingPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LandingPage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPage" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="active">active.</param>
        /// <param name="name">name (required).</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="slotConfig">slotConfig.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="url">url (required).</param>
        /// <param name="cmsPageId">cmsPageId.</param>
        /// <param name="cmsPageVersionId">cmsPageVersionId.</param>
        /// <param name="translated">translated.</param>
        /// <param name="cmsPage">cmsPage.</param>
        /// <param name="seoUrls">seoUrls.</param>
        public LandingPage(string id = default(string), string versionId = default(string), bool active = default(bool), string name = default(string), Object customFields = default(Object), Object slotConfig = default(Object), string metaTitle = default(string), string metaDescription = default(string), string keywords = default(string), string url = default(string), string cmsPageId = default(string), string cmsPageVersionId = default(string), Object translated = default(Object), CmsPage cmsPage = default(CmsPage), SeoUrl seoUrls = default(SeoUrl))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LandingPage and cannot be null");
            }
            this._Name = name;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for LandingPage and cannot be null");
            }
            this._Url = url;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._SlotConfig = slotConfig;
            if (this.SlotConfig != null)
            {
                this._flagSlotConfig = true;
            }
            this._MetaTitle = metaTitle;
            if (this.MetaTitle != null)
            {
                this._flagMetaTitle = true;
            }
            this._MetaDescription = metaDescription;
            if (this.MetaDescription != null)
            {
                this._flagMetaDescription = true;
            }
            this._Keywords = keywords;
            if (this.Keywords != null)
            {
                this._flagKeywords = true;
            }
            this._CmsPageId = cmsPageId;
            if (this.CmsPageId != null)
            {
                this._flagCmsPageId = true;
            }
            this._CmsPageVersionId = cmsPageVersionId;
            if (this.CmsPageVersionId != null)
            {
                this._flagCmsPageVersionId = true;
            }
            this._Translated = translated;
            if (this.Translated != null)
            {
                this._flagTranslated = true;
            }
            this._CmsPage = cmsPage;
            if (this.CmsPage != null)
            {
                this._flagCmsPage = true;
            }
            this._SeoUrls = seoUrls;
            if (this.SeoUrls != null)
            {
                this._flagSeoUrls = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets SlotConfig
        /// </summary>
        [DataMember(Name = "slotConfig", EmitDefaultValue = false)]
        public Object SlotConfig
        {
            get{ return _SlotConfig;}
            set
            {
                _SlotConfig = value;
                _flagSlotConfig = true;
            }
        }
        private Object _SlotConfig;
        private bool _flagSlotConfig;

        /// <summary>
        /// Returns false as SlotConfig should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSlotConfig()
        {
            return _flagSlotConfig;
        }
        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name = "metaTitle", EmitDefaultValue = false)]
        public string MetaTitle
        {
            get{ return _MetaTitle;}
            set
            {
                _MetaTitle = value;
                _flagMetaTitle = true;
            }
        }
        private string _MetaTitle;
        private bool _flagMetaTitle;

        /// <summary>
        /// Returns false as MetaTitle should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetaTitle()
        {
            return _flagMetaTitle;
        }
        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name = "metaDescription", EmitDefaultValue = false)]
        public string MetaDescription
        {
            get{ return _MetaDescription;}
            set
            {
                _MetaDescription = value;
                _flagMetaDescription = true;
            }
        }
        private string _MetaDescription;
        private bool _flagMetaDescription;

        /// <summary>
        /// Returns false as MetaDescription should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetaDescription()
        {
            return _flagMetaDescription;
        }
        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public string Keywords
        {
            get{ return _Keywords;}
            set
            {
                _Keywords = value;
                _flagKeywords = true;
            }
        }
        private string _Keywords;
        private bool _flagKeywords;

        /// <summary>
        /// Returns false as Keywords should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeywords()
        {
            return _flagKeywords;
        }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url
        {
            get{ return _Url;}
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// Gets or Sets CmsPageId
        /// </summary>
        [DataMember(Name = "cmsPageId", EmitDefaultValue = false)]
        public string CmsPageId
        {
            get{ return _CmsPageId;}
            set
            {
                _CmsPageId = value;
                _flagCmsPageId = true;
            }
        }
        private string _CmsPageId;
        private bool _flagCmsPageId;

        /// <summary>
        /// Returns false as CmsPageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPageId()
        {
            return _flagCmsPageId;
        }
        /// <summary>
        /// Gets or Sets CmsPageVersionId
        /// </summary>
        [DataMember(Name = "cmsPageVersionId", EmitDefaultValue = false)]
        public string CmsPageVersionId
        {
            get{ return _CmsPageVersionId;}
            set
            {
                _CmsPageVersionId = value;
                _flagCmsPageVersionId = true;
            }
        }
        private string _CmsPageVersionId;
        private bool _flagCmsPageVersionId;

        /// <summary>
        /// Returns false as CmsPageVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPageVersionId()
        {
            return _flagCmsPageVersionId;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated
        {
            get{ return _Translated;}
            set
            {
                _Translated = value;
                _flagTranslated = true;
            }
        }
        private Object _Translated;
        private bool _flagTranslated;

        /// <summary>
        /// Returns false as Translated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslated()
        {
            return _flagTranslated;
        }
        /// <summary>
        /// Gets or Sets CmsPage
        /// </summary>
        [DataMember(Name = "cmsPage", EmitDefaultValue = false)]
        public CmsPage CmsPage
        {
            get{ return _CmsPage;}
            set
            {
                _CmsPage = value;
                _flagCmsPage = true;
            }
        }
        private CmsPage _CmsPage;
        private bool _flagCmsPage;

        /// <summary>
        /// Returns false as CmsPage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPage()
        {
            return _flagCmsPage;
        }
        /// <summary>
        /// Gets or Sets SeoUrls
        /// </summary>
        [DataMember(Name = "seoUrls", EmitDefaultValue = false)]
        public SeoUrl SeoUrls
        {
            get{ return _SeoUrls;}
            set
            {
                _SeoUrls = value;
                _flagSeoUrls = true;
            }
        }
        private SeoUrl _SeoUrls;
        private bool _flagSeoUrls;

        /// <summary>
        /// Returns false as SeoUrls should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeoUrls()
        {
            return _flagSeoUrls;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LandingPage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SlotConfig: ").Append(SlotConfig).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CmsPageId: ").Append(CmsPageId).Append("\n");
            sb.Append("  CmsPageVersionId: ").Append(CmsPageVersionId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  CmsPage: ").Append(CmsPage).Append("\n");
            sb.Append("  SeoUrls: ").Append(SeoUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LandingPage);
        }

        /// <summary>
        /// Returns true if LandingPage instances are equal
        /// </summary>
        /// <param name="input">Instance of LandingPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LandingPage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.SlotConfig == input.SlotConfig ||
                    (this.SlotConfig != null &&
                    this.SlotConfig.Equals(input.SlotConfig))
                ) && 
                (
                    this.MetaTitle == input.MetaTitle ||
                    (this.MetaTitle != null &&
                    this.MetaTitle.Equals(input.MetaTitle))
                ) && 
                (
                    this.MetaDescription == input.MetaDescription ||
                    (this.MetaDescription != null &&
                    this.MetaDescription.Equals(input.MetaDescription))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.CmsPageId == input.CmsPageId ||
                    (this.CmsPageId != null &&
                    this.CmsPageId.Equals(input.CmsPageId))
                ) && 
                (
                    this.CmsPageVersionId == input.CmsPageVersionId ||
                    (this.CmsPageVersionId != null &&
                    this.CmsPageVersionId.Equals(input.CmsPageVersionId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.CmsPage == input.CmsPage ||
                    (this.CmsPage != null &&
                    this.CmsPage.Equals(input.CmsPage))
                ) && 
                (
                    this.SeoUrls == input.SeoUrls ||
                    (this.SeoUrls != null &&
                    this.SeoUrls.Equals(input.SeoUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.SlotConfig != null)
                {
                    hashCode = (hashCode * 59) + this.SlotConfig.GetHashCode();
                }
                if (this.MetaTitle != null)
                {
                    hashCode = (hashCode * 59) + this.MetaTitle.GetHashCode();
                }
                if (this.MetaDescription != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDescription.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.CmsPageId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageId.GetHashCode();
                }
                if (this.CmsPageVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageVersionId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.CmsPage != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPage.GetHashCode();
                }
                if (this.SeoUrls != null)
                {
                    hashCode = (hashCode * 59) + this.SeoUrls.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // CmsPageId (string) pattern
            Regex regexCmsPageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageId.Match(this.CmsPageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageId, must match a pattern of " + regexCmsPageId, new [] { "CmsPageId" });
            }

            // CmsPageVersionId (string) pattern
            Regex regexCmsPageVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageVersionId.Match(this.CmsPageVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageVersionId, must match a pattern of " + regexCmsPageVersionId, new [] { "CmsPageVersionId" });
            }

            yield break;
        }
    }

}

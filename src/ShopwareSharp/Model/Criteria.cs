// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Xml;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Search parameters. For more information, see our documentation on [Search Queries](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#structure)
    /// </summary>
    public partial class Criteria : IEquatable<Criteria>, IValidatableObject
    {
        public static readonly object AssociationDefault = new object();

        /// <summary>
        /// Initializes a new instance of the <see cref="Criteria" /> class.
        /// </summary>
        /// <param name="page">Search result page</param>
        /// <param name="limit">Number of items per result page</param>
        /// <param name="filter">List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)</param>
        /// <param name="sort">Sorting in the search result.</param>
        /// <param name="postFilter">Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)</param>
        /// <param name="associations">Used to fetch associations which are not fetched by default.</param>
        /// <param name="aggregations">Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)</param>
        /// <param name="grouping">Perform groupings over certain fields</param>
        public Criteria(int? page = default, int? limit = default, List<CriteriaFilterInner>? filter = default,
            List<CriteriaSortInner>? sort = default, List<CriteriaFilterInner>? postFilter = default,
            Object? associations = default, List<CriteriaAggregationsInner>? aggregations = default,
            List<string>? grouping = default, Dictionary<string, string[]>? includes = default, string[]? ids = default)
        {
            Page = page;
            Limit = limit;
            Filter = filter;
            Sort = sort;
            PostFilter = postFilter;
            Associations = associations;
            Aggregations = aggregations;
            Grouping = grouping;
            Includes = includes;
            Ids = ids;
        }

        /// <summary>
        /// Limits the search to a list of Ids
        /// </summary>
        [JsonPropertyName("ids")]
        public string[]? Ids { get; set; }

        /// <summary>
        /// Restricts the output to the defined fields
        /// </summary>
        [JsonPropertyName("includes")]
        public Dictionary<string, string[]>? Includes { get; set; }

        /// <summary>
        /// Search result page
        /// </summary>
        /// <value>Search result page</value>
        [JsonPropertyName("page")]
        public int? Page { get; set; }

        /// <summary>
        /// Number of items per result page
        /// </summary>
        /// <value>Number of items per result page</value>
        [JsonPropertyName("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)
        /// </summary>
        /// <value>List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)</value>
        [JsonPropertyName("filter")]
        public List<CriteriaFilterInner>? Filter { get; set; }

        /// <summary>
        /// Sorting in the search result.
        /// </summary>
        /// <value>Sorting in the search result.</value>
        [JsonPropertyName("sort")]
        public List<CriteriaSortInner>? Sort { get; set; }

        /// <summary>
        /// Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)
        /// </summary>
        /// <value>Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)</value>
        [JsonPropertyName("post-filter")]
        public List<CriteriaFilterInner>? PostFilter { get; set; }

        /// <summary>
        /// Used to fetch associations which are not fetched by default.
        /// </summary>
        /// <value>Used to fetch associations which are not fetched by default.</value>
        [JsonPropertyName("associations")]
        public Object? Associations { get; set; }

        /// <summary>
        /// Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)
        /// </summary>
        /// <value>Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)</value>
        [JsonPropertyName("aggregations")]
        public List<CriteriaAggregationsInner>? Aggregations { get; set; }

        /// <summary>
        /// Perform groupings over certain fields
        /// </summary>
        /// <value>Perform groupings over certain fields</value>
        [JsonPropertyName("grouping")]
        public List<string>? Grouping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Criteria {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  PostFilter: ").Append(PostFilter).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Criteria);
        }

        /// <summary>
        /// Returns true if Criteria instances are equal
        /// </summary>
        /// <param name="input">Instance of Criteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Criteria? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    input.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                ) && 
                (
                    this.PostFilter == input.PostFilter ||
                    this.PostFilter != null &&
                    input.PostFilter != null &&
                    this.PostFilter.SequenceEqual(input.PostFilter)
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    input.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.Grouping == input.Grouping ||
                    this.Grouping != null &&
                    input.Grouping != null &&
                    this.Grouping.SequenceEqual(input.Grouping)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                if (this.PostFilter != null)
                {
                    hashCode = (hashCode * 59) + this.PostFilter.GetHashCode();
                }
                if (this.Associations != null)
                {
                    hashCode = (hashCode * 59) + this.Associations.GetHashCode();
                }
                if (this.Aggregations != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregations.GetHashCode();
                }
                if (this.Grouping != null)
                {
                    hashCode = (hashCode * 59) + this.Grouping.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "CustomerGroup")]
    public partial class CustomerGroup : IEquatable<CustomerGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerGroup" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="displayGross">displayGross.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="registrationActive">registrationActive.</param>
        /// <param name="registrationTitle">registrationTitle.</param>
        /// <param name="registrationIntroduction">registrationIntroduction.</param>
        /// <param name="registrationOnlyCompanyRegistration">registrationOnlyCompanyRegistration.</param>
        /// <param name="registrationSeoMetaDescription">registrationSeoMetaDescription.</param>
        /// <param name="translated">translated.</param>
        public CustomerGroup(string id = default(string), string name = default(string), bool displayGross = default(bool), Object customFields = default(Object), bool registrationActive = default(bool), string registrationTitle = default(string), string registrationIntroduction = default(string), bool registrationOnlyCompanyRegistration = default(bool), string registrationSeoMetaDescription = default(string), Object translated = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CustomerGroup and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.DisplayGross = displayGross;
            this.CustomFields = customFields;
            this.RegistrationActive = registrationActive;
            this.RegistrationTitle = registrationTitle;
            this.RegistrationIntroduction = registrationIntroduction;
            this.RegistrationOnlyCompanyRegistration = registrationOnlyCompanyRegistration;
            this.RegistrationSeoMetaDescription = registrationSeoMetaDescription;
            this.Translated = translated;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayGross
        /// </summary>
        [DataMember(Name = "displayGross", EmitDefaultValue = true)]
        public bool DisplayGross { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationActive
        /// </summary>
        [DataMember(Name = "registrationActive", EmitDefaultValue = true)]
        public bool RegistrationActive { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationTitle
        /// </summary>
        [DataMember(Name = "registrationTitle", EmitDefaultValue = false)]
        public string RegistrationTitle { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationIntroduction
        /// </summary>
        [DataMember(Name = "registrationIntroduction", EmitDefaultValue = false)]
        public string RegistrationIntroduction { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationOnlyCompanyRegistration
        /// </summary>
        [DataMember(Name = "registrationOnlyCompanyRegistration", EmitDefaultValue = true)]
        public bool RegistrationOnlyCompanyRegistration { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationSeoMetaDescription
        /// </summary>
        [DataMember(Name = "registrationSeoMetaDescription", EmitDefaultValue = false)]
        public string RegistrationSeoMetaDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayGross: ").Append(DisplayGross).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  RegistrationActive: ").Append(RegistrationActive).Append("\n");
            sb.Append("  RegistrationTitle: ").Append(RegistrationTitle).Append("\n");
            sb.Append("  RegistrationIntroduction: ").Append(RegistrationIntroduction).Append("\n");
            sb.Append("  RegistrationOnlyCompanyRegistration: ").Append(RegistrationOnlyCompanyRegistration).Append("\n");
            sb.Append("  RegistrationSeoMetaDescription: ").Append(RegistrationSeoMetaDescription).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerGroup);
        }

        /// <summary>
        /// Returns true if CustomerGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayGross == input.DisplayGross ||
                    this.DisplayGross.Equals(input.DisplayGross)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.RegistrationActive == input.RegistrationActive ||
                    this.RegistrationActive.Equals(input.RegistrationActive)
                ) && 
                (
                    this.RegistrationTitle == input.RegistrationTitle ||
                    (this.RegistrationTitle != null &&
                    this.RegistrationTitle.Equals(input.RegistrationTitle))
                ) && 
                (
                    this.RegistrationIntroduction == input.RegistrationIntroduction ||
                    (this.RegistrationIntroduction != null &&
                    this.RegistrationIntroduction.Equals(input.RegistrationIntroduction))
                ) && 
                (
                    this.RegistrationOnlyCompanyRegistration == input.RegistrationOnlyCompanyRegistration ||
                    this.RegistrationOnlyCompanyRegistration.Equals(input.RegistrationOnlyCompanyRegistration)
                ) && 
                (
                    this.RegistrationSeoMetaDescription == input.RegistrationSeoMetaDescription ||
                    (this.RegistrationSeoMetaDescription != null &&
                    this.RegistrationSeoMetaDescription.Equals(input.RegistrationSeoMetaDescription))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayGross.GetHashCode();
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RegistrationActive.GetHashCode();
                if (this.RegistrationTitle != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationTitle.GetHashCode();
                }
                if (this.RegistrationIntroduction != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationIntroduction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RegistrationOnlyCompanyRegistration.GetHashCode();
                if (this.RegistrationSeoMetaDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationSeoMetaDescription.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}

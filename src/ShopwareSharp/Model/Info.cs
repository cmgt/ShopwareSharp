// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Info
    /// </summary>
    public partial class Info : IEquatable<Info>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Info" /> class.
        /// </summary>
        /// <param name="meta">Non-standard meta-information that can not be represented as an attribute or relationship. (required)</param>
        /// <param name="links">links</param>
        /// <param name="jsonapi">jsonapi</param>
        public Info(Dictionary<string, Object> meta, Dictionary<string, Link>? links = default, Jsonapi? jsonapi = default)
        {
            if (meta == null)
                throw new ArgumentNullException("meta is a required property for Info and cannot be null.");

            Meta = meta;
            Links = links;
            Jsonapi = jsonapi;
        }

        /// <summary>
        /// Non-standard meta-information that can not be represented as an attribute or relationship.
        /// </summary>
        /// <value>Non-standard meta-information that can not be represented as an attribute or relationship.</value>
        [JsonPropertyName("meta")]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("links")]
        public Dictionary<string, Link>? Links { get; set; }

        /// <summary>
        /// Gets or Sets Jsonapi
        /// </summary>
        [JsonPropertyName("jsonapi")]
        public Jsonapi? Jsonapi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Info {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Jsonapi: ").Append(Jsonapi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Info);
        }

        /// <summary>
        /// Returns true if Info instances are equal
        /// </summary>
        /// <param name="input">Instance of Info to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Info? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Jsonapi == input.Jsonapi ||
                    (this.Jsonapi != null &&
                    this.Jsonapi.Equals(input.Jsonapi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Jsonapi != null)
                {
                    hashCode = (hashCode * 59) + this.Jsonapi.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

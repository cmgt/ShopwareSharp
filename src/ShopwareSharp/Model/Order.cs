// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="billingAddressId">billingAddressId (required)</param>
        /// <param name="currencyId">currencyId (required)</param>
        /// <param name="languageId">languageId (required)</param>
        /// <param name="salesChannelId">salesChannelId (required)</param>
        /// <param name="orderDateTime">orderDateTime (required)</param>
        /// <param name="currencyFactor">currencyFactor (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="versionId">versionId</param>
        /// <param name="orderNumber">orderNumber</param>
        /// <param name="billingAddressVersionId">billingAddressVersionId</param>
        /// <param name="orderDate">orderDate</param>
        /// <param name="price">price</param>
        /// <param name="amountTotal">amountTotal</param>
        /// <param name="amountNet">amountNet</param>
        /// <param name="positionPrice">positionPrice</param>
        /// <param name="taxStatus">taxStatus</param>
        /// <param name="shippingCosts">shippingCosts</param>
        /// <param name="shippingTotal">shippingTotal</param>
        /// <param name="deepLinkCode">deepLinkCode</param>
        /// <param name="affiliateCode">affiliateCode</param>
        /// <param name="campaignCode">campaignCode</param>
        /// <param name="customerComment">customerComment</param>
        /// <param name="customFields">customFields</param>
        /// <param name="createdById">createdById</param>
        /// <param name="updatedById">updatedById</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="stateMachineState">stateMachineState</param>
        /// <param name="orderCustomer">orderCustomer</param>
        /// <param name="currency">currency</param>
        /// <param name="language">language</param>
        /// <param name="addresses">addresses</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="deliveries">deliveries</param>
        /// <param name="lineItems">lineItems</param>
        /// <param name="transactions">transactions</param>
        /// <param name="documents">documents</param>
        /// <param name="tags">tags</param>
        public Order(string billingAddressId, string currencyId, string languageId, string salesChannelId,
            DateTime orderDateTime, float currencyFactor, DateTime createdAt, string? id = default,
            string? versionId = default, string? orderNumber = default, string? billingAddressVersionId = default,
            string? orderDate = default, OrderPrice? price = default, float? amountTotal = default,
            float? amountNet = default, float? positionPrice = default, string? taxStatus = default,
            OrderShippingCosts? shippingCosts = default, float? shippingTotal = default, string? deepLinkCode = default,
            string? affiliateCode = default, string? campaignCode = default, string? customerComment = default,
            Object? customFields = default, string? createdById = default, string? updatedById = default,
            DateTime? updatedAt = default, StateMachineState? stateMachineState = default,
            OrderCustomer? orderCustomer = default, Currency? currency = default, Language? language = default,
            OrderAddress[]? addresses = default, OrderAddress? billingAddress = default,
            OrderDelivery[]? deliveries = default, OrderLineItem[]? lineItems = default,
            OrderTransaction[]? transactions = default, Document? documents = default, Tag? tags = default)
        {
            if (billingAddressId == null)
                throw new ArgumentNullException(
                    "billingAddressId is a required property for Order and cannot be null.");

            if (currencyId == null)
                throw new ArgumentNullException("currencyId is a required property for Order and cannot be null.");

            if (languageId == null)
                throw new ArgumentNullException("languageId is a required property for Order and cannot be null.");

            if (salesChannelId == null)
                throw new ArgumentNullException("salesChannelId is a required property for Order and cannot be null.");

            BillingAddressId = billingAddressId;
            CurrencyId = currencyId;
            LanguageId = languageId;
            SalesChannelId = salesChannelId;
            OrderDateTime = orderDateTime;
            CurrencyFactor = currencyFactor;
            CreatedAt = createdAt;
            Id = id;
            VersionId = versionId;
            OrderNumber = orderNumber;
            BillingAddressVersionId = billingAddressVersionId;
            OrderDate = orderDate;
            Price = price;
            AmountTotal = amountTotal;
            AmountNet = amountNet;
            PositionPrice = positionPrice;
            TaxStatus = taxStatus;
            ShippingCosts = shippingCosts;
            ShippingTotal = shippingTotal;
            DeepLinkCode = deepLinkCode;
            AffiliateCode = affiliateCode;
            CampaignCode = campaignCode;
            CustomerComment = customerComment;
            CustomFields = customFields;
            CreatedById = createdById;
            UpdatedById = updatedById;
            UpdatedAt = updatedAt;
            StateMachineState = stateMachineState;
            OrderCustomer = orderCustomer;
            Currency = currency;
            Language = language;
            Addresses = addresses;
            BillingAddress = billingAddress;
            Deliveries = deliveries;
            LineItems = lineItems;
            Transactions = transactions;
            Documents = documents;
            Tags = tags;
        }

        /// <summary>
        /// Gets or Sets BillingAddressId
        /// </summary>
        [JsonPropertyName("billingAddressId")]
        public string BillingAddressId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [JsonPropertyName("currencyId")]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [JsonPropertyName("languageId")]
        public string LanguageId { get; set; }

        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [JsonPropertyName("salesChannelId")]
        public string SalesChannelId { get; set; }

        /// <summary>
        /// Gets or Sets OrderDateTime
        /// </summary>
        [JsonPropertyName("orderDateTime")]
        public DateTime OrderDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyFactor
        /// </summary>
        [JsonPropertyName("currencyFactor")]
        public float CurrencyFactor { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [JsonPropertyName("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressVersionId
        /// </summary>
        [JsonPropertyName("billingAddressVersionId")]
        public string? BillingAddressVersionId { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [JsonPropertyName("orderDate")]
        public string? OrderDate { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public OrderPrice? Price { get; set; }

        /// <summary>
        /// Gets or Sets AmountTotal
        /// </summary>
        [JsonPropertyName("amountTotal")]
        public float? AmountTotal { get; private set; }

        /// <summary>
        /// Gets or Sets AmountNet
        /// </summary>
        [JsonPropertyName("amountNet")]
        public float? AmountNet { get; private set; }

        /// <summary>
        /// Gets or Sets PositionPrice
        /// </summary>
        [JsonPropertyName("positionPrice")]
        public float? PositionPrice { get; private set; }

        /// <summary>
        /// Gets or Sets TaxStatus
        /// </summary>
        [JsonPropertyName("taxStatus")]
        public string? TaxStatus { get; private set; }

        /// <summary>
        /// Gets or Sets ShippingCosts
        /// </summary>
        [JsonPropertyName("shippingCosts")]
        public OrderShippingCosts? ShippingCosts { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTotal
        /// </summary>
        [JsonPropertyName("shippingTotal")]
        public float? ShippingTotal { get; private set; }

        /// <summary>
        /// Gets or Sets DeepLinkCode
        /// </summary>
        [JsonPropertyName("deepLinkCode")]
        public string? DeepLinkCode { get; set; }

        /// <summary>
        /// Gets or Sets AffiliateCode
        /// </summary>
        [JsonPropertyName("affiliateCode")]
        public string? AffiliateCode { get; set; }

        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [JsonPropertyName("campaignCode")]
        public string? CampaignCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerComment
        /// </summary>
        [JsonPropertyName("customerComment")]
        public string? CustomerComment { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [JsonPropertyName("createdById")]
        public string? CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedById
        /// </summary>
        [JsonPropertyName("updatedById")]
        public string? UpdatedById { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets StateMachineState
        /// </summary>
        [JsonPropertyName("stateMachineState")]
        public StateMachineState? StateMachineState { get; set; }

        /// <summary>
        /// Gets or Sets OrderCustomer
        /// </summary>
        [JsonPropertyName("orderCustomer")]
        public OrderCustomer? OrderCustomer { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public Currency? Currency { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public Language? Language { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [JsonPropertyName("addresses")]
        public OrderAddress[]? Addresses { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public OrderAddress? BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Deliveries
        /// </summary>
        [JsonPropertyName("deliveries")]
        public OrderDelivery[]? Deliveries { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [JsonPropertyName("lineItems")]
        public OrderLineItem[]? LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public OrderTransaction[]? Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [JsonPropertyName("documents")]
        public Document? Documents { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public Tag? Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  BillingAddressId: ").Append(BillingAddressId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  OrderDateTime: ").Append(OrderDateTime).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  BillingAddressVersionId: ").Append(BillingAddressVersionId).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AmountTotal: ").Append(AmountTotal).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  PositionPrice: ").Append(PositionPrice).Append("\n");
            sb.Append("  TaxStatus: ").Append(TaxStatus).Append("\n");
            sb.Append("  ShippingCosts: ").Append(ShippingCosts).Append("\n");
            sb.Append("  ShippingTotal: ").Append(ShippingTotal).Append("\n");
            sb.Append("  DeepLinkCode: ").Append(DeepLinkCode).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  CustomerComment: ").Append(CustomerComment).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  StateMachineState: ").Append(StateMachineState).Append("\n");
            sb.Append("  OrderCustomer: ").Append(OrderCustomer).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Deliveries: ").Append(Deliveries).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BillingAddressId == input.BillingAddressId ||
                    (this.BillingAddressId != null &&
                    this.BillingAddressId.Equals(input.BillingAddressId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.OrderDateTime == input.OrderDateTime ||
                    (this.OrderDateTime != null &&
                    this.OrderDateTime.Equals(input.OrderDateTime))
                ) && 
                (
                    this.CurrencyFactor == input.CurrencyFactor ||
                    this.CurrencyFactor.Equals(input.CurrencyFactor)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt 
                    
                    
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.BillingAddressVersionId == input.BillingAddressVersionId ||
                    (this.BillingAddressVersionId != null &&
                    this.BillingAddressVersionId.Equals(input.BillingAddressVersionId))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.AmountTotal == input.AmountTotal ||
                    this.AmountTotal.Equals(input.AmountTotal)
                ) && 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.PositionPrice == input.PositionPrice ||
                    this.PositionPrice.Equals(input.PositionPrice)
                ) && 
                (
                    this.TaxStatus == input.TaxStatus ||
                    (this.TaxStatus != null &&
                    this.TaxStatus.Equals(input.TaxStatus))
                ) && 
                (
                    this.ShippingCosts == input.ShippingCosts ||
                    (this.ShippingCosts != null &&
                    this.ShippingCosts.Equals(input.ShippingCosts))
                ) && 
                (
                    this.ShippingTotal == input.ShippingTotal ||
                    this.ShippingTotal.Equals(input.ShippingTotal)
                ) && 
                (
                    this.DeepLinkCode == input.DeepLinkCode ||
                    (this.DeepLinkCode != null &&
                    this.DeepLinkCode.Equals(input.DeepLinkCode))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.CustomerComment == input.CustomerComment ||
                    (this.CustomerComment != null &&
                    this.CustomerComment.Equals(input.CustomerComment))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    (this.CreatedById != null &&
                    this.CreatedById.Equals(input.CreatedById))
                ) && 
                (
                    this.UpdatedById == input.UpdatedById ||
                    (this.UpdatedById != null &&
                    this.UpdatedById.Equals(input.UpdatedById))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.StateMachineState == input.StateMachineState ||
                    (this.StateMachineState != null &&
                    this.StateMachineState.Equals(input.StateMachineState))
                ) && 
                (
                    this.OrderCustomer == input.OrderCustomer ||
                    (this.OrderCustomer != null &&
                    this.OrderCustomer.Equals(input.OrderCustomer))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    (this.Addresses != null &&
                    this.Addresses.Equals(input.Addresses))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Deliveries == input.Deliveries ||
                    (this.Deliveries != null &&
                    this.Deliveries.Equals(input.Deliveries))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    (this.LineItems != null &&
                    this.LineItems.Equals(input.LineItems))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.Documents == input.Documents ||
                    (this.Documents != null &&
                    this.Documents.Equals(input.Documents))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddressId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.OrderDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyFactor.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                }
                if (this.BillingAddressVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddressVersionId.GetHashCode();
                }
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.PositionPrice.GetHashCode();
                if (this.TaxStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TaxStatus.GetHashCode();
                }
                if (this.ShippingCosts != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingCosts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShippingTotal.GetHashCode();
                if (this.DeepLinkCode != null)
                {
                    hashCode = (hashCode * 59) + this.DeepLinkCode.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                if (this.CustomerComment != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerComment.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedById != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                }
                if (this.UpdatedById != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedById.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.StateMachineState != null)
                {
                    hashCode = (hashCode * 59) + this.StateMachineState.GetHashCode();
                }
                if (this.OrderCustomer != null)
                {
                    hashCode = (hashCode * 59) + this.OrderCustomer.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.Deliveries != null)
                {
                    hashCode = (hashCode * 59) + this.Deliveries.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BillingAddressId (string) pattern
            Regex regexBillingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexBillingAddressId.Match(this.BillingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingAddressId, must match a pattern of " + regexBillingAddressId, new [] { "BillingAddressId" });
            }

            // CurrencyId (string) pattern
            Regex regexCurrencyId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCurrencyId.Match(this.CurrencyId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyId, must match a pattern of " + regexCurrencyId, new [] { "CurrencyId" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // SalesChannelId (string) pattern
            Regex regexSalesChannelId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalesChannelId.Match(this.SalesChannelId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesChannelId, must match a pattern of " + regexSalesChannelId, new [] { "SalesChannelId" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // BillingAddressVersionId (string) pattern
            Regex regexBillingAddressVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexBillingAddressVersionId.Match(this.BillingAddressVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingAddressVersionId, must match a pattern of " + regexBillingAddressVersionId, new [] { "BillingAddressVersionId" });
            }

            // CreatedById (string) pattern
            Regex regexCreatedById = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCreatedById.Match(this.CreatedById).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedById, must match a pattern of " + regexCreatedById, new [] { "CreatedById" });
            }

            // UpdatedById (string) pattern
            Regex regexUpdatedById = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexUpdatedById.Match(this.UpdatedById).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedById, must match a pattern of " + regexUpdatedById, new [] { "UpdatedById" });
            }

            yield break;
        }
    }

}

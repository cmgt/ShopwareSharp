/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="billingAddressId">billingAddressId (required).</param>
        /// <param name="billingAddressVersionId">billingAddressVersionId.</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="languageId">languageId (required).</param>
        /// <param name="salesChannelId">salesChannelId (required).</param>
        /// <param name="orderDateTime">orderDateTime (required).</param>
        /// <param name="price">price.</param>
        /// <param name="shippingCosts">shippingCosts.</param>
        /// <param name="currencyFactor">currencyFactor (required).</param>
        /// <param name="deepLinkCode">deepLinkCode.</param>
        /// <param name="affiliateCode">affiliateCode.</param>
        /// <param name="campaignCode">campaignCode.</param>
        /// <param name="customerComment">customerComment.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="createdById">createdById.</param>
        /// <param name="updatedById">updatedById.</param>
        /// <param name="stateMachineState">stateMachineState.</param>
        /// <param name="orderCustomer">orderCustomer.</param>
        /// <param name="currency">currency.</param>
        /// <param name="language">language.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="deliveries">deliveries.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="documents">documents.</param>
        /// <param name="tags">tags.</param>
        public Order(string id = default(string), string versionId = default(string), string orderNumber = default(string), string billingAddressId = default(string), string billingAddressVersionId = default(string), string currencyId = default(string), string languageId = default(string), string salesChannelId = default(string), DateTime orderDateTime = default(DateTime), OrderPrice price = default(OrderPrice), OrderShippingCosts shippingCosts = default(OrderShippingCosts), float currencyFactor = default(float), string deepLinkCode = default(string), string affiliateCode = default(string), string campaignCode = default(string), string customerComment = default(string), Object customFields = default(Object), string createdById = default(string), string updatedById = default(string), StateMachineState stateMachineState = default(StateMachineState), OrderCustomer orderCustomer = default(OrderCustomer), Currency currency = default(Currency), Language language = default(Language), OrderAddress addresses = default(OrderAddress), OrderAddress billingAddress = default(OrderAddress), OrderDelivery deliveries = default(OrderDelivery), OrderLineItem lineItems = default(OrderLineItem), OrderTransaction transactions = default(OrderTransaction), Document documents = default(Document), Tag tags = default(Tag))
        {
            // to ensure "billingAddressId" is required (not null)
            if (billingAddressId == null)
            {
                throw new ArgumentNullException("billingAddressId is a required property for Order and cannot be null");
            }
            this._BillingAddressId = billingAddressId;
            // to ensure "currencyId" is required (not null)
            if (currencyId == null)
            {
                throw new ArgumentNullException("currencyId is a required property for Order and cannot be null");
            }
            this._CurrencyId = currencyId;
            // to ensure "languageId" is required (not null)
            if (languageId == null)
            {
                throw new ArgumentNullException("languageId is a required property for Order and cannot be null");
            }
            this._LanguageId = languageId;
            // to ensure "salesChannelId" is required (not null)
            if (salesChannelId == null)
            {
                throw new ArgumentNullException("salesChannelId is a required property for Order and cannot be null");
            }
            this._SalesChannelId = salesChannelId;
            this._OrderDateTime = orderDateTime;
            this._CurrencyFactor = currencyFactor;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._OrderNumber = orderNumber;
            if (this.OrderNumber != null)
            {
                this._flagOrderNumber = true;
            }
            this._BillingAddressVersionId = billingAddressVersionId;
            if (this.BillingAddressVersionId != null)
            {
                this._flagBillingAddressVersionId = true;
            }
            this._Price = price;
            if (this.Price != null)
            {
                this._flagPrice = true;
            }
            this._ShippingCosts = shippingCosts;
            if (this.ShippingCosts != null)
            {
                this._flagShippingCosts = true;
            }
            this._DeepLinkCode = deepLinkCode;
            if (this.DeepLinkCode != null)
            {
                this._flagDeepLinkCode = true;
            }
            this._AffiliateCode = affiliateCode;
            if (this.AffiliateCode != null)
            {
                this._flagAffiliateCode = true;
            }
            this._CampaignCode = campaignCode;
            if (this.CampaignCode != null)
            {
                this._flagCampaignCode = true;
            }
            this._CustomerComment = customerComment;
            if (this.CustomerComment != null)
            {
                this._flagCustomerComment = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._CreatedById = createdById;
            if (this.CreatedById != null)
            {
                this._flagCreatedById = true;
            }
            this._UpdatedById = updatedById;
            if (this.UpdatedById != null)
            {
                this._flagUpdatedById = true;
            }
            this._StateMachineState = stateMachineState;
            if (this.StateMachineState != null)
            {
                this._flagStateMachineState = true;
            }
            this._OrderCustomer = orderCustomer;
            if (this.OrderCustomer != null)
            {
                this._flagOrderCustomer = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._Language = language;
            if (this.Language != null)
            {
                this._flagLanguage = true;
            }
            this._Addresses = addresses;
            if (this.Addresses != null)
            {
                this._flagAddresses = true;
            }
            this._BillingAddress = billingAddress;
            if (this.BillingAddress != null)
            {
                this._flagBillingAddress = true;
            }
            this._Deliveries = deliveries;
            if (this.Deliveries != null)
            {
                this._flagDeliveries = true;
            }
            this._LineItems = lineItems;
            if (this.LineItems != null)
            {
                this._flagLineItems = true;
            }
            this._Transactions = transactions;
            if (this.Transactions != null)
            {
                this._flagTransactions = true;
            }
            this._Documents = documents;
            if (this.Documents != null)
            {
                this._flagDocuments = true;
            }
            this._Tags = tags;
            if (this.Tags != null)
            {
                this._flagTags = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber
        {
            get{ return _OrderNumber;}
            set
            {
                _OrderNumber = value;
                _flagOrderNumber = true;
            }
        }
        private string _OrderNumber;
        private bool _flagOrderNumber;

        /// <summary>
        /// Returns false as OrderNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderNumber()
        {
            return _flagOrderNumber;
        }
        /// <summary>
        /// Gets or Sets BillingAddressId
        /// </summary>
        [DataMember(Name = "billingAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string BillingAddressId
        {
            get{ return _BillingAddressId;}
            set
            {
                _BillingAddressId = value;
                _flagBillingAddressId = true;
            }
        }
        private string _BillingAddressId;
        private bool _flagBillingAddressId;

        /// <summary>
        /// Returns false as BillingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBillingAddressId()
        {
            return _flagBillingAddressId;
        }
        /// <summary>
        /// Gets or Sets BillingAddressVersionId
        /// </summary>
        [DataMember(Name = "billingAddressVersionId", EmitDefaultValue = false)]
        public string BillingAddressVersionId
        {
            get{ return _BillingAddressVersionId;}
            set
            {
                _BillingAddressVersionId = value;
                _flagBillingAddressVersionId = true;
            }
        }
        private string _BillingAddressVersionId;
        private bool _flagBillingAddressVersionId;

        /// <summary>
        /// Returns false as BillingAddressVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBillingAddressVersionId()
        {
            return _flagBillingAddressVersionId;
        }
        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", IsRequired = true, EmitDefaultValue = false)]
        public string CurrencyId
        {
            get{ return _CurrencyId;}
            set
            {
                _CurrencyId = value;
                _flagCurrencyId = true;
            }
        }
        private string _CurrencyId;
        private bool _flagCurrencyId;

        /// <summary>
        /// Returns false as CurrencyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyId()
        {
            return _flagCurrencyId;
        }
        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [DataMember(Name = "salesChannelId", IsRequired = true, EmitDefaultValue = false)]
        public string SalesChannelId
        {
            get{ return _SalesChannelId;}
            set
            {
                _SalesChannelId = value;
                _flagSalesChannelId = true;
            }
        }
        private string _SalesChannelId;
        private bool _flagSalesChannelId;

        /// <summary>
        /// Returns false as SalesChannelId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannelId()
        {
            return _flagSalesChannelId;
        }
        /// <summary>
        /// Gets or Sets OrderDateTime
        /// </summary>
        [DataMember(Name = "orderDateTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime OrderDateTime
        {
            get{ return _OrderDateTime;}
            set
            {
                _OrderDateTime = value;
                _flagOrderDateTime = true;
            }
        }
        private DateTime _OrderDateTime;
        private bool _flagOrderDateTime;

        /// <summary>
        /// Returns false as OrderDateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderDateTime()
        {
            return _flagOrderDateTime;
        }
        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "orderDate", EmitDefaultValue = false)]
        public string OrderDate { get; private set; }

        /// <summary>
        /// Returns false as OrderDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public OrderPrice Price
        {
            get{ return _Price;}
            set
            {
                _Price = value;
                _flagPrice = true;
            }
        }
        private OrderPrice _Price;
        private bool _flagPrice;

        /// <summary>
        /// Returns false as Price should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrice()
        {
            return _flagPrice;
        }
        /// <summary>
        /// Gets or Sets AmountTotal
        /// </summary>
        [DataMember(Name = "amountTotal", EmitDefaultValue = false)]
        public float AmountTotal { get; private set; }

        /// <summary>
        /// Returns false as AmountTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountTotal()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AmountNet
        /// </summary>
        [DataMember(Name = "amountNet", EmitDefaultValue = false)]
        public float AmountNet { get; private set; }

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PositionPrice
        /// </summary>
        [DataMember(Name = "positionPrice", EmitDefaultValue = false)]
        public float PositionPrice { get; private set; }

        /// <summary>
        /// Returns false as PositionPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePositionPrice()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TaxStatus
        /// </summary>
        [DataMember(Name = "taxStatus", EmitDefaultValue = false)]
        public string TaxStatus { get; private set; }

        /// <summary>
        /// Returns false as TaxStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxStatus()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ShippingCosts
        /// </summary>
        [DataMember(Name = "shippingCosts", EmitDefaultValue = false)]
        public OrderShippingCosts ShippingCosts
        {
            get{ return _ShippingCosts;}
            set
            {
                _ShippingCosts = value;
                _flagShippingCosts = true;
            }
        }
        private OrderShippingCosts _ShippingCosts;
        private bool _flagShippingCosts;

        /// <summary>
        /// Returns false as ShippingCosts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingCosts()
        {
            return _flagShippingCosts;
        }
        /// <summary>
        /// Gets or Sets ShippingTotal
        /// </summary>
        [DataMember(Name = "shippingTotal", EmitDefaultValue = false)]
        public float ShippingTotal { get; private set; }

        /// <summary>
        /// Returns false as ShippingTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingTotal()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CurrencyFactor
        /// </summary>
        [DataMember(Name = "currencyFactor", IsRequired = true, EmitDefaultValue = false)]
        public float CurrencyFactor
        {
            get{ return _CurrencyFactor;}
            set
            {
                _CurrencyFactor = value;
                _flagCurrencyFactor = true;
            }
        }
        private float _CurrencyFactor;
        private bool _flagCurrencyFactor;

        /// <summary>
        /// Returns false as CurrencyFactor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyFactor()
        {
            return _flagCurrencyFactor;
        }
        /// <summary>
        /// Gets or Sets DeepLinkCode
        /// </summary>
        [DataMember(Name = "deepLinkCode", EmitDefaultValue = false)]
        public string DeepLinkCode
        {
            get{ return _DeepLinkCode;}
            set
            {
                _DeepLinkCode = value;
                _flagDeepLinkCode = true;
            }
        }
        private string _DeepLinkCode;
        private bool _flagDeepLinkCode;

        /// <summary>
        /// Returns false as DeepLinkCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeepLinkCode()
        {
            return _flagDeepLinkCode;
        }
        /// <summary>
        /// Gets or Sets AffiliateCode
        /// </summary>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode
        {
            get{ return _AffiliateCode;}
            set
            {
                _AffiliateCode = value;
                _flagAffiliateCode = true;
            }
        }
        private string _AffiliateCode;
        private bool _flagAffiliateCode;

        /// <summary>
        /// Returns false as AffiliateCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAffiliateCode()
        {
            return _flagAffiliateCode;
        }
        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode
        {
            get{ return _CampaignCode;}
            set
            {
                _CampaignCode = value;
                _flagCampaignCode = true;
            }
        }
        private string _CampaignCode;
        private bool _flagCampaignCode;

        /// <summary>
        /// Returns false as CampaignCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignCode()
        {
            return _flagCampaignCode;
        }
        /// <summary>
        /// Gets or Sets CustomerComment
        /// </summary>
        [DataMember(Name = "customerComment", EmitDefaultValue = false)]
        public string CustomerComment
        {
            get{ return _CustomerComment;}
            set
            {
                _CustomerComment = value;
                _flagCustomerComment = true;
            }
        }
        private string _CustomerComment;
        private bool _flagCustomerComment;

        /// <summary>
        /// Returns false as CustomerComment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerComment()
        {
            return _flagCustomerComment;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", EmitDefaultValue = false)]
        public string CreatedById
        {
            get{ return _CreatedById;}
            set
            {
                _CreatedById = value;
                _flagCreatedById = true;
            }
        }
        private string _CreatedById;
        private bool _flagCreatedById;

        /// <summary>
        /// Returns false as CreatedById should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedById()
        {
            return _flagCreatedById;
        }
        /// <summary>
        /// Gets or Sets UpdatedById
        /// </summary>
        [DataMember(Name = "updatedById", EmitDefaultValue = false)]
        public string UpdatedById
        {
            get{ return _UpdatedById;}
            set
            {
                _UpdatedById = value;
                _flagUpdatedById = true;
            }
        }
        private string _UpdatedById;
        private bool _flagUpdatedById;

        /// <summary>
        /// Returns false as UpdatedById should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedById()
        {
            return _flagUpdatedById;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StateMachineState
        /// </summary>
        [DataMember(Name = "stateMachineState", EmitDefaultValue = false)]
        public StateMachineState StateMachineState
        {
            get{ return _StateMachineState;}
            set
            {
                _StateMachineState = value;
                _flagStateMachineState = true;
            }
        }
        private StateMachineState _StateMachineState;
        private bool _flagStateMachineState;

        /// <summary>
        /// Returns false as StateMachineState should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStateMachineState()
        {
            return _flagStateMachineState;
        }
        /// <summary>
        /// Gets or Sets OrderCustomer
        /// </summary>
        [DataMember(Name = "orderCustomer", EmitDefaultValue = false)]
        public OrderCustomer OrderCustomer
        {
            get{ return _OrderCustomer;}
            set
            {
                _OrderCustomer = value;
                _flagOrderCustomer = true;
            }
        }
        private OrderCustomer _OrderCustomer;
        private bool _flagOrderCustomer;

        /// <summary>
        /// Returns false as OrderCustomer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderCustomer()
        {
            return _flagOrderCustomer;
        }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency
        {
            get{ return _Currency;}
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private Currency _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language
        {
            get{ return _Language;}
            set
            {
                _Language = value;
                _flagLanguage = true;
            }
        }
        private Language _Language;
        private bool _flagLanguage;

        /// <summary>
        /// Returns false as Language should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguage()
        {
            return _flagLanguage;
        }
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public OrderAddress Addresses
        {
            get{ return _Addresses;}
            set
            {
                _Addresses = value;
                _flagAddresses = true;
            }
        }
        private OrderAddress _Addresses;
        private bool _flagAddresses;

        /// <summary>
        /// Returns false as Addresses should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddresses()
        {
            return _flagAddresses;
        }
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", EmitDefaultValue = false)]
        public OrderAddress BillingAddress
        {
            get{ return _BillingAddress;}
            set
            {
                _BillingAddress = value;
                _flagBillingAddress = true;
            }
        }
        private OrderAddress _BillingAddress;
        private bool _flagBillingAddress;

        /// <summary>
        /// Returns false as BillingAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBillingAddress()
        {
            return _flagBillingAddress;
        }
        /// <summary>
        /// Gets or Sets Deliveries
        /// </summary>
        [DataMember(Name = "deliveries", EmitDefaultValue = false)]
        public OrderDelivery Deliveries
        {
            get{ return _Deliveries;}
            set
            {
                _Deliveries = value;
                _flagDeliveries = true;
            }
        }
        private OrderDelivery _Deliveries;
        private bool _flagDeliveries;

        /// <summary>
        /// Returns false as Deliveries should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveries()
        {
            return _flagDeliveries;
        }
        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        public OrderLineItem LineItems
        {
            get{ return _LineItems;}
            set
            {
                _LineItems = value;
                _flagLineItems = true;
            }
        }
        private OrderLineItem _LineItems;
        private bool _flagLineItems;

        /// <summary>
        /// Returns false as LineItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLineItems()
        {
            return _flagLineItems;
        }
        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public OrderTransaction Transactions
        {
            get{ return _Transactions;}
            set
            {
                _Transactions = value;
                _flagTransactions = true;
            }
        }
        private OrderTransaction _Transactions;
        private bool _flagTransactions;

        /// <summary>
        /// Returns false as Transactions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransactions()
        {
            return _flagTransactions;
        }
        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public Document Documents
        {
            get{ return _Documents;}
            set
            {
                _Documents = value;
                _flagDocuments = true;
            }
        }
        private Document _Documents;
        private bool _flagDocuments;

        /// <summary>
        /// Returns false as Documents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocuments()
        {
            return _flagDocuments;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public Tag Tags
        {
            get{ return _Tags;}
            set
            {
                _Tags = value;
                _flagTags = true;
            }
        }
        private Tag _Tags;
        private bool _flagTags;

        /// <summary>
        /// Returns false as Tags should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTags()
        {
            return _flagTags;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  BillingAddressId: ").Append(BillingAddressId).Append("\n");
            sb.Append("  BillingAddressVersionId: ").Append(BillingAddressVersionId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  OrderDateTime: ").Append(OrderDateTime).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AmountTotal: ").Append(AmountTotal).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  PositionPrice: ").Append(PositionPrice).Append("\n");
            sb.Append("  TaxStatus: ").Append(TaxStatus).Append("\n");
            sb.Append("  ShippingCosts: ").Append(ShippingCosts).Append("\n");
            sb.Append("  ShippingTotal: ").Append(ShippingTotal).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  DeepLinkCode: ").Append(DeepLinkCode).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  CustomerComment: ").Append(CustomerComment).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  StateMachineState: ").Append(StateMachineState).Append("\n");
            sb.Append("  OrderCustomer: ").Append(OrderCustomer).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Deliveries: ").Append(Deliveries).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.BillingAddressId == input.BillingAddressId ||
                    (this.BillingAddressId != null &&
                    this.BillingAddressId.Equals(input.BillingAddressId))
                ) && 
                (
                    this.BillingAddressVersionId == input.BillingAddressVersionId ||
                    (this.BillingAddressVersionId != null &&
                    this.BillingAddressVersionId.Equals(input.BillingAddressVersionId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.OrderDateTime == input.OrderDateTime ||
                    (this.OrderDateTime != null &&
                    this.OrderDateTime.Equals(input.OrderDateTime))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.AmountTotal == input.AmountTotal ||
                    this.AmountTotal.Equals(input.AmountTotal)
                ) && 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.PositionPrice == input.PositionPrice ||
                    this.PositionPrice.Equals(input.PositionPrice)
                ) && 
                (
                    this.TaxStatus == input.TaxStatus ||
                    (this.TaxStatus != null &&
                    this.TaxStatus.Equals(input.TaxStatus))
                ) && 
                (
                    this.ShippingCosts == input.ShippingCosts ||
                    (this.ShippingCosts != null &&
                    this.ShippingCosts.Equals(input.ShippingCosts))
                ) && 
                (
                    this.ShippingTotal == input.ShippingTotal ||
                    this.ShippingTotal.Equals(input.ShippingTotal)
                ) && 
                (
                    this.CurrencyFactor == input.CurrencyFactor ||
                    this.CurrencyFactor.Equals(input.CurrencyFactor)
                ) && 
                (
                    this.DeepLinkCode == input.DeepLinkCode ||
                    (this.DeepLinkCode != null &&
                    this.DeepLinkCode.Equals(input.DeepLinkCode))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.CustomerComment == input.CustomerComment ||
                    (this.CustomerComment != null &&
                    this.CustomerComment.Equals(input.CustomerComment))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    (this.CreatedById != null &&
                    this.CreatedById.Equals(input.CreatedById))
                ) && 
                (
                    this.UpdatedById == input.UpdatedById ||
                    (this.UpdatedById != null &&
                    this.UpdatedById.Equals(input.UpdatedById))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.StateMachineState == input.StateMachineState ||
                    (this.StateMachineState != null &&
                    this.StateMachineState.Equals(input.StateMachineState))
                ) && 
                (
                    this.OrderCustomer == input.OrderCustomer ||
                    (this.OrderCustomer != null &&
                    this.OrderCustomer.Equals(input.OrderCustomer))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    (this.Addresses != null &&
                    this.Addresses.Equals(input.Addresses))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Deliveries == input.Deliveries ||
                    (this.Deliveries != null &&
                    this.Deliveries.Equals(input.Deliveries))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    (this.LineItems != null &&
                    this.LineItems.Equals(input.LineItems))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.Documents == input.Documents ||
                    (this.Documents != null &&
                    this.Documents.Equals(input.Documents))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                }
                if (this.BillingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddressId.GetHashCode();
                }
                if (this.BillingAddressVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddressVersionId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.OrderDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDateTime.GetHashCode();
                }
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.PositionPrice.GetHashCode();
                if (this.TaxStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TaxStatus.GetHashCode();
                }
                if (this.ShippingCosts != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingCosts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShippingTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrencyFactor.GetHashCode();
                if (this.DeepLinkCode != null)
                {
                    hashCode = (hashCode * 59) + this.DeepLinkCode.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                if (this.CustomerComment != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerComment.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedById != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                }
                if (this.UpdatedById != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedById.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.StateMachineState != null)
                {
                    hashCode = (hashCode * 59) + this.StateMachineState.GetHashCode();
                }
                if (this.OrderCustomer != null)
                {
                    hashCode = (hashCode * 59) + this.OrderCustomer.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.Deliveries != null)
                {
                    hashCode = (hashCode * 59) + this.Deliveries.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // BillingAddressId (string) pattern
            Regex regexBillingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexBillingAddressId.Match(this.BillingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingAddressId, must match a pattern of " + regexBillingAddressId, new [] { "BillingAddressId" });
            }

            // BillingAddressVersionId (string) pattern
            Regex regexBillingAddressVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexBillingAddressVersionId.Match(this.BillingAddressVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingAddressVersionId, must match a pattern of " + regexBillingAddressVersionId, new [] { "BillingAddressVersionId" });
            }

            // CurrencyId (string) pattern
            Regex regexCurrencyId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCurrencyId.Match(this.CurrencyId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyId, must match a pattern of " + regexCurrencyId, new [] { "CurrencyId" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // SalesChannelId (string) pattern
            Regex regexSalesChannelId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalesChannelId.Match(this.SalesChannelId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesChannelId, must match a pattern of " + regexSalesChannelId, new [] { "SalesChannelId" });
            }

            // CreatedById (string) pattern
            Regex regexCreatedById = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCreatedById.Match(this.CreatedById).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedById, must match a pattern of " + regexCreatedById, new [] { "CreatedById" });
            }

            // UpdatedById (string) pattern
            Regex regexUpdatedById = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexUpdatedById.Match(this.UpdatedById).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedById, must match a pattern of " + regexUpdatedById, new [] { "UpdatedById" });
            }

            yield break;
        }
    }

}

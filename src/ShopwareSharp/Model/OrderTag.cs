/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "OrderTag")]
    public partial class OrderTag : IEquatable<OrderTag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderTag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTag" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="orderVersionId">orderVersionId.</param>
        /// <param name="tagId">tagId (required).</param>
        /// <param name="order">order.</param>
        /// <param name="tag">tag.</param>
        public OrderTag(string id = default(string), string orderId = default(string), string orderVersionId = default(string), string tagId = default(string), Order order = default(Order), Tag tag = default(Tag))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderTag and cannot be null");
            }
            this._OrderId = orderId;
            // to ensure "tagId" is required (not null)
            if (tagId == null)
            {
                throw new ArgumentNullException("tagId is a required property for OrderTag and cannot be null");
            }
            this._TagId = tagId;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._OrderVersionId = orderVersionId;
            if (this.OrderVersionId != null)
            {
                this._flagOrderVersionId = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Tag = tag;
            if (this.Tag != null)
            {
                this._flagTag = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [DataMember(Name = "orderVersionId", EmitDefaultValue = false)]
        public string OrderVersionId
        {
            get{ return _OrderVersionId;}
            set
            {
                _OrderVersionId = value;
                _flagOrderVersionId = true;
            }
        }
        private string _OrderVersionId;
        private bool _flagOrderVersionId;

        /// <summary>
        /// Returns false as OrderVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderVersionId()
        {
            return _flagOrderVersionId;
        }
        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name = "tagId", IsRequired = true, EmitDefaultValue = false)]
        public string TagId
        {
            get{ return _TagId;}
            set
            {
                _TagId = value;
                _flagTagId = true;
            }
        }
        private string _TagId;
        private bool _flagTagId;

        /// <summary>
        /// Returns false as TagId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTagId()
        {
            return _flagTagId;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private Order _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public Tag Tag
        {
            get{ return _Tag;}
            set
            {
                _Tag = value;
                _flagTag = true;
            }
        }
        private Tag _Tag;
        private bool _flagTag;

        /// <summary>
        /// Returns false as Tag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTag()
        {
            return _flagTag;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderTag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderTag);
        }

        /// <summary>
        /// Returns true if OrderTag instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderTag input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.TagId == input.TagId ||
                    (this.TagId != null &&
                    this.TagId.Equals(input.TagId))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.TagId != null)
                {
                    hashCode = (hashCode * 59) + this.TagId.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            // TagId (string) pattern
            Regex regexTagId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexTagId.Match(this.TagId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TagId, must match a pattern of " + regexTagId, new [] { "TagId" });
            }

            yield break;
        }
    }

}

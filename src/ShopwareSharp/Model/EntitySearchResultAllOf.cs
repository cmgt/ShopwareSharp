/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// EntitySearchResultAllOf
    /// </summary>
    [DataContract(Name = "EntitySearchResult_allOf")]
    public partial class EntitySearchResultAllOf : IEquatable<EntitySearchResultAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySearchResultAllOf" /> class.
        /// </summary>
        /// <param name="entity">entity.</param>
        /// <param name="total">The total number of found entities.</param>
        /// <param name="aggregations">Contains aggregated data. A simple example is the determination of the average price from a product search query..</param>
        /// <param name="page">The actual page. This can be used for pagination..</param>
        /// <param name="limit">The actual limit. This is used for pagination and goes together with the page..</param>
        public EntitySearchResultAllOf(string entity = default(string), int total = default(int), List<Object> aggregations = default(List<Object>), int page = default(int), int limit = default(int))
        {
            this._Entity = entity;
            if (this.Entity != null)
            {
                this._flagEntity = true;
            }
            this._Total = total;
            if (this.Total != null)
            {
                this._flagTotal = true;
            }
            this._Aggregations = aggregations;
            if (this.Aggregations != null)
            {
                this._flagAggregations = true;
            }
            this._Page = page;
            if (this.Page != null)
            {
                this._flagPage = true;
            }
            this._Limit = limit;
            if (this.Limit != null)
            {
                this._flagLimit = true;
            }
        }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity
        {
            get{ return _Entity;}
            set
            {
                _Entity = value;
                _flagEntity = true;
            }
        }
        private string _Entity;
        private bool _flagEntity;

        /// <summary>
        /// Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return _flagEntity;
        }
        /// <summary>
        /// The total number of found entities
        /// </summary>
        /// <value>The total number of found entities</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total
        {
            get{ return _Total;}
            set
            {
                _Total = value;
                _flagTotal = true;
            }
        }
        private int _Total;
        private bool _flagTotal;

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return _flagTotal;
        }
        /// <summary>
        /// Contains aggregated data. A simple example is the determination of the average price from a product search query.
        /// </summary>
        /// <value>Contains aggregated data. A simple example is the determination of the average price from a product search query.</value>
        [DataMember(Name = "aggregations", EmitDefaultValue = false)]
        public List<Object> Aggregations
        {
            get{ return _Aggregations;}
            set
            {
                _Aggregations = value;
                _flagAggregations = true;
            }
        }
        private List<Object> _Aggregations;
        private bool _flagAggregations;

        /// <summary>
        /// Returns false as Aggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregations()
        {
            return _flagAggregations;
        }
        /// <summary>
        /// The actual page. This can be used for pagination.
        /// </summary>
        /// <value>The actual page. This can be used for pagination.</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page
        {
            get{ return _Page;}
            set
            {
                _Page = value;
                _flagPage = true;
            }
        }
        private int _Page;
        private bool _flagPage;

        /// <summary>
        /// Returns false as Page should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePage()
        {
            return _flagPage;
        }
        /// <summary>
        /// The actual limit. This is used for pagination and goes together with the page.
        /// </summary>
        /// <value>The actual limit. This is used for pagination and goes together with the page.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit
        {
            get{ return _Limit;}
            set
            {
                _Limit = value;
                _flagLimit = true;
            }
        }
        private int _Limit;
        private bool _flagLimit;

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return _flagLimit;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntitySearchResultAllOf {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntitySearchResultAllOf);
        }

        /// <summary>
        /// Returns true if EntitySearchResultAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EntitySearchResultAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntitySearchResultAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    input.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                if (this.Aggregations != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

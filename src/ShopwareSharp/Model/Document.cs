/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Document")]
    public partial class Document : IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Document() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="documentTypeId">documentTypeId (required).</param>
        /// <param name="fileType">fileType (required).</param>
        /// <param name="referencedDocumentId">referencedDocumentId.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="documentMediaFileId">documentMediaFileId.</param>
        /// <param name="orderVersionId">orderVersionId.</param>
        /// <param name="config">config (required).</param>
        /// <param name="sent">sent.</param>
        /// <param name="_static">_static.</param>
        /// <param name="deepLinkCode">deepLinkCode (required).</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="order">order.</param>
        /// <param name="referencedDocument">referencedDocument.</param>
        /// <param name="dependentDocuments">dependentDocuments.</param>
        /// <param name="documentMediaFile">documentMediaFile.</param>
        public Document(string id = default(string), string documentTypeId = default(string), string fileType = default(string), string referencedDocumentId = default(string), string orderId = default(string), string documentMediaFileId = default(string), string orderVersionId = default(string), Object config = default(Object), bool sent = default(bool), bool _static = default(bool), string deepLinkCode = default(string), Object customFields = default(Object), DocumentType documentType = default(DocumentType), Order order = default(Order), Document referencedDocument = default(Document), Document dependentDocuments = default(Document), Media documentMediaFile = default(Media))
        {
            // to ensure "documentTypeId" is required (not null)
            if (documentTypeId == null)
            {
                throw new ArgumentNullException("documentTypeId is a required property for Document and cannot be null");
            }
            this._DocumentTypeId = documentTypeId;
            // to ensure "fileType" is required (not null)
            if (fileType == null)
            {
                throw new ArgumentNullException("fileType is a required property for Document and cannot be null");
            }
            this._FileType = fileType;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for Document and cannot be null");
            }
            this._OrderId = orderId;
            // to ensure "config" is required (not null)
            if (config == null)
            {
                throw new ArgumentNullException("config is a required property for Document and cannot be null");
            }
            this._Config = config;
            // to ensure "deepLinkCode" is required (not null)
            if (deepLinkCode == null)
            {
                throw new ArgumentNullException("deepLinkCode is a required property for Document and cannot be null");
            }
            this._DeepLinkCode = deepLinkCode;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._ReferencedDocumentId = referencedDocumentId;
            if (this.ReferencedDocumentId != null)
            {
                this._flagReferencedDocumentId = true;
            }
            this._DocumentMediaFileId = documentMediaFileId;
            if (this.DocumentMediaFileId != null)
            {
                this._flagDocumentMediaFileId = true;
            }
            this._OrderVersionId = orderVersionId;
            if (this.OrderVersionId != null)
            {
                this._flagOrderVersionId = true;
            }
            this._Sent = sent;
            if (this.Sent != null)
            {
                this._flagSent = true;
            }
            this._Static = _static;
            if (this.Static != null)
            {
                this._flagStatic = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._DocumentType = documentType;
            if (this.DocumentType != null)
            {
                this._flagDocumentType = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._ReferencedDocument = referencedDocument;
            if (this.ReferencedDocument != null)
            {
                this._flagReferencedDocument = true;
            }
            this._DependentDocuments = dependentDocuments;
            if (this.DependentDocuments != null)
            {
                this._flagDependentDocuments = true;
            }
            this._DocumentMediaFile = documentMediaFile;
            if (this.DocumentMediaFile != null)
            {
                this._flagDocumentMediaFile = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets DocumentTypeId
        /// </summary>
        [DataMember(Name = "documentTypeId", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentTypeId
        {
            get{ return _DocumentTypeId;}
            set
            {
                _DocumentTypeId = value;
                _flagDocumentTypeId = true;
            }
        }
        private string _DocumentTypeId;
        private bool _flagDocumentTypeId;

        /// <summary>
        /// Returns false as DocumentTypeId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentTypeId()
        {
            return _flagDocumentTypeId;
        }
        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "fileType", IsRequired = true, EmitDefaultValue = false)]
        public string FileType
        {
            get{ return _FileType;}
            set
            {
                _FileType = value;
                _flagFileType = true;
            }
        }
        private string _FileType;
        private bool _flagFileType;

        /// <summary>
        /// Returns false as FileType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileType()
        {
            return _flagFileType;
        }
        /// <summary>
        /// Gets or Sets ReferencedDocumentId
        /// </summary>
        [DataMember(Name = "referencedDocumentId", EmitDefaultValue = false)]
        public string ReferencedDocumentId
        {
            get{ return _ReferencedDocumentId;}
            set
            {
                _ReferencedDocumentId = value;
                _flagReferencedDocumentId = true;
            }
        }
        private string _ReferencedDocumentId;
        private bool _flagReferencedDocumentId;

        /// <summary>
        /// Returns false as ReferencedDocumentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferencedDocumentId()
        {
            return _flagReferencedDocumentId;
        }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Gets or Sets DocumentMediaFileId
        /// </summary>
        [DataMember(Name = "documentMediaFileId", EmitDefaultValue = false)]
        public string DocumentMediaFileId
        {
            get{ return _DocumentMediaFileId;}
            set
            {
                _DocumentMediaFileId = value;
                _flagDocumentMediaFileId = true;
            }
        }
        private string _DocumentMediaFileId;
        private bool _flagDocumentMediaFileId;

        /// <summary>
        /// Returns false as DocumentMediaFileId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentMediaFileId()
        {
            return _flagDocumentMediaFileId;
        }
        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [DataMember(Name = "orderVersionId", EmitDefaultValue = false)]
        public string OrderVersionId
        {
            get{ return _OrderVersionId;}
            set
            {
                _OrderVersionId = value;
                _flagOrderVersionId = true;
            }
        }
        private string _OrderVersionId;
        private bool _flagOrderVersionId;

        /// <summary>
        /// Returns false as OrderVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderVersionId()
        {
            return _flagOrderVersionId;
        }
        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", IsRequired = true, EmitDefaultValue = false)]
        public Object Config
        {
            get{ return _Config;}
            set
            {
                _Config = value;
                _flagConfig = true;
            }
        }
        private Object _Config;
        private bool _flagConfig;

        /// <summary>
        /// Returns false as Config should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfig()
        {
            return _flagConfig;
        }
        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        [DataMember(Name = "sent", EmitDefaultValue = true)]
        public bool Sent
        {
            get{ return _Sent;}
            set
            {
                _Sent = value;
                _flagSent = true;
            }
        }
        private bool _Sent;
        private bool _flagSent;

        /// <summary>
        /// Returns false as Sent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSent()
        {
            return _flagSent;
        }
        /// <summary>
        /// Gets or Sets Static
        /// </summary>
        [DataMember(Name = "static", EmitDefaultValue = true)]
        public bool Static
        {
            get{ return _Static;}
            set
            {
                _Static = value;
                _flagStatic = true;
            }
        }
        private bool _Static;
        private bool _flagStatic;

        /// <summary>
        /// Returns false as Static should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatic()
        {
            return _flagStatic;
        }
        /// <summary>
        /// Gets or Sets DeepLinkCode
        /// </summary>
        [DataMember(Name = "deepLinkCode", IsRequired = true, EmitDefaultValue = false)]
        public string DeepLinkCode
        {
            get{ return _DeepLinkCode;}
            set
            {
                _DeepLinkCode = value;
                _flagDeepLinkCode = true;
            }
        }
        private string _DeepLinkCode;
        private bool _flagDeepLinkCode;

        /// <summary>
        /// Returns false as DeepLinkCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeepLinkCode()
        {
            return _flagDeepLinkCode;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public DocumentType DocumentType
        {
            get{ return _DocumentType;}
            set
            {
                _DocumentType = value;
                _flagDocumentType = true;
            }
        }
        private DocumentType _DocumentType;
        private bool _flagDocumentType;

        /// <summary>
        /// Returns false as DocumentType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentType()
        {
            return _flagDocumentType;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private Order _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets ReferencedDocument
        /// </summary>
        [DataMember(Name = "referencedDocument", EmitDefaultValue = false)]
        public Document ReferencedDocument
        {
            get{ return _ReferencedDocument;}
            set
            {
                _ReferencedDocument = value;
                _flagReferencedDocument = true;
            }
        }
        private Document _ReferencedDocument;
        private bool _flagReferencedDocument;

        /// <summary>
        /// Returns false as ReferencedDocument should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferencedDocument()
        {
            return _flagReferencedDocument;
        }
        /// <summary>
        /// Gets or Sets DependentDocuments
        /// </summary>
        [DataMember(Name = "dependentDocuments", EmitDefaultValue = false)]
        public Document DependentDocuments
        {
            get{ return _DependentDocuments;}
            set
            {
                _DependentDocuments = value;
                _flagDependentDocuments = true;
            }
        }
        private Document _DependentDocuments;
        private bool _flagDependentDocuments;

        /// <summary>
        /// Returns false as DependentDocuments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependentDocuments()
        {
            return _flagDependentDocuments;
        }
        /// <summary>
        /// Gets or Sets DocumentMediaFile
        /// </summary>
        [DataMember(Name = "documentMediaFile", EmitDefaultValue = false)]
        public Media DocumentMediaFile
        {
            get{ return _DocumentMediaFile;}
            set
            {
                _DocumentMediaFile = value;
                _flagDocumentMediaFile = true;
            }
        }
        private Media _DocumentMediaFile;
        private bool _flagDocumentMediaFile;

        /// <summary>
        /// Returns false as DocumentMediaFile should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentMediaFile()
        {
            return _flagDocumentMediaFile;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  ReferencedDocumentId: ").Append(ReferencedDocumentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  DocumentMediaFileId: ").Append(DocumentMediaFileId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Static: ").Append(Static).Append("\n");
            sb.Append("  DeepLinkCode: ").Append(DeepLinkCode).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ReferencedDocument: ").Append(ReferencedDocument).Append("\n");
            sb.Append("  DependentDocuments: ").Append(DependentDocuments).Append("\n");
            sb.Append("  DocumentMediaFile: ").Append(DocumentMediaFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.ReferencedDocumentId == input.ReferencedDocumentId ||
                    (this.ReferencedDocumentId != null &&
                    this.ReferencedDocumentId.Equals(input.ReferencedDocumentId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.DocumentMediaFileId == input.DocumentMediaFileId ||
                    (this.DocumentMediaFileId != null &&
                    this.DocumentMediaFileId.Equals(input.DocumentMediaFileId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.Sent == input.Sent ||
                    this.Sent.Equals(input.Sent)
                ) && 
                (
                    this.Static == input.Static ||
                    this.Static.Equals(input.Static)
                ) && 
                (
                    this.DeepLinkCode == input.DeepLinkCode ||
                    (this.DeepLinkCode != null &&
                    this.DeepLinkCode.Equals(input.DeepLinkCode))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.ReferencedDocument == input.ReferencedDocument ||
                    (this.ReferencedDocument != null &&
                    this.ReferencedDocument.Equals(input.ReferencedDocument))
                ) && 
                (
                    this.DependentDocuments == input.DependentDocuments ||
                    (this.DependentDocuments != null &&
                    this.DependentDocuments.Equals(input.DependentDocuments))
                ) && 
                (
                    this.DocumentMediaFile == input.DocumentMediaFile ||
                    (this.DocumentMediaFile != null &&
                    this.DocumentMediaFile.Equals(input.DocumentMediaFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DocumentTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeId.GetHashCode();
                }
                if (this.FileType != null)
                {
                    hashCode = (hashCode * 59) + this.FileType.GetHashCode();
                }
                if (this.ReferencedDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedDocumentId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.DocumentMediaFileId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentMediaFileId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sent.GetHashCode();
                hashCode = (hashCode * 59) + this.Static.GetHashCode();
                if (this.DeepLinkCode != null)
                {
                    hashCode = (hashCode * 59) + this.DeepLinkCode.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.ReferencedDocument != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedDocument.GetHashCode();
                }
                if (this.DependentDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.DependentDocuments.GetHashCode();
                }
                if (this.DocumentMediaFile != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentMediaFile.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // DocumentTypeId (string) pattern
            Regex regexDocumentTypeId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDocumentTypeId.Match(this.DocumentTypeId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentTypeId, must match a pattern of " + regexDocumentTypeId, new [] { "DocumentTypeId" });
            }

            // ReferencedDocumentId (string) pattern
            Regex regexReferencedDocumentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexReferencedDocumentId.Match(this.ReferencedDocumentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencedDocumentId, must match a pattern of " + regexReferencedDocumentId, new [] { "ReferencedDocumentId" });
            }

            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // DocumentMediaFileId (string) pattern
            Regex regexDocumentMediaFileId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDocumentMediaFileId.Match(this.DocumentMediaFileId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentMediaFileId, must match a pattern of " + regexDocumentMediaFileId, new [] { "DocumentMediaFileId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            yield break;
        }
    }

}

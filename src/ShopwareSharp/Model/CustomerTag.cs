/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "CustomerTag")]
    public partial class CustomerTag : IEquatable<CustomerTag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerTag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTag" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="customerId">customerId (required).</param>
        /// <param name="tagId">tagId (required).</param>
        /// <param name="tag">tag.</param>
        public CustomerTag(string id = default(string), string customerId = default(string), string tagId = default(string), Tag tag = default(Tag))
        {
            // to ensure "customerId" is required (not null)
            if (customerId == null)
            {
                throw new ArgumentNullException("customerId is a required property for CustomerTag and cannot be null");
            }
            this._CustomerId = customerId;
            // to ensure "tagId" is required (not null)
            if (tagId == null)
            {
                throw new ArgumentNullException("tagId is a required property for CustomerTag and cannot be null");
            }
            this._TagId = tagId;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Tag = tag;
            if (this.Tag != null)
            {
                this._flagTag = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customerId", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name = "tagId", IsRequired = true, EmitDefaultValue = false)]
        public string TagId
        {
            get{ return _TagId;}
            set
            {
                _TagId = value;
                _flagTagId = true;
            }
        }
        private string _TagId;
        private bool _flagTagId;

        /// <summary>
        /// Returns false as TagId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTagId()
        {
            return _flagTagId;
        }
        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public Tag Tag
        {
            get{ return _Tag;}
            set
            {
                _Tag = value;
                _flagTag = true;
            }
        }
        private Tag _Tag;
        private bool _flagTag;

        /// <summary>
        /// Returns false as Tag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTag()
        {
            return _flagTag;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerTag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerTag);
        }

        /// <summary>
        /// Returns true if CustomerTag instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerTag input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.TagId == input.TagId ||
                    (this.TagId != null &&
                    this.TagId.Equals(input.TagId))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.TagId != null)
                {
                    hashCode = (hashCode * 59) + this.TagId.GetHashCode();
                }
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // CustomerId (string) pattern
            Regex regexCustomerId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerId.Match(this.CustomerId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, must match a pattern of " + regexCustomerId, new [] { "CustomerId" });
            }

            // TagId (string) pattern
            Regex regexTagId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexTagId.Match(this.TagId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TagId, must match a pattern of " + regexTagId, new [] { "TagId" });
            }

            yield break;
        }
    }

}

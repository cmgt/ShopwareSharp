/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "OrderDelivery")]
    public partial class OrderDelivery : IEquatable<OrderDelivery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDelivery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDelivery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDelivery" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="orderVersionId">orderVersionId.</param>
        /// <param name="shippingOrderAddressId">shippingOrderAddressId (required).</param>
        /// <param name="shippingOrderAddressVersionId">shippingOrderAddressVersionId.</param>
        /// <param name="shippingMethodId">shippingMethodId (required).</param>
        /// <param name="stateId">stateId (required).</param>
        /// <param name="trackingCodes">trackingCodes (required).</param>
        /// <param name="shippingDateEarliest">shippingDateEarliest (required).</param>
        /// <param name="shippingDateLatest">shippingDateLatest (required).</param>
        /// <param name="shippingCosts">shippingCosts.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="stateMachineState">stateMachineState.</param>
        /// <param name="shippingOrderAddress">shippingOrderAddress.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="positions">positions.</param>
        public OrderDelivery(string id = default(string), string versionId = default(string), string orderId = default(string), string orderVersionId = default(string), string shippingOrderAddressId = default(string), string shippingOrderAddressVersionId = default(string), string shippingMethodId = default(string), string stateId = default(string), List<string> trackingCodes = default(List<string>), DateTime shippingDateEarliest = default(DateTime), DateTime shippingDateLatest = default(DateTime), OrderShippingCosts shippingCosts = default(OrderShippingCosts), Object customFields = default(Object), StateMachineState stateMachineState = default(StateMachineState), OrderAddress shippingOrderAddress = default(OrderAddress), ShippingMethod shippingMethod = default(ShippingMethod), OrderDeliveryPosition positions = default(OrderDeliveryPosition))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderDelivery and cannot be null");
            }
            this._OrderId = orderId;
            // to ensure "shippingOrderAddressId" is required (not null)
            if (shippingOrderAddressId == null)
            {
                throw new ArgumentNullException("shippingOrderAddressId is a required property for OrderDelivery and cannot be null");
            }
            this._ShippingOrderAddressId = shippingOrderAddressId;
            // to ensure "shippingMethodId" is required (not null)
            if (shippingMethodId == null)
            {
                throw new ArgumentNullException("shippingMethodId is a required property for OrderDelivery and cannot be null");
            }
            this._ShippingMethodId = shippingMethodId;
            // to ensure "stateId" is required (not null)
            if (stateId == null)
            {
                throw new ArgumentNullException("stateId is a required property for OrderDelivery and cannot be null");
            }
            this._StateId = stateId;
            // to ensure "trackingCodes" is required (not null)
            if (trackingCodes == null)
            {
                throw new ArgumentNullException("trackingCodes is a required property for OrderDelivery and cannot be null");
            }
            this._TrackingCodes = trackingCodes;
            this._ShippingDateEarliest = shippingDateEarliest;
            this._ShippingDateLatest = shippingDateLatest;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._OrderVersionId = orderVersionId;
            if (this.OrderVersionId != null)
            {
                this._flagOrderVersionId = true;
            }
            this._ShippingOrderAddressVersionId = shippingOrderAddressVersionId;
            if (this.ShippingOrderAddressVersionId != null)
            {
                this._flagShippingOrderAddressVersionId = true;
            }
            this._ShippingCosts = shippingCosts;
            if (this.ShippingCosts != null)
            {
                this._flagShippingCosts = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._StateMachineState = stateMachineState;
            if (this.StateMachineState != null)
            {
                this._flagStateMachineState = true;
            }
            this._ShippingOrderAddress = shippingOrderAddress;
            if (this.ShippingOrderAddress != null)
            {
                this._flagShippingOrderAddress = true;
            }
            this._ShippingMethod = shippingMethod;
            if (this.ShippingMethod != null)
            {
                this._flagShippingMethod = true;
            }
            this._Positions = positions;
            if (this.Positions != null)
            {
                this._flagPositions = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [DataMember(Name = "orderVersionId", EmitDefaultValue = false)]
        public string OrderVersionId
        {
            get{ return _OrderVersionId;}
            set
            {
                _OrderVersionId = value;
                _flagOrderVersionId = true;
            }
        }
        private string _OrderVersionId;
        private bool _flagOrderVersionId;

        /// <summary>
        /// Returns false as OrderVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderVersionId()
        {
            return _flagOrderVersionId;
        }
        /// <summary>
        /// Gets or Sets ShippingOrderAddressId
        /// </summary>
        [DataMember(Name = "shippingOrderAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingOrderAddressId
        {
            get{ return _ShippingOrderAddressId;}
            set
            {
                _ShippingOrderAddressId = value;
                _flagShippingOrderAddressId = true;
            }
        }
        private string _ShippingOrderAddressId;
        private bool _flagShippingOrderAddressId;

        /// <summary>
        /// Returns false as ShippingOrderAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingOrderAddressId()
        {
            return _flagShippingOrderAddressId;
        }
        /// <summary>
        /// Gets or Sets ShippingOrderAddressVersionId
        /// </summary>
        [DataMember(Name = "shippingOrderAddressVersionId", EmitDefaultValue = false)]
        public string ShippingOrderAddressVersionId
        {
            get{ return _ShippingOrderAddressVersionId;}
            set
            {
                _ShippingOrderAddressVersionId = value;
                _flagShippingOrderAddressVersionId = true;
            }
        }
        private string _ShippingOrderAddressVersionId;
        private bool _flagShippingOrderAddressVersionId;

        /// <summary>
        /// Returns false as ShippingOrderAddressVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingOrderAddressVersionId()
        {
            return _flagShippingOrderAddressVersionId;
        }
        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [DataMember(Name = "shippingMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingMethodId
        {
            get{ return _ShippingMethodId;}
            set
            {
                _ShippingMethodId = value;
                _flagShippingMethodId = true;
            }
        }
        private string _ShippingMethodId;
        private bool _flagShippingMethodId;

        /// <summary>
        /// Returns false as ShippingMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethodId()
        {
            return _flagShippingMethodId;
        }
        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", IsRequired = true, EmitDefaultValue = false)]
        public string StateId
        {
            get{ return _StateId;}
            set
            {
                _StateId = value;
                _flagStateId = true;
            }
        }
        private string _StateId;
        private bool _flagStateId;

        /// <summary>
        /// Returns false as StateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStateId()
        {
            return _flagStateId;
        }
        /// <summary>
        /// Gets or Sets TrackingCodes
        /// </summary>
        [DataMember(Name = "trackingCodes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> TrackingCodes
        {
            get{ return _TrackingCodes;}
            set
            {
                _TrackingCodes = value;
                _flagTrackingCodes = true;
            }
        }
        private List<string> _TrackingCodes;
        private bool _flagTrackingCodes;

        /// <summary>
        /// Returns false as TrackingCodes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingCodes()
        {
            return _flagTrackingCodes;
        }
        /// <summary>
        /// Gets or Sets ShippingDateEarliest
        /// </summary>
        [DataMember(Name = "shippingDateEarliest", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ShippingDateEarliest
        {
            get{ return _ShippingDateEarliest;}
            set
            {
                _ShippingDateEarliest = value;
                _flagShippingDateEarliest = true;
            }
        }
        private DateTime _ShippingDateEarliest;
        private bool _flagShippingDateEarliest;

        /// <summary>
        /// Returns false as ShippingDateEarliest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingDateEarliest()
        {
            return _flagShippingDateEarliest;
        }
        /// <summary>
        /// Gets or Sets ShippingDateLatest
        /// </summary>
        [DataMember(Name = "shippingDateLatest", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ShippingDateLatest
        {
            get{ return _ShippingDateLatest;}
            set
            {
                _ShippingDateLatest = value;
                _flagShippingDateLatest = true;
            }
        }
        private DateTime _ShippingDateLatest;
        private bool _flagShippingDateLatest;

        /// <summary>
        /// Returns false as ShippingDateLatest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingDateLatest()
        {
            return _flagShippingDateLatest;
        }
        /// <summary>
        /// Gets or Sets ShippingCosts
        /// </summary>
        [DataMember(Name = "shippingCosts", EmitDefaultValue = false)]
        public OrderShippingCosts ShippingCosts
        {
            get{ return _ShippingCosts;}
            set
            {
                _ShippingCosts = value;
                _flagShippingCosts = true;
            }
        }
        private OrderShippingCosts _ShippingCosts;
        private bool _flagShippingCosts;

        /// <summary>
        /// Returns false as ShippingCosts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingCosts()
        {
            return _flagShippingCosts;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StateMachineState
        /// </summary>
        [DataMember(Name = "stateMachineState", EmitDefaultValue = false)]
        public StateMachineState StateMachineState
        {
            get{ return _StateMachineState;}
            set
            {
                _StateMachineState = value;
                _flagStateMachineState = true;
            }
        }
        private StateMachineState _StateMachineState;
        private bool _flagStateMachineState;

        /// <summary>
        /// Returns false as StateMachineState should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStateMachineState()
        {
            return _flagStateMachineState;
        }
        /// <summary>
        /// Gets or Sets ShippingOrderAddress
        /// </summary>
        [DataMember(Name = "shippingOrderAddress", EmitDefaultValue = false)]
        public OrderAddress ShippingOrderAddress
        {
            get{ return _ShippingOrderAddress;}
            set
            {
                _ShippingOrderAddress = value;
                _flagShippingOrderAddress = true;
            }
        }
        private OrderAddress _ShippingOrderAddress;
        private bool _flagShippingOrderAddress;

        /// <summary>
        /// Returns false as ShippingOrderAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingOrderAddress()
        {
            return _flagShippingOrderAddress;
        }
        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "shippingMethod", EmitDefaultValue = false)]
        public ShippingMethod ShippingMethod
        {
            get{ return _ShippingMethod;}
            set
            {
                _ShippingMethod = value;
                _flagShippingMethod = true;
            }
        }
        private ShippingMethod _ShippingMethod;
        private bool _flagShippingMethod;

        /// <summary>
        /// Returns false as ShippingMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethod()
        {
            return _flagShippingMethod;
        }
        /// <summary>
        /// Gets or Sets Positions
        /// </summary>
        [DataMember(Name = "positions", EmitDefaultValue = false)]
        public OrderDeliveryPosition Positions
        {
            get{ return _Positions;}
            set
            {
                _Positions = value;
                _flagPositions = true;
            }
        }
        private OrderDeliveryPosition _Positions;
        private bool _flagPositions;

        /// <summary>
        /// Returns false as Positions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePositions()
        {
            return _flagPositions;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDelivery {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  ShippingOrderAddressId: ").Append(ShippingOrderAddressId).Append("\n");
            sb.Append("  ShippingOrderAddressVersionId: ").Append(ShippingOrderAddressVersionId).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  TrackingCodes: ").Append(TrackingCodes).Append("\n");
            sb.Append("  ShippingDateEarliest: ").Append(ShippingDateEarliest).Append("\n");
            sb.Append("  ShippingDateLatest: ").Append(ShippingDateLatest).Append("\n");
            sb.Append("  ShippingCosts: ").Append(ShippingCosts).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  StateMachineState: ").Append(StateMachineState).Append("\n");
            sb.Append("  ShippingOrderAddress: ").Append(ShippingOrderAddress).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDelivery);
        }

        /// <summary>
        /// Returns true if OrderDelivery instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDelivery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDelivery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.ShippingOrderAddressId == input.ShippingOrderAddressId ||
                    (this.ShippingOrderAddressId != null &&
                    this.ShippingOrderAddressId.Equals(input.ShippingOrderAddressId))
                ) && 
                (
                    this.ShippingOrderAddressVersionId == input.ShippingOrderAddressVersionId ||
                    (this.ShippingOrderAddressVersionId != null &&
                    this.ShippingOrderAddressVersionId.Equals(input.ShippingOrderAddressVersionId))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.TrackingCodes == input.TrackingCodes ||
                    this.TrackingCodes != null &&
                    input.TrackingCodes != null &&
                    this.TrackingCodes.SequenceEqual(input.TrackingCodes)
                ) && 
                (
                    this.ShippingDateEarliest == input.ShippingDateEarliest ||
                    (this.ShippingDateEarliest != null &&
                    this.ShippingDateEarliest.Equals(input.ShippingDateEarliest))
                ) && 
                (
                    this.ShippingDateLatest == input.ShippingDateLatest ||
                    (this.ShippingDateLatest != null &&
                    this.ShippingDateLatest.Equals(input.ShippingDateLatest))
                ) && 
                (
                    this.ShippingCosts == input.ShippingCosts ||
                    (this.ShippingCosts != null &&
                    this.ShippingCosts.Equals(input.ShippingCosts))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.StateMachineState == input.StateMachineState ||
                    (this.StateMachineState != null &&
                    this.StateMachineState.Equals(input.StateMachineState))
                ) && 
                (
                    this.ShippingOrderAddress == input.ShippingOrderAddress ||
                    (this.ShippingOrderAddress != null &&
                    this.ShippingOrderAddress.Equals(input.ShippingOrderAddress))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.Positions == input.Positions ||
                    (this.Positions != null &&
                    this.Positions.Equals(input.Positions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.ShippingOrderAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingOrderAddressId.GetHashCode();
                }
                if (this.ShippingOrderAddressVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingOrderAddressVersionId.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.StateId != null)
                {
                    hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                }
                if (this.TrackingCodes != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingCodes.GetHashCode();
                }
                if (this.ShippingDateEarliest != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDateEarliest.GetHashCode();
                }
                if (this.ShippingDateLatest != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDateLatest.GetHashCode();
                }
                if (this.ShippingCosts != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingCosts.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.StateMachineState != null)
                {
                    hashCode = (hashCode * 59) + this.StateMachineState.GetHashCode();
                }
                if (this.ShippingOrderAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingOrderAddress.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                if (this.Positions != null)
                {
                    hashCode = (hashCode * 59) + this.Positions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            // ShippingOrderAddressId (string) pattern
            Regex regexShippingOrderAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingOrderAddressId.Match(this.ShippingOrderAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingOrderAddressId, must match a pattern of " + regexShippingOrderAddressId, new [] { "ShippingOrderAddressId" });
            }

            // ShippingOrderAddressVersionId (string) pattern
            Regex regexShippingOrderAddressVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingOrderAddressVersionId.Match(this.ShippingOrderAddressVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingOrderAddressVersionId, must match a pattern of " + regexShippingOrderAddressVersionId, new [] { "ShippingOrderAddressVersionId" });
            }

            // ShippingMethodId (string) pattern
            Regex regexShippingMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingMethodId.Match(this.ShippingMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMethodId, must match a pattern of " + regexShippingMethodId, new [] { "ShippingMethodId" });
            }

            // StateId (string) pattern
            Regex regexStateId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexStateId.Match(this.StateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateId, must match a pattern of " + regexStateId, new [] { "StateId" });
            }

            yield break;
        }
    }

}

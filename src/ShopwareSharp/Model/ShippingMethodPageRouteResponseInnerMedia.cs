// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ShippingMethodPageRouteResponseInnerMedia
    /// </summary>
    public partial class ShippingMethodPageRouteResponseInnerMedia : IEquatable<ShippingMethodPageRouteResponseInnerMedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPageRouteResponseInnerMedia" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="mimeType">mimeType</param>
        /// <param name="fileExtension">fileExtension</param>
        /// <param name="fileSize">fileSize</param>
        /// <param name="title">title</param>
        /// <param name="metaDataRaw">metaDataRaw</param>
        /// <param name="mediaTypeRaw">mediaTypeRaw</param>
        /// <param name="uploadedAt">uploadedAt</param>
        /// <param name="alt">alt</param>
        /// <param name="url">url</param>
        /// <param name="fileName">fileName</param>
        /// <param name="mediaFolderId">mediaFolderId</param>
        /// <param name="_private">_private</param>
        /// <param name="thumbnailsRo">thumbnailsRo</param>
        public ShippingMethodPageRouteResponseInnerMedia(string? userId = default, string? mimeType = default, string? fileExtension = default, int? fileSize = default, string? title = default, string? metaDataRaw = default, string? mediaTypeRaw = default, DateTime? uploadedAt = default, string? alt = default, string? url = default, string? fileName = default, string? mediaFolderId = default, bool? _private = default, string? thumbnailsRo = default)
        {
            UserId = userId;
            MimeType = mimeType;
            FileExtension = fileExtension;
            FileSize = fileSize;
            Title = title;
            MetaDataRaw = metaDataRaw;
            MediaTypeRaw = mediaTypeRaw;
            UploadedAt = uploadedAt;
            Alt = alt;
            Url = url;
            FileName = fileName;
            MediaFolderId = mediaFolderId;
            Private = _private;
            ThumbnailsRo = thumbnailsRo;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string? UserId { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string? MimeType { get; set; }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [JsonPropertyName("fileExtension")]
        public string? FileExtension { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [JsonPropertyName("fileSize")]
        public int? FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataRaw
        /// </summary>
        [JsonPropertyName("metaDataRaw")]
        public string? MetaDataRaw { get; set; }

        /// <summary>
        /// Gets or Sets MediaTypeRaw
        /// </summary>
        [JsonPropertyName("mediaTypeRaw")]
        public string? MediaTypeRaw { get; set; }

        /// <summary>
        /// Gets or Sets UploadedAt
        /// </summary>
        [JsonPropertyName("uploadedAt")]
        public DateTime? UploadedAt { get; set; }

        /// <summary>
        /// Gets or Sets Alt
        /// </summary>
        [JsonPropertyName("alt")]
        public string? Alt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("fileName")]
        public string? FileName { get; set; }

        /// <summary>
        /// Gets or Sets MediaFolderId
        /// </summary>
        [JsonPropertyName("mediaFolderId")]
        public string? MediaFolderId { get; set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [JsonPropertyName("private")]
        public bool? Private { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailsRo
        /// </summary>
        [JsonPropertyName("thumbnailsRo")]
        public string? ThumbnailsRo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPageRouteResponseInnerMedia {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MetaDataRaw: ").Append(MetaDataRaw).Append("\n");
            sb.Append("  MediaTypeRaw: ").Append(MediaTypeRaw).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  Alt: ").Append(Alt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  MediaFolderId: ").Append(MediaFolderId).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  ThumbnailsRo: ").Append(ThumbnailsRo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ShippingMethodPageRouteResponseInnerMedia);
        }

        /// <summary>
        /// Returns true if ShippingMethodPageRouteResponseInnerMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPageRouteResponseInnerMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPageRouteResponseInnerMedia? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.FileExtension == input.FileExtension ||
                    (this.FileExtension != null &&
                    this.FileExtension.Equals(input.FileExtension))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.MetaDataRaw == input.MetaDataRaw ||
                    (this.MetaDataRaw != null &&
                    this.MetaDataRaw.Equals(input.MetaDataRaw))
                ) && 
                (
                    this.MediaTypeRaw == input.MediaTypeRaw ||
                    (this.MediaTypeRaw != null &&
                    this.MediaTypeRaw.Equals(input.MediaTypeRaw))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.Alt == input.Alt ||
                    (this.Alt != null &&
                    this.Alt.Equals(input.Alt))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.MediaFolderId == input.MediaFolderId ||
                    (this.MediaFolderId != null &&
                    this.MediaFolderId.Equals(input.MediaFolderId))
                ) && 
                (
                    this.Private == input.Private ||
                    this.Private.Equals(input.Private)
                ) && 
                (
                    this.ThumbnailsRo == input.ThumbnailsRo ||
                    (this.ThumbnailsRo != null &&
                    this.ThumbnailsRo.Equals(input.ThumbnailsRo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.MimeType != null)
                {
                    hashCode = (hashCode * 59) + this.MimeType.GetHashCode();
                }
                if (this.FileExtension != null)
                {
                    hashCode = (hashCode * 59) + this.FileExtension.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.MetaDataRaw != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDataRaw.GetHashCode();
                }
                if (this.MediaTypeRaw != null)
                {
                    hashCode = (hashCode * 59) + this.MediaTypeRaw.GetHashCode();
                }
                if (this.UploadedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UploadedAt.GetHashCode();
                }
                if (this.Alt != null)
                {
                    hashCode = (hashCode * 59) + this.Alt.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.MediaFolderId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaFolderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Private.GetHashCode();
                if (this.ThumbnailsRo != null)
                {
                    hashCode = (hashCode * 59) + this.ThumbnailsRo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

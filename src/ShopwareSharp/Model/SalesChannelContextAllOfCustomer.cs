/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Information about the current customer - &#x60;null&#x60; if the customer is not logged in
    /// </summary>
    [DataContract(Name = "SalesChannelContext_allOf_customer")]
    public partial class SalesChannelContextAllOfCustomer : IEquatable<SalesChannelContextAllOfCustomer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOfCustomer" /> class.
        /// </summary>
        /// <param name="groupId">groupId.</param>
        /// <param name="defaultPaymentMethodId">defaultPaymentMethodId.</param>
        /// <param name="salesChannelId">salesChannelId.</param>
        /// <param name="languageId">languageId.</param>
        /// <param name="lastPaymentMethodId">lastPaymentMethodId.</param>
        /// <param name="defaultBillingAddressId">defaultBillingAddressId.</param>
        /// <param name="defaultShippingAddressId">defaultShippingAddressId.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="salutationId">salutationId.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="company">company.</param>
        /// <param name="password">password.</param>
        /// <param name="email">email.</param>
        /// <param name="title">title.</param>
        /// <param name="affiliateCode">affiliateCode.</param>
        /// <param name="campaignCode">campaignCode.</param>
        /// <param name="active">active.</param>
        /// <param name="doubleOptInRegistration">doubleOptInRegistration.</param>
        /// <param name="doubleOptInEmailSentDate">doubleOptInEmailSentDate.</param>
        /// <param name="doubleOptInConfirmDate">doubleOptInConfirmDate.</param>
        /// <param name="hash">hash.</param>
        /// <param name="guest">guest.</param>
        /// <param name="firstLogin">firstLogin.</param>
        /// <param name="lastLogin">lastLogin.</param>
        /// <param name="newsletter">newsletter.</param>
        /// <param name="birthday">birthday.</param>
        /// <param name="lastOrderDate">lastOrderDate.</param>
        /// <param name="orderCount">orderCount.</param>
        /// <param name="legacyEncoder">legacyEncoder.</param>
        /// <param name="legacyPassword">legacyPassword.</param>
        /// <param name="autoIncrement">autoIncrement.</param>
        /// <param name="remoteAddress">remoteAddress.</param>
        public SalesChannelContextAllOfCustomer(string groupId = default(string), string defaultPaymentMethodId = default(string), string salesChannelId = default(string), string languageId = default(string), string lastPaymentMethodId = default(string), string defaultBillingAddressId = default(string), string defaultShippingAddressId = default(string), string customerNumber = default(string), string salutationId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string password = default(string), string email = default(string), string title = default(string), string affiliateCode = default(string), string campaignCode = default(string), bool active = default(bool), bool doubleOptInRegistration = default(bool), DateTime doubleOptInEmailSentDate = default(DateTime), DateTime doubleOptInConfirmDate = default(DateTime), string hash = default(string), bool guest = default(bool), DateTime firstLogin = default(DateTime), DateTime lastLogin = default(DateTime), bool newsletter = default(bool), DateTime birthday = default(DateTime), DateTime lastOrderDate = default(DateTime), int orderCount = default(int), string legacyEncoder = default(string), string legacyPassword = default(string), int autoIncrement = default(int), string remoteAddress = default(string))
        {
            this._GroupId = groupId;
            if (this.GroupId != null)
            {
                this._flagGroupId = true;
            }
            this._DefaultPaymentMethodId = defaultPaymentMethodId;
            if (this.DefaultPaymentMethodId != null)
            {
                this._flagDefaultPaymentMethodId = true;
            }
            this._SalesChannelId = salesChannelId;
            if (this.SalesChannelId != null)
            {
                this._flagSalesChannelId = true;
            }
            this._LanguageId = languageId;
            if (this.LanguageId != null)
            {
                this._flagLanguageId = true;
            }
            this._LastPaymentMethodId = lastPaymentMethodId;
            if (this.LastPaymentMethodId != null)
            {
                this._flagLastPaymentMethodId = true;
            }
            this._DefaultBillingAddressId = defaultBillingAddressId;
            if (this.DefaultBillingAddressId != null)
            {
                this._flagDefaultBillingAddressId = true;
            }
            this._DefaultShippingAddressId = defaultShippingAddressId;
            if (this.DefaultShippingAddressId != null)
            {
                this._flagDefaultShippingAddressId = true;
            }
            this._CustomerNumber = customerNumber;
            if (this.CustomerNumber != null)
            {
                this._flagCustomerNumber = true;
            }
            this._SalutationId = salutationId;
            if (this.SalutationId != null)
            {
                this._flagSalutationId = true;
            }
            this._FirstName = firstName;
            if (this.FirstName != null)
            {
                this._flagFirstName = true;
            }
            this._LastName = lastName;
            if (this.LastName != null)
            {
                this._flagLastName = true;
            }
            this._Company = company;
            if (this.Company != null)
            {
                this._flagCompany = true;
            }
            this._Password = password;
            if (this.Password != null)
            {
                this._flagPassword = true;
            }
            this._Email = email;
            if (this.Email != null)
            {
                this._flagEmail = true;
            }
            this._Title = title;
            if (this.Title != null)
            {
                this._flagTitle = true;
            }
            this._AffiliateCode = affiliateCode;
            if (this.AffiliateCode != null)
            {
                this._flagAffiliateCode = true;
            }
            this._CampaignCode = campaignCode;
            if (this.CampaignCode != null)
            {
                this._flagCampaignCode = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._DoubleOptInRegistration = doubleOptInRegistration;
            if (this.DoubleOptInRegistration != null)
            {
                this._flagDoubleOptInRegistration = true;
            }
            this._DoubleOptInEmailSentDate = doubleOptInEmailSentDate;
            if (this.DoubleOptInEmailSentDate != null)
            {
                this._flagDoubleOptInEmailSentDate = true;
            }
            this._DoubleOptInConfirmDate = doubleOptInConfirmDate;
            if (this.DoubleOptInConfirmDate != null)
            {
                this._flagDoubleOptInConfirmDate = true;
            }
            this._Hash = hash;
            if (this.Hash != null)
            {
                this._flagHash = true;
            }
            this._Guest = guest;
            if (this.Guest != null)
            {
                this._flagGuest = true;
            }
            this._FirstLogin = firstLogin;
            if (this.FirstLogin != null)
            {
                this._flagFirstLogin = true;
            }
            this._LastLogin = lastLogin;
            if (this.LastLogin != null)
            {
                this._flagLastLogin = true;
            }
            this._Newsletter = newsletter;
            if (this.Newsletter != null)
            {
                this._flagNewsletter = true;
            }
            this._Birthday = birthday;
            if (this.Birthday != null)
            {
                this._flagBirthday = true;
            }
            this._LastOrderDate = lastOrderDate;
            if (this.LastOrderDate != null)
            {
                this._flagLastOrderDate = true;
            }
            this._OrderCount = orderCount;
            if (this.OrderCount != null)
            {
                this._flagOrderCount = true;
            }
            this._LegacyEncoder = legacyEncoder;
            if (this.LegacyEncoder != null)
            {
                this._flagLegacyEncoder = true;
            }
            this._LegacyPassword = legacyPassword;
            if (this.LegacyPassword != null)
            {
                this._flagLegacyPassword = true;
            }
            this._AutoIncrement = autoIncrement;
            if (this.AutoIncrement != null)
            {
                this._flagAutoIncrement = true;
            }
            this._RemoteAddress = remoteAddress;
            if (this.RemoteAddress != null)
            {
                this._flagRemoteAddress = true;
            }
        }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public string GroupId
        {
            get{ return _GroupId;}
            set
            {
                _GroupId = value;
                _flagGroupId = true;
            }
        }
        private string _GroupId;
        private bool _flagGroupId;

        /// <summary>
        /// Returns false as GroupId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupId()
        {
            return _flagGroupId;
        }
        /// <summary>
        /// Gets or Sets DefaultPaymentMethodId
        /// </summary>
        [DataMember(Name = "defaultPaymentMethodId", EmitDefaultValue = false)]
        public string DefaultPaymentMethodId
        {
            get{ return _DefaultPaymentMethodId;}
            set
            {
                _DefaultPaymentMethodId = value;
                _flagDefaultPaymentMethodId = true;
            }
        }
        private string _DefaultPaymentMethodId;
        private bool _flagDefaultPaymentMethodId;

        /// <summary>
        /// Returns false as DefaultPaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentMethodId()
        {
            return _flagDefaultPaymentMethodId;
        }
        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [DataMember(Name = "salesChannelId", EmitDefaultValue = false)]
        public string SalesChannelId
        {
            get{ return _SalesChannelId;}
            set
            {
                _SalesChannelId = value;
                _flagSalesChannelId = true;
            }
        }
        private string _SalesChannelId;
        private bool _flagSalesChannelId;

        /// <summary>
        /// Returns false as SalesChannelId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannelId()
        {
            return _flagSalesChannelId;
        }
        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Gets or Sets LastPaymentMethodId
        /// </summary>
        [DataMember(Name = "lastPaymentMethodId", EmitDefaultValue = false)]
        public string LastPaymentMethodId
        {
            get{ return _LastPaymentMethodId;}
            set
            {
                _LastPaymentMethodId = value;
                _flagLastPaymentMethodId = true;
            }
        }
        private string _LastPaymentMethodId;
        private bool _flagLastPaymentMethodId;

        /// <summary>
        /// Returns false as LastPaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastPaymentMethodId()
        {
            return _flagLastPaymentMethodId;
        }
        /// <summary>
        /// Gets or Sets DefaultBillingAddressId
        /// </summary>
        [DataMember(Name = "defaultBillingAddressId", EmitDefaultValue = false)]
        public string DefaultBillingAddressId
        {
            get{ return _DefaultBillingAddressId;}
            set
            {
                _DefaultBillingAddressId = value;
                _flagDefaultBillingAddressId = true;
            }
        }
        private string _DefaultBillingAddressId;
        private bool _flagDefaultBillingAddressId;

        /// <summary>
        /// Returns false as DefaultBillingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultBillingAddressId()
        {
            return _flagDefaultBillingAddressId;
        }
        /// <summary>
        /// Gets or Sets DefaultShippingAddressId
        /// </summary>
        [DataMember(Name = "defaultShippingAddressId", EmitDefaultValue = false)]
        public string DefaultShippingAddressId
        {
            get{ return _DefaultShippingAddressId;}
            set
            {
                _DefaultShippingAddressId = value;
                _flagDefaultShippingAddressId = true;
            }
        }
        private string _DefaultShippingAddressId;
        private bool _flagDefaultShippingAddressId;

        /// <summary>
        /// Returns false as DefaultShippingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultShippingAddressId()
        {
            return _flagDefaultShippingAddressId;
        }
        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public string CustomerNumber
        {
            get{ return _CustomerNumber;}
            set
            {
                _CustomerNumber = value;
                _flagCustomerNumber = true;
            }
        }
        private string _CustomerNumber;
        private bool _flagCustomerNumber;

        /// <summary>
        /// Returns false as CustomerNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerNumber()
        {
            return _flagCustomerNumber;
        }
        /// <summary>
        /// Gets or Sets SalutationId
        /// </summary>
        [DataMember(Name = "salutationId", EmitDefaultValue = false)]
        public string SalutationId
        {
            get{ return _SalutationId;}
            set
            {
                _SalutationId = value;
                _flagSalutationId = true;
            }
        }
        private string _SalutationId;
        private bool _flagSalutationId;

        /// <summary>
        /// Returns false as SalutationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalutationId()
        {
            return _flagSalutationId;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company
        {
            get{ return _Company;}
            set
            {
                _Company = value;
                _flagCompany = true;
            }
        }
        private string _Company;
        private bool _flagCompany;

        /// <summary>
        /// Returns false as Company should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompany()
        {
            return _flagCompany;
        }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password
        {
            get{ return _Password;}
            set
            {
                _Password = value;
                _flagPassword = true;
            }
        }
        private string _Password;
        private bool _flagPassword;

        /// <summary>
        /// Returns false as Password should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePassword()
        {
            return _flagPassword;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private string _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title
        {
            get{ return _Title;}
            set
            {
                _Title = value;
                _flagTitle = true;
            }
        }
        private string _Title;
        private bool _flagTitle;

        /// <summary>
        /// Returns false as Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTitle()
        {
            return _flagTitle;
        }
        /// <summary>
        /// Gets or Sets AffiliateCode
        /// </summary>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode
        {
            get{ return _AffiliateCode;}
            set
            {
                _AffiliateCode = value;
                _flagAffiliateCode = true;
            }
        }
        private string _AffiliateCode;
        private bool _flagAffiliateCode;

        /// <summary>
        /// Returns false as AffiliateCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAffiliateCode()
        {
            return _flagAffiliateCode;
        }
        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode
        {
            get{ return _CampaignCode;}
            set
            {
                _CampaignCode = value;
                _flagCampaignCode = true;
            }
        }
        private string _CampaignCode;
        private bool _flagCampaignCode;

        /// <summary>
        /// Returns false as CampaignCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignCode()
        {
            return _flagCampaignCode;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInRegistration
        /// </summary>
        [DataMember(Name = "doubleOptInRegistration", EmitDefaultValue = true)]
        public bool DoubleOptInRegistration
        {
            get{ return _DoubleOptInRegistration;}
            set
            {
                _DoubleOptInRegistration = value;
                _flagDoubleOptInRegistration = true;
            }
        }
        private bool _DoubleOptInRegistration;
        private bool _flagDoubleOptInRegistration;

        /// <summary>
        /// Returns false as DoubleOptInRegistration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInRegistration()
        {
            return _flagDoubleOptInRegistration;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInEmailSentDate
        /// </summary>
        [DataMember(Name = "doubleOptInEmailSentDate", EmitDefaultValue = false)]
        public DateTime DoubleOptInEmailSentDate
        {
            get{ return _DoubleOptInEmailSentDate;}
            set
            {
                _DoubleOptInEmailSentDate = value;
                _flagDoubleOptInEmailSentDate = true;
            }
        }
        private DateTime _DoubleOptInEmailSentDate;
        private bool _flagDoubleOptInEmailSentDate;

        /// <summary>
        /// Returns false as DoubleOptInEmailSentDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInEmailSentDate()
        {
            return _flagDoubleOptInEmailSentDate;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInConfirmDate
        /// </summary>
        [DataMember(Name = "doubleOptInConfirmDate", EmitDefaultValue = false)]
        public DateTime DoubleOptInConfirmDate
        {
            get{ return _DoubleOptInConfirmDate;}
            set
            {
                _DoubleOptInConfirmDate = value;
                _flagDoubleOptInConfirmDate = true;
            }
        }
        private DateTime _DoubleOptInConfirmDate;
        private bool _flagDoubleOptInConfirmDate;

        /// <summary>
        /// Returns false as DoubleOptInConfirmDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInConfirmDate()
        {
            return _flagDoubleOptInConfirmDate;
        }
        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash
        {
            get{ return _Hash;}
            set
            {
                _Hash = value;
                _flagHash = true;
            }
        }
        private string _Hash;
        private bool _flagHash;

        /// <summary>
        /// Returns false as Hash should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHash()
        {
            return _flagHash;
        }
        /// <summary>
        /// Gets or Sets Guest
        /// </summary>
        [DataMember(Name = "guest", EmitDefaultValue = true)]
        public bool Guest
        {
            get{ return _Guest;}
            set
            {
                _Guest = value;
                _flagGuest = true;
            }
        }
        private bool _Guest;
        private bool _flagGuest;

        /// <summary>
        /// Returns false as Guest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGuest()
        {
            return _flagGuest;
        }
        /// <summary>
        /// Gets or Sets FirstLogin
        /// </summary>
        [DataMember(Name = "firstLogin", EmitDefaultValue = false)]
        public DateTime FirstLogin
        {
            get{ return _FirstLogin;}
            set
            {
                _FirstLogin = value;
                _flagFirstLogin = true;
            }
        }
        private DateTime _FirstLogin;
        private bool _flagFirstLogin;

        /// <summary>
        /// Returns false as FirstLogin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstLogin()
        {
            return _flagFirstLogin;
        }
        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "lastLogin", EmitDefaultValue = false)]
        public DateTime LastLogin
        {
            get{ return _LastLogin;}
            set
            {
                _LastLogin = value;
                _flagLastLogin = true;
            }
        }
        private DateTime _LastLogin;
        private bool _flagLastLogin;

        /// <summary>
        /// Returns false as LastLogin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastLogin()
        {
            return _flagLastLogin;
        }
        /// <summary>
        /// Gets or Sets Newsletter
        /// </summary>
        [DataMember(Name = "newsletter", EmitDefaultValue = true)]
        public bool Newsletter
        {
            get{ return _Newsletter;}
            set
            {
                _Newsletter = value;
                _flagNewsletter = true;
            }
        }
        private bool _Newsletter;
        private bool _flagNewsletter;

        /// <summary>
        /// Returns false as Newsletter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewsletter()
        {
            return _flagNewsletter;
        }
        /// <summary>
        /// Gets or Sets Birthday
        /// </summary>
        [DataMember(Name = "birthday", EmitDefaultValue = false)]
        public DateTime Birthday
        {
            get{ return _Birthday;}
            set
            {
                _Birthday = value;
                _flagBirthday = true;
            }
        }
        private DateTime _Birthday;
        private bool _flagBirthday;

        /// <summary>
        /// Returns false as Birthday should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBirthday()
        {
            return _flagBirthday;
        }
        /// <summary>
        /// Gets or Sets LastOrderDate
        /// </summary>
        [DataMember(Name = "lastOrderDate", EmitDefaultValue = false)]
        public DateTime LastOrderDate
        {
            get{ return _LastOrderDate;}
            set
            {
                _LastOrderDate = value;
                _flagLastOrderDate = true;
            }
        }
        private DateTime _LastOrderDate;
        private bool _flagLastOrderDate;

        /// <summary>
        /// Returns false as LastOrderDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastOrderDate()
        {
            return _flagLastOrderDate;
        }
        /// <summary>
        /// Gets or Sets OrderCount
        /// </summary>
        [DataMember(Name = "orderCount", EmitDefaultValue = false)]
        public int OrderCount
        {
            get{ return _OrderCount;}
            set
            {
                _OrderCount = value;
                _flagOrderCount = true;
            }
        }
        private int _OrderCount;
        private bool _flagOrderCount;

        /// <summary>
        /// Returns false as OrderCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderCount()
        {
            return _flagOrderCount;
        }
        /// <summary>
        /// Gets or Sets LegacyEncoder
        /// </summary>
        [DataMember(Name = "legacyEncoder", EmitDefaultValue = false)]
        public string LegacyEncoder
        {
            get{ return _LegacyEncoder;}
            set
            {
                _LegacyEncoder = value;
                _flagLegacyEncoder = true;
            }
        }
        private string _LegacyEncoder;
        private bool _flagLegacyEncoder;

        /// <summary>
        /// Returns false as LegacyEncoder should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLegacyEncoder()
        {
            return _flagLegacyEncoder;
        }
        /// <summary>
        /// Gets or Sets LegacyPassword
        /// </summary>
        [DataMember(Name = "legacyPassword", EmitDefaultValue = false)]
        public string LegacyPassword
        {
            get{ return _LegacyPassword;}
            set
            {
                _LegacyPassword = value;
                _flagLegacyPassword = true;
            }
        }
        private string _LegacyPassword;
        private bool _flagLegacyPassword;

        /// <summary>
        /// Returns false as LegacyPassword should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLegacyPassword()
        {
            return _flagLegacyPassword;
        }
        /// <summary>
        /// Gets or Sets AutoIncrement
        /// </summary>
        [DataMember(Name = "autoIncrement", EmitDefaultValue = false)]
        public int AutoIncrement
        {
            get{ return _AutoIncrement;}
            set
            {
                _AutoIncrement = value;
                _flagAutoIncrement = true;
            }
        }
        private int _AutoIncrement;
        private bool _flagAutoIncrement;

        /// <summary>
        /// Returns false as AutoIncrement should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoIncrement()
        {
            return _flagAutoIncrement;
        }
        /// <summary>
        /// Gets or Sets RemoteAddress
        /// </summary>
        [DataMember(Name = "remoteAddress", EmitDefaultValue = false)]
        public string RemoteAddress
        {
            get{ return _RemoteAddress;}
            set
            {
                _RemoteAddress = value;
                _flagRemoteAddress = true;
            }
        }
        private string _RemoteAddress;
        private bool _flagRemoteAddress;

        /// <summary>
        /// Returns false as RemoteAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteAddress()
        {
            return _flagRemoteAddress;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOfCustomer {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  DefaultPaymentMethodId: ").Append(DefaultPaymentMethodId).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  LastPaymentMethodId: ").Append(LastPaymentMethodId).Append("\n");
            sb.Append("  DefaultBillingAddressId: ").Append(DefaultBillingAddressId).Append("\n");
            sb.Append("  DefaultShippingAddressId: ").Append(DefaultShippingAddressId).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  SalutationId: ").Append(SalutationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DoubleOptInRegistration: ").Append(DoubleOptInRegistration).Append("\n");
            sb.Append("  DoubleOptInEmailSentDate: ").Append(DoubleOptInEmailSentDate).Append("\n");
            sb.Append("  DoubleOptInConfirmDate: ").Append(DoubleOptInConfirmDate).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  FirstLogin: ").Append(FirstLogin).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Newsletter: ").Append(Newsletter).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  LastOrderDate: ").Append(LastOrderDate).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  LegacyEncoder: ").Append(LegacyEncoder).Append("\n");
            sb.Append("  LegacyPassword: ").Append(LegacyPassword).Append("\n");
            sb.Append("  AutoIncrement: ").Append(AutoIncrement).Append("\n");
            sb.Append("  RemoteAddress: ").Append(RemoteAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannelContextAllOfCustomer);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOfCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOfCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOfCustomer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.DefaultPaymentMethodId == input.DefaultPaymentMethodId ||
                    (this.DefaultPaymentMethodId != null &&
                    this.DefaultPaymentMethodId.Equals(input.DefaultPaymentMethodId))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.LastPaymentMethodId == input.LastPaymentMethodId ||
                    (this.LastPaymentMethodId != null &&
                    this.LastPaymentMethodId.Equals(input.LastPaymentMethodId))
                ) && 
                (
                    this.DefaultBillingAddressId == input.DefaultBillingAddressId ||
                    (this.DefaultBillingAddressId != null &&
                    this.DefaultBillingAddressId.Equals(input.DefaultBillingAddressId))
                ) && 
                (
                    this.DefaultShippingAddressId == input.DefaultShippingAddressId ||
                    (this.DefaultShippingAddressId != null &&
                    this.DefaultShippingAddressId.Equals(input.DefaultShippingAddressId))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.SalutationId == input.SalutationId ||
                    (this.SalutationId != null &&
                    this.SalutationId.Equals(input.SalutationId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.DoubleOptInRegistration == input.DoubleOptInRegistration ||
                    this.DoubleOptInRegistration.Equals(input.DoubleOptInRegistration)
                ) && 
                (
                    this.DoubleOptInEmailSentDate == input.DoubleOptInEmailSentDate ||
                    (this.DoubleOptInEmailSentDate != null &&
                    this.DoubleOptInEmailSentDate.Equals(input.DoubleOptInEmailSentDate))
                ) && 
                (
                    this.DoubleOptInConfirmDate == input.DoubleOptInConfirmDate ||
                    (this.DoubleOptInConfirmDate != null &&
                    this.DoubleOptInConfirmDate.Equals(input.DoubleOptInConfirmDate))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Guest == input.Guest ||
                    this.Guest.Equals(input.Guest)
                ) && 
                (
                    this.FirstLogin == input.FirstLogin ||
                    (this.FirstLogin != null &&
                    this.FirstLogin.Equals(input.FirstLogin))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.Newsletter == input.Newsletter ||
                    this.Newsletter.Equals(input.Newsletter)
                ) && 
                (
                    this.Birthday == input.Birthday ||
                    (this.Birthday != null &&
                    this.Birthday.Equals(input.Birthday))
                ) && 
                (
                    this.LastOrderDate == input.LastOrderDate ||
                    (this.LastOrderDate != null &&
                    this.LastOrderDate.Equals(input.LastOrderDate))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    this.OrderCount.Equals(input.OrderCount)
                ) && 
                (
                    this.LegacyEncoder == input.LegacyEncoder ||
                    (this.LegacyEncoder != null &&
                    this.LegacyEncoder.Equals(input.LegacyEncoder))
                ) && 
                (
                    this.LegacyPassword == input.LegacyPassword ||
                    (this.LegacyPassword != null &&
                    this.LegacyPassword.Equals(input.LegacyPassword))
                ) && 
                (
                    this.AutoIncrement == input.AutoIncrement ||
                    this.AutoIncrement.Equals(input.AutoIncrement)
                ) && 
                (
                    this.RemoteAddress == input.RemoteAddress ||
                    (this.RemoteAddress != null &&
                    this.RemoteAddress.Equals(input.RemoteAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.DefaultPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPaymentMethodId.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.LastPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentMethodId.GetHashCode();
                }
                if (this.DefaultBillingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultBillingAddressId.GetHashCode();
                }
                if (this.DefaultShippingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultShippingAddressId.GetHashCode();
                }
                if (this.CustomerNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                }
                if (this.SalutationId != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.DoubleOptInRegistration.GetHashCode();
                if (this.DoubleOptInEmailSentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DoubleOptInEmailSentDate.GetHashCode();
                }
                if (this.DoubleOptInConfirmDate != null)
                {
                    hashCode = (hashCode * 59) + this.DoubleOptInConfirmDate.GetHashCode();
                }
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Guest.GetHashCode();
                if (this.FirstLogin != null)
                {
                    hashCode = (hashCode * 59) + this.FirstLogin.GetHashCode();
                }
                if (this.LastLogin != null)
                {
                    hashCode = (hashCode * 59) + this.LastLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Newsletter.GetHashCode();
                if (this.Birthday != null)
                {
                    hashCode = (hashCode * 59) + this.Birthday.GetHashCode();
                }
                if (this.LastOrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastOrderDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderCount.GetHashCode();
                if (this.LegacyEncoder != null)
                {
                    hashCode = (hashCode * 59) + this.LegacyEncoder.GetHashCode();
                }
                if (this.LegacyPassword != null)
                {
                    hashCode = (hashCode * 59) + this.LegacyPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoIncrement.GetHashCode();
                if (this.RemoteAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Language")]
    public partial class Language : IEquatable<Language>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Language" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Language() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Language" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="localeId">localeId (required).</param>
        /// <param name="translationCodeId">translationCodeId.</param>
        /// <param name="name">name (required).</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="parent">parent.</param>
        /// <param name="locale">locale.</param>
        /// <param name="translationCode">translationCode.</param>
        /// <param name="children">children.</param>
        public Language(string id = default(string), string parentId = default(string), string localeId = default(string), string translationCodeId = default(string), string name = default(string), Object customFields = default(Object), Language parent = default(Language), Locale locale = default(Locale), Locale translationCode = default(Locale), Language children = default(Language))
        {
            // to ensure "localeId" is required (not null)
            if (localeId == null)
            {
                throw new ArgumentNullException("localeId is a required property for Language and cannot be null");
            }
            this._LocaleId = localeId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Language and cannot be null");
            }
            this._Name = name;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._ParentId = parentId;
            if (this.ParentId != null)
            {
                this._flagParentId = true;
            }
            this._TranslationCodeId = translationCodeId;
            if (this.TranslationCodeId != null)
            {
                this._flagTranslationCodeId = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._Parent = parent;
            if (this.Parent != null)
            {
                this._flagParent = true;
            }
            this._Locale = locale;
            if (this.Locale != null)
            {
                this._flagLocale = true;
            }
            this._TranslationCode = translationCode;
            if (this.TranslationCode != null)
            {
                this._flagTranslationCode = true;
            }
            this._Children = children;
            if (this.Children != null)
            {
                this._flagChildren = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId
        {
            get{ return _ParentId;}
            set
            {
                _ParentId = value;
                _flagParentId = true;
            }
        }
        private string _ParentId;
        private bool _flagParentId;

        /// <summary>
        /// Returns false as ParentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentId()
        {
            return _flagParentId;
        }
        /// <summary>
        /// Gets or Sets LocaleId
        /// </summary>
        [DataMember(Name = "localeId", IsRequired = true, EmitDefaultValue = false)]
        public string LocaleId
        {
            get{ return _LocaleId;}
            set
            {
                _LocaleId = value;
                _flagLocaleId = true;
            }
        }
        private string _LocaleId;
        private bool _flagLocaleId;

        /// <summary>
        /// Returns false as LocaleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocaleId()
        {
            return _flagLocaleId;
        }
        /// <summary>
        /// Gets or Sets TranslationCodeId
        /// </summary>
        [DataMember(Name = "translationCodeId", EmitDefaultValue = false)]
        public string TranslationCodeId
        {
            get{ return _TranslationCodeId;}
            set
            {
                _TranslationCodeId = value;
                _flagTranslationCodeId = true;
            }
        }
        private string _TranslationCodeId;
        private bool _flagTranslationCodeId;

        /// <summary>
        /// Returns false as TranslationCodeId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslationCodeId()
        {
            return _flagTranslationCodeId;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public Language Parent
        {
            get{ return _Parent;}
            set
            {
                _Parent = value;
                _flagParent = true;
            }
        }
        private Language _Parent;
        private bool _flagParent;

        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return _flagParent;
        }
        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public Locale Locale
        {
            get{ return _Locale;}
            set
            {
                _Locale = value;
                _flagLocale = true;
            }
        }
        private Locale _Locale;
        private bool _flagLocale;

        /// <summary>
        /// Returns false as Locale should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocale()
        {
            return _flagLocale;
        }
        /// <summary>
        /// Gets or Sets TranslationCode
        /// </summary>
        [DataMember(Name = "translationCode", EmitDefaultValue = false)]
        public Locale TranslationCode
        {
            get{ return _TranslationCode;}
            set
            {
                _TranslationCode = value;
                _flagTranslationCode = true;
            }
        }
        private Locale _TranslationCode;
        private bool _flagTranslationCode;

        /// <summary>
        /// Returns false as TranslationCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslationCode()
        {
            return _flagTranslationCode;
        }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public Language Children
        {
            get{ return _Children;}
            set
            {
                _Children = value;
                _flagChildren = true;
            }
        }
        private Language _Children;
        private bool _flagChildren;

        /// <summary>
        /// Returns false as Children should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChildren()
        {
            return _flagChildren;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Language {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  LocaleId: ").Append(LocaleId).Append("\n");
            sb.Append("  TranslationCodeId: ").Append(TranslationCodeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  TranslationCode: ").Append(TranslationCode).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Language);
        }

        /// <summary>
        /// Returns true if Language instances are equal
        /// </summary>
        /// <param name="input">Instance of Language to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Language input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.LocaleId == input.LocaleId ||
                    (this.LocaleId != null &&
                    this.LocaleId.Equals(input.LocaleId))
                ) && 
                (
                    this.TranslationCodeId == input.TranslationCodeId ||
                    (this.TranslationCodeId != null &&
                    this.TranslationCodeId.Equals(input.TranslationCodeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.TranslationCode == input.TranslationCode ||
                    (this.TranslationCode != null &&
                    this.TranslationCode.Equals(input.TranslationCode))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.LocaleId != null)
                {
                    hashCode = (hashCode * 59) + this.LocaleId.GetHashCode();
                }
                if (this.TranslationCodeId != null)
                {
                    hashCode = (hashCode * 59) + this.TranslationCodeId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                if (this.TranslationCode != null)
                {
                    hashCode = (hashCode * 59) + this.TranslationCode.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // LocaleId (string) pattern
            Regex regexLocaleId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLocaleId.Match(this.LocaleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocaleId, must match a pattern of " + regexLocaleId, new [] { "LocaleId" });
            }

            // TranslationCodeId (string) pattern
            Regex regexTranslationCodeId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexTranslationCodeId.Match(this.TranslationCodeId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TranslationCodeId, must match a pattern of " + regexTranslationCodeId, new [] { "TranslationCodeId" });
            }

            yield break;
        }
    }

}

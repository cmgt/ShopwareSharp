/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// HandlePaymentMethodRequest
    /// </summary>
    [DataContract(Name = "handlePaymentMethod_request")]
    public partial class HandlePaymentMethodRequest : IEquatable<HandlePaymentMethodRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlePaymentMethodRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HandlePaymentMethodRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlePaymentMethodRequest" /> class.
        /// </summary>
        /// <param name="orderId">Identifier of an order (required).</param>
        /// <param name="finishUrl">URL to which the client should be redirected after successful payment.</param>
        /// <param name="errorUrl">URL to which the client should be redirected after erroneous payment.</param>
        public HandlePaymentMethodRequest(string orderId = default(string), string finishUrl = default(string), string errorUrl = default(string))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for HandlePaymentMethodRequest and cannot be null");
            }
            this.OrderId = orderId;
            this.FinishUrl = finishUrl;
            this.ErrorUrl = errorUrl;
        }

        /// <summary>
        /// Identifier of an order
        /// </summary>
        /// <value>Identifier of an order</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// URL to which the client should be redirected after successful payment
        /// </summary>
        /// <value>URL to which the client should be redirected after successful payment</value>
        [DataMember(Name = "finishUrl", EmitDefaultValue = false)]
        public string FinishUrl { get; set; }

        /// <summary>
        /// URL to which the client should be redirected after erroneous payment
        /// </summary>
        /// <value>URL to which the client should be redirected after erroneous payment</value>
        [DataMember(Name = "errorUrl", EmitDefaultValue = false)]
        public string ErrorUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HandlePaymentMethodRequest {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  FinishUrl: ").Append(FinishUrl).Append("\n");
            sb.Append("  ErrorUrl: ").Append(ErrorUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HandlePaymentMethodRequest);
        }

        /// <summary>
        /// Returns true if HandlePaymentMethodRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HandlePaymentMethodRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HandlePaymentMethodRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.FinishUrl == input.FinishUrl ||
                    (this.FinishUrl != null &&
                    this.FinishUrl.Equals(input.FinishUrl))
                ) && 
                (
                    this.ErrorUrl == input.ErrorUrl ||
                    (this.ErrorUrl != null &&
                    this.ErrorUrl.Equals(input.ErrorUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.FinishUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FinishUrl.GetHashCode();
                }
                if (this.ErrorUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// CreateOrderRequest
    /// </summary>
    [DataContract(Name = "createOrder_request")]
    public partial class CreateOrderRequest : IEquatable<CreateOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        /// <param name="customerComment">Adds a comment from the customer to the order..</param>
        /// <param name="affiliateCode">The affiliate code can be used to track which referrer the customer came through. An example could be &#x60;Price-comparison-company-XY&#x60;..</param>
        /// <param name="campaignCode">The campaign code is used to track which action the customer came from. An example could be &#x60;Summer-Deals&#x60;.</param>
        public CreateOrderRequest(string customerComment = default(string), string affiliateCode = default(string), string campaignCode = default(string))
        {
            this.CustomerComment = customerComment;
            this.AffiliateCode = affiliateCode;
            this.CampaignCode = campaignCode;
        }

        /// <summary>
        /// Adds a comment from the customer to the order.
        /// </summary>
        /// <value>Adds a comment from the customer to the order.</value>
        [DataMember(Name = "customerComment", EmitDefaultValue = false)]
        public string CustomerComment { get; set; }

        /// <summary>
        /// The affiliate code can be used to track which referrer the customer came through. An example could be &#x60;Price-comparison-company-XY&#x60;.
        /// </summary>
        /// <value>The affiliate code can be used to track which referrer the customer came through. An example could be &#x60;Price-comparison-company-XY&#x60;.</value>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode { get; set; }

        /// <summary>
        /// The campaign code is used to track which action the customer came from. An example could be &#x60;Summer-Deals&#x60;
        /// </summary>
        /// <value>The campaign code is used to track which action the customer came from. An example could be &#x60;Summer-Deals&#x60;</value>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrderRequest {\n");
            sb.Append("  CustomerComment: ").Append(CustomerComment).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrderRequest);
        }

        /// <summary>
        /// Returns true if CreateOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerComment == input.CustomerComment ||
                    (this.CustomerComment != null &&
                    this.CustomerComment.Equals(input.CustomerComment))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerComment != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerComment.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Cart
    /// </summary>
    [DataContract(Name = "Cart")]
    public partial class Cart : IEquatable<Cart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cart" /> class.
        /// </summary>
        /// <param name="apiAlias">Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias)..</param>
        /// <param name="name">Name of the cart - for example &#x60;guest-cart&#x60;.</param>
        /// <param name="token">Context token identifying the cart and the user session.</param>
        /// <param name="price">price.</param>
        /// <param name="lineItems">All items within the cart.</param>
        /// <param name="errors">A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers..</param>
        /// <param name="transactions">A list of all payment transactions associated with the current cart..</param>
        /// <param name="modified">modified.</param>
        /// <param name="customerComment">A comment that can be added to the cart..</param>
        /// <param name="affiliateCode">An affiliate tracking code.</param>
        /// <param name="campaignCode">A campaign tracking code.</param>
        public Cart(string apiAlias = default(string), string name = default(string), string token = default(string), CartAllOfPrice price = default(CartAllOfPrice), List<LineItem> lineItems = default(List<LineItem>), List<CartAllOfErrors> errors = default(List<CartAllOfErrors>), List<CartAllOfTransactions> transactions = default(List<CartAllOfTransactions>), bool modified = default(bool), string customerComment = default(string), string affiliateCode = default(string), string campaignCode = default(string))
        {
            this._ApiAlias = apiAlias;
            if (this.ApiAlias != null)
            {
                this._flagApiAlias = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Token = token;
            if (this.Token != null)
            {
                this._flagToken = true;
            }
            this._Price = price;
            if (this.Price != null)
            {
                this._flagPrice = true;
            }
            this._LineItems = lineItems;
            if (this.LineItems != null)
            {
                this._flagLineItems = true;
            }
            this._Errors = errors;
            if (this.Errors != null)
            {
                this._flagErrors = true;
            }
            this._Transactions = transactions;
            if (this.Transactions != null)
            {
                this._flagTransactions = true;
            }
            this._Modified = modified;
            if (this.Modified != null)
            {
                this._flagModified = true;
            }
            this._CustomerComment = customerComment;
            if (this.CustomerComment != null)
            {
                this._flagCustomerComment = true;
            }
            this._AffiliateCode = affiliateCode;
            if (this.AffiliateCode != null)
            {
                this._flagAffiliateCode = true;
            }
            this._CampaignCode = campaignCode;
            if (this.CampaignCode != null)
            {
                this._flagCampaignCode = true;
            }
        }

        /// <summary>
        /// Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias).
        /// </summary>
        /// <value>Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias).</value>
        [DataMember(Name = "apiAlias", EmitDefaultValue = false)]
        public string ApiAlias
        {
            get{ return _ApiAlias;}
            set
            {
                _ApiAlias = value;
                _flagApiAlias = true;
            }
        }
        private string _ApiAlias;
        private bool _flagApiAlias;

        /// <summary>
        /// Returns false as ApiAlias should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiAlias()
        {
            return _flagApiAlias;
        }
        /// <summary>
        /// Name of the cart - for example &#x60;guest-cart&#x60;
        /// </summary>
        /// <value>Name of the cart - for example &#x60;guest-cart&#x60;</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Context token identifying the cart and the user session
        /// </summary>
        /// <value>Context token identifying the cart and the user session</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token
        {
            get{ return _Token;}
            set
            {
                _Token = value;
                _flagToken = true;
            }
        }
        private string _Token;
        private bool _flagToken;

        /// <summary>
        /// Returns false as Token should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToken()
        {
            return _flagToken;
        }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public CartAllOfPrice Price
        {
            get{ return _Price;}
            set
            {
                _Price = value;
                _flagPrice = true;
            }
        }
        private CartAllOfPrice _Price;
        private bool _flagPrice;

        /// <summary>
        /// Returns false as Price should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrice()
        {
            return _flagPrice;
        }
        /// <summary>
        /// All items within the cart
        /// </summary>
        /// <value>All items within the cart</value>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems
        {
            get{ return _LineItems;}
            set
            {
                _LineItems = value;
                _flagLineItems = true;
            }
        }
        private List<LineItem> _LineItems;
        private bool _flagLineItems;

        /// <summary>
        /// Returns false as LineItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLineItems()
        {
            return _flagLineItems;
        }
        /// <summary>
        /// A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers.
        /// </summary>
        /// <value>A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<CartAllOfErrors> Errors
        {
            get{ return _Errors;}
            set
            {
                _Errors = value;
                _flagErrors = true;
            }
        }
        private List<CartAllOfErrors> _Errors;
        private bool _flagErrors;

        /// <summary>
        /// Returns false as Errors should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrors()
        {
            return _flagErrors;
        }
        /// <summary>
        /// A list of all payment transactions associated with the current cart.
        /// </summary>
        /// <value>A list of all payment transactions associated with the current cart.</value>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public List<CartAllOfTransactions> Transactions
        {
            get{ return _Transactions;}
            set
            {
                _Transactions = value;
                _flagTransactions = true;
            }
        }
        private List<CartAllOfTransactions> _Transactions;
        private bool _flagTransactions;

        /// <summary>
        /// Returns false as Transactions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransactions()
        {
            return _flagTransactions;
        }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = true)]
        public bool Modified
        {
            get{ return _Modified;}
            set
            {
                _Modified = value;
                _flagModified = true;
            }
        }
        private bool _Modified;
        private bool _flagModified;

        /// <summary>
        /// Returns false as Modified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeModified()
        {
            return _flagModified;
        }
        /// <summary>
        /// A comment that can be added to the cart.
        /// </summary>
        /// <value>A comment that can be added to the cart.</value>
        [DataMember(Name = "customerComment", EmitDefaultValue = false)]
        public string CustomerComment
        {
            get{ return _CustomerComment;}
            set
            {
                _CustomerComment = value;
                _flagCustomerComment = true;
            }
        }
        private string _CustomerComment;
        private bool _flagCustomerComment;

        /// <summary>
        /// Returns false as CustomerComment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerComment()
        {
            return _flagCustomerComment;
        }
        /// <summary>
        /// An affiliate tracking code
        /// </summary>
        /// <value>An affiliate tracking code</value>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode
        {
            get{ return _AffiliateCode;}
            set
            {
                _AffiliateCode = value;
                _flagAffiliateCode = true;
            }
        }
        private string _AffiliateCode;
        private bool _flagAffiliateCode;

        /// <summary>
        /// Returns false as AffiliateCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAffiliateCode()
        {
            return _flagAffiliateCode;
        }
        /// <summary>
        /// A campaign tracking code
        /// </summary>
        /// <value>A campaign tracking code</value>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode
        {
            get{ return _CampaignCode;}
            set
            {
                _CampaignCode = value;
                _flagCampaignCode = true;
            }
        }
        private string _CampaignCode;
        private bool _flagCampaignCode;

        /// <summary>
        /// Returns false as CampaignCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignCode()
        {
            return _flagCampaignCode;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cart {\n");
            sb.Append("  ApiAlias: ").Append(ApiAlias).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  CustomerComment: ").Append(CustomerComment).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cart);
        }

        /// <summary>
        /// Returns true if Cart instances are equal
        /// </summary>
        /// <param name="input">Instance of Cart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cart input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiAlias == input.ApiAlias ||
                    (this.ApiAlias != null &&
                    this.ApiAlias.Equals(input.ApiAlias))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Modified == input.Modified ||
                    this.Modified.Equals(input.Modified)
                ) && 
                (
                    this.CustomerComment == input.CustomerComment ||
                    (this.CustomerComment != null &&
                    this.CustomerComment.Equals(input.CustomerComment))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiAlias != null)
                {
                    hashCode = (hashCode * 59) + this.ApiAlias.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                if (this.CustomerComment != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerComment.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Customer")]
    public partial class Customer : IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Customer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="groupId">groupId (required).</param>
        /// <param name="defaultPaymentMethodId">defaultPaymentMethodId (required).</param>
        /// <param name="salesChannelId">salesChannelId (required).</param>
        /// <param name="languageId">languageId (required).</param>
        /// <param name="lastPaymentMethodId">lastPaymentMethodId.</param>
        /// <param name="defaultBillingAddressId">defaultBillingAddressId (required).</param>
        /// <param name="defaultShippingAddressId">defaultShippingAddressId (required).</param>
        /// <param name="customerNumber">customerNumber (required).</param>
        /// <param name="salutationId">salutationId (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="company">company.</param>
        /// <param name="email">email (required).</param>
        /// <param name="title">title.</param>
        /// <param name="vatIds">vatIds.</param>
        /// <param name="affiliateCode">affiliateCode.</param>
        /// <param name="campaignCode">campaignCode.</param>
        /// <param name="active">active.</param>
        /// <param name="doubleOptInRegistration">doubleOptInRegistration.</param>
        /// <param name="doubleOptInEmailSentDate">doubleOptInEmailSentDate.</param>
        /// <param name="doubleOptInConfirmDate">doubleOptInConfirmDate.</param>
        /// <param name="hash">hash.</param>
        /// <param name="guest">guest.</param>
        /// <param name="firstLogin">firstLogin.</param>
        /// <param name="lastLogin">lastLogin.</param>
        /// <param name="newsletter">newsletter.</param>
        /// <param name="birthday">birthday.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="group">group.</param>
        /// <param name="defaultPaymentMethod">defaultPaymentMethod.</param>
        /// <param name="language">language.</param>
        /// <param name="lastPaymentMethod">lastPaymentMethod.</param>
        /// <param name="defaultBillingAddress">defaultBillingAddress.</param>
        /// <param name="defaultShippingAddress">defaultShippingAddress.</param>
        /// <param name="salutation">salutation.</param>
        /// <param name="addresses">addresses.</param>
        public Customer(string id = default(string), string groupId = default(string), string defaultPaymentMethodId = default(string), string salesChannelId = default(string), string languageId = default(string), string lastPaymentMethodId = default(string), string defaultBillingAddressId = default(string), string defaultShippingAddressId = default(string), string customerNumber = default(string), string salutationId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string email = default(string), string title = default(string), List<string> vatIds = default(List<string>), string affiliateCode = default(string), string campaignCode = default(string), bool active = default(bool), bool doubleOptInRegistration = default(bool), DateTime doubleOptInEmailSentDate = default(DateTime), DateTime doubleOptInConfirmDate = default(DateTime), string hash = default(string), bool guest = default(bool), DateTime firstLogin = default(DateTime), DateTime lastLogin = default(DateTime), bool newsletter = default(bool), string birthday = default(string), Object customFields = default(Object), CustomerGroup group = default(CustomerGroup), PaymentMethod defaultPaymentMethod = default(PaymentMethod), Language language = default(Language), PaymentMethod lastPaymentMethod = default(PaymentMethod), CustomerAddress defaultBillingAddress = default(CustomerAddress), CustomerAddress defaultShippingAddress = default(CustomerAddress), Salutation salutation = default(Salutation), CustomerAddress addresses = default(CustomerAddress))
        {
            // to ensure "groupId" is required (not null)
            if (groupId == null)
            {
                throw new ArgumentNullException("groupId is a required property for Customer and cannot be null");
            }
            this._GroupId = groupId;
            // to ensure "defaultPaymentMethodId" is required (not null)
            if (defaultPaymentMethodId == null)
            {
                throw new ArgumentNullException("defaultPaymentMethodId is a required property for Customer and cannot be null");
            }
            this._DefaultPaymentMethodId = defaultPaymentMethodId;
            // to ensure "salesChannelId" is required (not null)
            if (salesChannelId == null)
            {
                throw new ArgumentNullException("salesChannelId is a required property for Customer and cannot be null");
            }
            this._SalesChannelId = salesChannelId;
            // to ensure "languageId" is required (not null)
            if (languageId == null)
            {
                throw new ArgumentNullException("languageId is a required property for Customer and cannot be null");
            }
            this._LanguageId = languageId;
            // to ensure "defaultBillingAddressId" is required (not null)
            if (defaultBillingAddressId == null)
            {
                throw new ArgumentNullException("defaultBillingAddressId is a required property for Customer and cannot be null");
            }
            this._DefaultBillingAddressId = defaultBillingAddressId;
            // to ensure "defaultShippingAddressId" is required (not null)
            if (defaultShippingAddressId == null)
            {
                throw new ArgumentNullException("defaultShippingAddressId is a required property for Customer and cannot be null");
            }
            this._DefaultShippingAddressId = defaultShippingAddressId;
            // to ensure "customerNumber" is required (not null)
            if (customerNumber == null)
            {
                throw new ArgumentNullException("customerNumber is a required property for Customer and cannot be null");
            }
            this._CustomerNumber = customerNumber;
            // to ensure "salutationId" is required (not null)
            if (salutationId == null)
            {
                throw new ArgumentNullException("salutationId is a required property for Customer and cannot be null");
            }
            this._SalutationId = salutationId;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for Customer and cannot be null");
            }
            this._FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for Customer and cannot be null");
            }
            this._LastName = lastName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Customer and cannot be null");
            }
            this._Email = email;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._LastPaymentMethodId = lastPaymentMethodId;
            if (this.LastPaymentMethodId != null)
            {
                this._flagLastPaymentMethodId = true;
            }
            this._Company = company;
            if (this.Company != null)
            {
                this._flagCompany = true;
            }
            this._Title = title;
            if (this.Title != null)
            {
                this._flagTitle = true;
            }
            this._VatIds = vatIds;
            if (this.VatIds != null)
            {
                this._flagVatIds = true;
            }
            this._AffiliateCode = affiliateCode;
            if (this.AffiliateCode != null)
            {
                this._flagAffiliateCode = true;
            }
            this._CampaignCode = campaignCode;
            if (this.CampaignCode != null)
            {
                this._flagCampaignCode = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._DoubleOptInRegistration = doubleOptInRegistration;
            if (this.DoubleOptInRegistration != null)
            {
                this._flagDoubleOptInRegistration = true;
            }
            this._DoubleOptInEmailSentDate = doubleOptInEmailSentDate;
            if (this.DoubleOptInEmailSentDate != null)
            {
                this._flagDoubleOptInEmailSentDate = true;
            }
            this._DoubleOptInConfirmDate = doubleOptInConfirmDate;
            if (this.DoubleOptInConfirmDate != null)
            {
                this._flagDoubleOptInConfirmDate = true;
            }
            this._Hash = hash;
            if (this.Hash != null)
            {
                this._flagHash = true;
            }
            this._Guest = guest;
            if (this.Guest != null)
            {
                this._flagGuest = true;
            }
            this._FirstLogin = firstLogin;
            if (this.FirstLogin != null)
            {
                this._flagFirstLogin = true;
            }
            this._LastLogin = lastLogin;
            if (this.LastLogin != null)
            {
                this._flagLastLogin = true;
            }
            this._Newsletter = newsletter;
            if (this.Newsletter != null)
            {
                this._flagNewsletter = true;
            }
            this._Birthday = birthday;
            if (this.Birthday != null)
            {
                this._flagBirthday = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._Group = group;
            if (this.Group != null)
            {
                this._flagGroup = true;
            }
            this._DefaultPaymentMethod = defaultPaymentMethod;
            if (this.DefaultPaymentMethod != null)
            {
                this._flagDefaultPaymentMethod = true;
            }
            this._Language = language;
            if (this.Language != null)
            {
                this._flagLanguage = true;
            }
            this._LastPaymentMethod = lastPaymentMethod;
            if (this.LastPaymentMethod != null)
            {
                this._flagLastPaymentMethod = true;
            }
            this._DefaultBillingAddress = defaultBillingAddress;
            if (this.DefaultBillingAddress != null)
            {
                this._flagDefaultBillingAddress = true;
            }
            this._DefaultShippingAddress = defaultShippingAddress;
            if (this.DefaultShippingAddress != null)
            {
                this._flagDefaultShippingAddress = true;
            }
            this._Salutation = salutation;
            if (this.Salutation != null)
            {
                this._flagSalutation = true;
            }
            this._Addresses = addresses;
            if (this.Addresses != null)
            {
                this._flagAddresses = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", IsRequired = true, EmitDefaultValue = false)]
        public string GroupId
        {
            get{ return _GroupId;}
            set
            {
                _GroupId = value;
                _flagGroupId = true;
            }
        }
        private string _GroupId;
        private bool _flagGroupId;

        /// <summary>
        /// Returns false as GroupId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupId()
        {
            return _flagGroupId;
        }
        /// <summary>
        /// Gets or Sets DefaultPaymentMethodId
        /// </summary>
        [DataMember(Name = "defaultPaymentMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string DefaultPaymentMethodId
        {
            get{ return _DefaultPaymentMethodId;}
            set
            {
                _DefaultPaymentMethodId = value;
                _flagDefaultPaymentMethodId = true;
            }
        }
        private string _DefaultPaymentMethodId;
        private bool _flagDefaultPaymentMethodId;

        /// <summary>
        /// Returns false as DefaultPaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentMethodId()
        {
            return _flagDefaultPaymentMethodId;
        }
        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [DataMember(Name = "salesChannelId", IsRequired = true, EmitDefaultValue = false)]
        public string SalesChannelId
        {
            get{ return _SalesChannelId;}
            set
            {
                _SalesChannelId = value;
                _flagSalesChannelId = true;
            }
        }
        private string _SalesChannelId;
        private bool _flagSalesChannelId;

        /// <summary>
        /// Returns false as SalesChannelId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannelId()
        {
            return _flagSalesChannelId;
        }
        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Gets or Sets LastPaymentMethodId
        /// </summary>
        [DataMember(Name = "lastPaymentMethodId", EmitDefaultValue = false)]
        public string LastPaymentMethodId
        {
            get{ return _LastPaymentMethodId;}
            set
            {
                _LastPaymentMethodId = value;
                _flagLastPaymentMethodId = true;
            }
        }
        private string _LastPaymentMethodId;
        private bool _flagLastPaymentMethodId;

        /// <summary>
        /// Returns false as LastPaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastPaymentMethodId()
        {
            return _flagLastPaymentMethodId;
        }
        /// <summary>
        /// Gets or Sets DefaultBillingAddressId
        /// </summary>
        [DataMember(Name = "defaultBillingAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string DefaultBillingAddressId
        {
            get{ return _DefaultBillingAddressId;}
            set
            {
                _DefaultBillingAddressId = value;
                _flagDefaultBillingAddressId = true;
            }
        }
        private string _DefaultBillingAddressId;
        private bool _flagDefaultBillingAddressId;

        /// <summary>
        /// Returns false as DefaultBillingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultBillingAddressId()
        {
            return _flagDefaultBillingAddressId;
        }
        /// <summary>
        /// Gets or Sets DefaultShippingAddressId
        /// </summary>
        [DataMember(Name = "defaultShippingAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string DefaultShippingAddressId
        {
            get{ return _DefaultShippingAddressId;}
            set
            {
                _DefaultShippingAddressId = value;
                _flagDefaultShippingAddressId = true;
            }
        }
        private string _DefaultShippingAddressId;
        private bool _flagDefaultShippingAddressId;

        /// <summary>
        /// Returns false as DefaultShippingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultShippingAddressId()
        {
            return _flagDefaultShippingAddressId;
        }
        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerNumber
        {
            get{ return _CustomerNumber;}
            set
            {
                _CustomerNumber = value;
                _flagCustomerNumber = true;
            }
        }
        private string _CustomerNumber;
        private bool _flagCustomerNumber;

        /// <summary>
        /// Returns false as CustomerNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerNumber()
        {
            return _flagCustomerNumber;
        }
        /// <summary>
        /// Gets or Sets SalutationId
        /// </summary>
        [DataMember(Name = "salutationId", IsRequired = true, EmitDefaultValue = false)]
        public string SalutationId
        {
            get{ return _SalutationId;}
            set
            {
                _SalutationId = value;
                _flagSalutationId = true;
            }
        }
        private string _SalutationId;
        private bool _flagSalutationId;

        /// <summary>
        /// Returns false as SalutationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalutationId()
        {
            return _flagSalutationId;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company
        {
            get{ return _Company;}
            set
            {
                _Company = value;
                _flagCompany = true;
            }
        }
        private string _Company;
        private bool _flagCompany;

        /// <summary>
        /// Returns false as Company should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompany()
        {
            return _flagCompany;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private string _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title
        {
            get{ return _Title;}
            set
            {
                _Title = value;
                _flagTitle = true;
            }
        }
        private string _Title;
        private bool _flagTitle;

        /// <summary>
        /// Returns false as Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTitle()
        {
            return _flagTitle;
        }
        /// <summary>
        /// Gets or Sets VatIds
        /// </summary>
        [DataMember(Name = "vatIds", EmitDefaultValue = false)]
        public List<string> VatIds
        {
            get{ return _VatIds;}
            set
            {
                _VatIds = value;
                _flagVatIds = true;
            }
        }
        private List<string> _VatIds;
        private bool _flagVatIds;

        /// <summary>
        /// Returns false as VatIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatIds()
        {
            return _flagVatIds;
        }
        /// <summary>
        /// Gets or Sets AffiliateCode
        /// </summary>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode
        {
            get{ return _AffiliateCode;}
            set
            {
                _AffiliateCode = value;
                _flagAffiliateCode = true;
            }
        }
        private string _AffiliateCode;
        private bool _flagAffiliateCode;

        /// <summary>
        /// Returns false as AffiliateCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAffiliateCode()
        {
            return _flagAffiliateCode;
        }
        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode
        {
            get{ return _CampaignCode;}
            set
            {
                _CampaignCode = value;
                _flagCampaignCode = true;
            }
        }
        private string _CampaignCode;
        private bool _flagCampaignCode;

        /// <summary>
        /// Returns false as CampaignCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignCode()
        {
            return _flagCampaignCode;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInRegistration
        /// </summary>
        [DataMember(Name = "doubleOptInRegistration", EmitDefaultValue = true)]
        public bool DoubleOptInRegistration
        {
            get{ return _DoubleOptInRegistration;}
            set
            {
                _DoubleOptInRegistration = value;
                _flagDoubleOptInRegistration = true;
            }
        }
        private bool _DoubleOptInRegistration;
        private bool _flagDoubleOptInRegistration;

        /// <summary>
        /// Returns false as DoubleOptInRegistration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInRegistration()
        {
            return _flagDoubleOptInRegistration;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInEmailSentDate
        /// </summary>
        [DataMember(Name = "doubleOptInEmailSentDate", EmitDefaultValue = false)]
        public DateTime DoubleOptInEmailSentDate
        {
            get{ return _DoubleOptInEmailSentDate;}
            set
            {
                _DoubleOptInEmailSentDate = value;
                _flagDoubleOptInEmailSentDate = true;
            }
        }
        private DateTime _DoubleOptInEmailSentDate;
        private bool _flagDoubleOptInEmailSentDate;

        /// <summary>
        /// Returns false as DoubleOptInEmailSentDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInEmailSentDate()
        {
            return _flagDoubleOptInEmailSentDate;
        }
        /// <summary>
        /// Gets or Sets DoubleOptInConfirmDate
        /// </summary>
        [DataMember(Name = "doubleOptInConfirmDate", EmitDefaultValue = false)]
        public DateTime DoubleOptInConfirmDate
        {
            get{ return _DoubleOptInConfirmDate;}
            set
            {
                _DoubleOptInConfirmDate = value;
                _flagDoubleOptInConfirmDate = true;
            }
        }
        private DateTime _DoubleOptInConfirmDate;
        private bool _flagDoubleOptInConfirmDate;

        /// <summary>
        /// Returns false as DoubleOptInConfirmDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoubleOptInConfirmDate()
        {
            return _flagDoubleOptInConfirmDate;
        }
        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash
        {
            get{ return _Hash;}
            set
            {
                _Hash = value;
                _flagHash = true;
            }
        }
        private string _Hash;
        private bool _flagHash;

        /// <summary>
        /// Returns false as Hash should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHash()
        {
            return _flagHash;
        }
        /// <summary>
        /// Gets or Sets Guest
        /// </summary>
        [DataMember(Name = "guest", EmitDefaultValue = true)]
        public bool Guest
        {
            get{ return _Guest;}
            set
            {
                _Guest = value;
                _flagGuest = true;
            }
        }
        private bool _Guest;
        private bool _flagGuest;

        /// <summary>
        /// Returns false as Guest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGuest()
        {
            return _flagGuest;
        }
        /// <summary>
        /// Gets or Sets FirstLogin
        /// </summary>
        [DataMember(Name = "firstLogin", EmitDefaultValue = false)]
        public DateTime FirstLogin
        {
            get{ return _FirstLogin;}
            set
            {
                _FirstLogin = value;
                _flagFirstLogin = true;
            }
        }
        private DateTime _FirstLogin;
        private bool _flagFirstLogin;

        /// <summary>
        /// Returns false as FirstLogin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstLogin()
        {
            return _flagFirstLogin;
        }
        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "lastLogin", EmitDefaultValue = false)]
        public DateTime LastLogin
        {
            get{ return _LastLogin;}
            set
            {
                _LastLogin = value;
                _flagLastLogin = true;
            }
        }
        private DateTime _LastLogin;
        private bool _flagLastLogin;

        /// <summary>
        /// Returns false as LastLogin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastLogin()
        {
            return _flagLastLogin;
        }
        /// <summary>
        /// Gets or Sets Newsletter
        /// </summary>
        [DataMember(Name = "newsletter", EmitDefaultValue = true)]
        public bool Newsletter
        {
            get{ return _Newsletter;}
            set
            {
                _Newsletter = value;
                _flagNewsletter = true;
            }
        }
        private bool _Newsletter;
        private bool _flagNewsletter;

        /// <summary>
        /// Returns false as Newsletter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewsletter()
        {
            return _flagNewsletter;
        }
        /// <summary>
        /// Gets or Sets Birthday
        /// </summary>
        [DataMember(Name = "birthday", EmitDefaultValue = false)]
        public string Birthday
        {
            get{ return _Birthday;}
            set
            {
                _Birthday = value;
                _flagBirthday = true;
            }
        }
        private string _Birthday;
        private bool _flagBirthday;

        /// <summary>
        /// Returns false as Birthday should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBirthday()
        {
            return _flagBirthday;
        }
        /// <summary>
        /// Gets or Sets LastOrderDate
        /// </summary>
        [DataMember(Name = "lastOrderDate", EmitDefaultValue = false)]
        public DateTime LastOrderDate { get; private set; }

        /// <summary>
        /// Returns false as LastOrderDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastOrderDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OrderCount
        /// </summary>
        [DataMember(Name = "orderCount", EmitDefaultValue = false)]
        public long OrderCount { get; private set; }

        /// <summary>
        /// Returns false as OrderCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name = "tagIds", EmitDefaultValue = false)]
        public List<string> TagIds { get; private set; }

        /// <summary>
        /// Returns false as TagIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTagIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public CustomerGroup Group
        {
            get{ return _Group;}
            set
            {
                _Group = value;
                _flagGroup = true;
            }
        }
        private CustomerGroup _Group;
        private bool _flagGroup;

        /// <summary>
        /// Returns false as Group should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroup()
        {
            return _flagGroup;
        }
        /// <summary>
        /// Gets or Sets DefaultPaymentMethod
        /// </summary>
        [DataMember(Name = "defaultPaymentMethod", EmitDefaultValue = false)]
        public PaymentMethod DefaultPaymentMethod
        {
            get{ return _DefaultPaymentMethod;}
            set
            {
                _DefaultPaymentMethod = value;
                _flagDefaultPaymentMethod = true;
            }
        }
        private PaymentMethod _DefaultPaymentMethod;
        private bool _flagDefaultPaymentMethod;

        /// <summary>
        /// Returns false as DefaultPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentMethod()
        {
            return _flagDefaultPaymentMethod;
        }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language
        {
            get{ return _Language;}
            set
            {
                _Language = value;
                _flagLanguage = true;
            }
        }
        private Language _Language;
        private bool _flagLanguage;

        /// <summary>
        /// Returns false as Language should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguage()
        {
            return _flagLanguage;
        }
        /// <summary>
        /// Gets or Sets LastPaymentMethod
        /// </summary>
        [DataMember(Name = "lastPaymentMethod", EmitDefaultValue = false)]
        public PaymentMethod LastPaymentMethod
        {
            get{ return _LastPaymentMethod;}
            set
            {
                _LastPaymentMethod = value;
                _flagLastPaymentMethod = true;
            }
        }
        private PaymentMethod _LastPaymentMethod;
        private bool _flagLastPaymentMethod;

        /// <summary>
        /// Returns false as LastPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastPaymentMethod()
        {
            return _flagLastPaymentMethod;
        }
        /// <summary>
        /// Gets or Sets DefaultBillingAddress
        /// </summary>
        [DataMember(Name = "defaultBillingAddress", EmitDefaultValue = false)]
        public CustomerAddress DefaultBillingAddress
        {
            get{ return _DefaultBillingAddress;}
            set
            {
                _DefaultBillingAddress = value;
                _flagDefaultBillingAddress = true;
            }
        }
        private CustomerAddress _DefaultBillingAddress;
        private bool _flagDefaultBillingAddress;

        /// <summary>
        /// Returns false as DefaultBillingAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultBillingAddress()
        {
            return _flagDefaultBillingAddress;
        }
        /// <summary>
        /// Gets or Sets DefaultShippingAddress
        /// </summary>
        [DataMember(Name = "defaultShippingAddress", EmitDefaultValue = false)]
        public CustomerAddress DefaultShippingAddress
        {
            get{ return _DefaultShippingAddress;}
            set
            {
                _DefaultShippingAddress = value;
                _flagDefaultShippingAddress = true;
            }
        }
        private CustomerAddress _DefaultShippingAddress;
        private bool _flagDefaultShippingAddress;

        /// <summary>
        /// Returns false as DefaultShippingAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultShippingAddress()
        {
            return _flagDefaultShippingAddress;
        }
        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name = "salutation", EmitDefaultValue = false)]
        public Salutation Salutation
        {
            get{ return _Salutation;}
            set
            {
                _Salutation = value;
                _flagSalutation = true;
            }
        }
        private Salutation _Salutation;
        private bool _flagSalutation;

        /// <summary>
        /// Returns false as Salutation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalutation()
        {
            return _flagSalutation;
        }
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public CustomerAddress Addresses
        {
            get{ return _Addresses;}
            set
            {
                _Addresses = value;
                _flagAddresses = true;
            }
        }
        private CustomerAddress _Addresses;
        private bool _flagAddresses;

        /// <summary>
        /// Returns false as Addresses should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddresses()
        {
            return _flagAddresses;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  DefaultPaymentMethodId: ").Append(DefaultPaymentMethodId).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  LastPaymentMethodId: ").Append(LastPaymentMethodId).Append("\n");
            sb.Append("  DefaultBillingAddressId: ").Append(DefaultBillingAddressId).Append("\n");
            sb.Append("  DefaultShippingAddressId: ").Append(DefaultShippingAddressId).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  SalutationId: ").Append(SalutationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  VatIds: ").Append(VatIds).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DoubleOptInRegistration: ").Append(DoubleOptInRegistration).Append("\n");
            sb.Append("  DoubleOptInEmailSentDate: ").Append(DoubleOptInEmailSentDate).Append("\n");
            sb.Append("  DoubleOptInConfirmDate: ").Append(DoubleOptInConfirmDate).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  FirstLogin: ").Append(FirstLogin).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Newsletter: ").Append(Newsletter).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  LastOrderDate: ").Append(LastOrderDate).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  DefaultPaymentMethod: ").Append(DefaultPaymentMethod).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastPaymentMethod: ").Append(LastPaymentMethod).Append("\n");
            sb.Append("  DefaultBillingAddress: ").Append(DefaultBillingAddress).Append("\n");
            sb.Append("  DefaultShippingAddress: ").Append(DefaultShippingAddress).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.DefaultPaymentMethodId == input.DefaultPaymentMethodId ||
                    (this.DefaultPaymentMethodId != null &&
                    this.DefaultPaymentMethodId.Equals(input.DefaultPaymentMethodId))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.LastPaymentMethodId == input.LastPaymentMethodId ||
                    (this.LastPaymentMethodId != null &&
                    this.LastPaymentMethodId.Equals(input.LastPaymentMethodId))
                ) && 
                (
                    this.DefaultBillingAddressId == input.DefaultBillingAddressId ||
                    (this.DefaultBillingAddressId != null &&
                    this.DefaultBillingAddressId.Equals(input.DefaultBillingAddressId))
                ) && 
                (
                    this.DefaultShippingAddressId == input.DefaultShippingAddressId ||
                    (this.DefaultShippingAddressId != null &&
                    this.DefaultShippingAddressId.Equals(input.DefaultShippingAddressId))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.SalutationId == input.SalutationId ||
                    (this.SalutationId != null &&
                    this.SalutationId.Equals(input.SalutationId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.VatIds == input.VatIds ||
                    this.VatIds != null &&
                    input.VatIds != null &&
                    this.VatIds.SequenceEqual(input.VatIds)
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.DoubleOptInRegistration == input.DoubleOptInRegistration ||
                    this.DoubleOptInRegistration.Equals(input.DoubleOptInRegistration)
                ) && 
                (
                    this.DoubleOptInEmailSentDate == input.DoubleOptInEmailSentDate ||
                    (this.DoubleOptInEmailSentDate != null &&
                    this.DoubleOptInEmailSentDate.Equals(input.DoubleOptInEmailSentDate))
                ) && 
                (
                    this.DoubleOptInConfirmDate == input.DoubleOptInConfirmDate ||
                    (this.DoubleOptInConfirmDate != null &&
                    this.DoubleOptInConfirmDate.Equals(input.DoubleOptInConfirmDate))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Guest == input.Guest ||
                    this.Guest.Equals(input.Guest)
                ) && 
                (
                    this.FirstLogin == input.FirstLogin ||
                    (this.FirstLogin != null &&
                    this.FirstLogin.Equals(input.FirstLogin))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.Newsletter == input.Newsletter ||
                    this.Newsletter.Equals(input.Newsletter)
                ) && 
                (
                    this.Birthday == input.Birthday ||
                    (this.Birthday != null &&
                    this.Birthday.Equals(input.Birthday))
                ) && 
                (
                    this.LastOrderDate == input.LastOrderDate ||
                    (this.LastOrderDate != null &&
                    this.LastOrderDate.Equals(input.LastOrderDate))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    this.OrderCount.Equals(input.OrderCount)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    input.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.DefaultPaymentMethod == input.DefaultPaymentMethod ||
                    (this.DefaultPaymentMethod != null &&
                    this.DefaultPaymentMethod.Equals(input.DefaultPaymentMethod))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LastPaymentMethod == input.LastPaymentMethod ||
                    (this.LastPaymentMethod != null &&
                    this.LastPaymentMethod.Equals(input.LastPaymentMethod))
                ) && 
                (
                    this.DefaultBillingAddress == input.DefaultBillingAddress ||
                    (this.DefaultBillingAddress != null &&
                    this.DefaultBillingAddress.Equals(input.DefaultBillingAddress))
                ) && 
                (
                    this.DefaultShippingAddress == input.DefaultShippingAddress ||
                    (this.DefaultShippingAddress != null &&
                    this.DefaultShippingAddress.Equals(input.DefaultShippingAddress))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    (this.Addresses != null &&
                    this.Addresses.Equals(input.Addresses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.DefaultPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPaymentMethodId.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.LastPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentMethodId.GetHashCode();
                }
                if (this.DefaultBillingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultBillingAddressId.GetHashCode();
                }
                if (this.DefaultShippingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultShippingAddressId.GetHashCode();
                }
                if (this.CustomerNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                }
                if (this.SalutationId != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.VatIds != null)
                {
                    hashCode = (hashCode * 59) + this.VatIds.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.DoubleOptInRegistration.GetHashCode();
                if (this.DoubleOptInEmailSentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DoubleOptInEmailSentDate.GetHashCode();
                }
                if (this.DoubleOptInConfirmDate != null)
                {
                    hashCode = (hashCode * 59) + this.DoubleOptInConfirmDate.GetHashCode();
                }
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Guest.GetHashCode();
                if (this.FirstLogin != null)
                {
                    hashCode = (hashCode * 59) + this.FirstLogin.GetHashCode();
                }
                if (this.LastLogin != null)
                {
                    hashCode = (hashCode * 59) + this.LastLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Newsletter.GetHashCode();
                if (this.Birthday != null)
                {
                    hashCode = (hashCode * 59) + this.Birthday.GetHashCode();
                }
                if (this.LastOrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastOrderDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderCount.GetHashCode();
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.TagIds != null)
                {
                    hashCode = (hashCode * 59) + this.TagIds.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.DefaultPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPaymentMethod.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.LastPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentMethod.GetHashCode();
                }
                if (this.DefaultBillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultBillingAddress.GetHashCode();
                }
                if (this.DefaultShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultShippingAddress.GetHashCode();
                }
                if (this.Salutation != null)
                {
                    hashCode = (hashCode * 59) + this.Salutation.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // GroupId (string) pattern
            Regex regexGroupId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexGroupId.Match(this.GroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupId, must match a pattern of " + regexGroupId, new [] { "GroupId" });
            }

            // DefaultPaymentMethodId (string) pattern
            Regex regexDefaultPaymentMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDefaultPaymentMethodId.Match(this.DefaultPaymentMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultPaymentMethodId, must match a pattern of " + regexDefaultPaymentMethodId, new [] { "DefaultPaymentMethodId" });
            }

            // SalesChannelId (string) pattern
            Regex regexSalesChannelId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalesChannelId.Match(this.SalesChannelId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesChannelId, must match a pattern of " + regexSalesChannelId, new [] { "SalesChannelId" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // LastPaymentMethodId (string) pattern
            Regex regexLastPaymentMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLastPaymentMethodId.Match(this.LastPaymentMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastPaymentMethodId, must match a pattern of " + regexLastPaymentMethodId, new [] { "LastPaymentMethodId" });
            }

            // DefaultBillingAddressId (string) pattern
            Regex regexDefaultBillingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDefaultBillingAddressId.Match(this.DefaultBillingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultBillingAddressId, must match a pattern of " + regexDefaultBillingAddressId, new [] { "DefaultBillingAddressId" });
            }

            // DefaultShippingAddressId (string) pattern
            Regex regexDefaultShippingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDefaultShippingAddressId.Match(this.DefaultShippingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultShippingAddressId, must match a pattern of " + regexDefaultShippingAddressId, new [] { "DefaultShippingAddressId" });
            }

            // SalutationId (string) pattern
            Regex regexSalutationId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalutationId.Match(this.SalutationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalutationId, must match a pattern of " + regexSalutationId, new [] { "SalutationId" });
            }

            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Selected payment method
    /// </summary>
    [DataContract(Name = "SalesChannelContext_allOf_paymentMethod")]
    public partial class SalesChannelContextAllOfPaymentMethod : IEquatable<SalesChannelContextAllOfPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOfPaymentMethod" /> class.
        /// </summary>
        /// <param name="pluginId">pluginId.</param>
        /// <param name="handlerIdentifier">handlerIdentifier.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="position">position.</param>
        /// <param name="active">active.</param>
        /// <param name="availabilityRuleId">availabilityRuleId.</param>
        /// <param name="mediaId">mediaId.</param>
        /// <param name="formattedHandlerIdentifier">formattedHandlerIdentifier.</param>
        public SalesChannelContextAllOfPaymentMethod(string pluginId = default(string), string handlerIdentifier = default(string), string name = default(string), string description = default(string), int position = default(int), bool active = default(bool), string availabilityRuleId = default(string), string mediaId = default(string), string formattedHandlerIdentifier = default(string))
        {
            this.PluginId = pluginId;
            this.HandlerIdentifier = handlerIdentifier;
            this.Name = name;
            this.Description = description;
            this.Position = position;
            this.Active = active;
            this.AvailabilityRuleId = availabilityRuleId;
            this.MediaId = mediaId;
            this.FormattedHandlerIdentifier = formattedHandlerIdentifier;
        }

        /// <summary>
        /// Gets or Sets PluginId
        /// </summary>
        [DataMember(Name = "pluginId", EmitDefaultValue = false)]
        public string PluginId { get; set; }

        /// <summary>
        /// Gets or Sets HandlerIdentifier
        /// </summary>
        [DataMember(Name = "handlerIdentifier", EmitDefaultValue = false)]
        public string HandlerIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AvailabilityRuleId
        /// </summary>
        [DataMember(Name = "availabilityRuleId", EmitDefaultValue = false)]
        public string AvailabilityRuleId { get; set; }

        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "mediaId", EmitDefaultValue = false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Gets or Sets FormattedHandlerIdentifier
        /// </summary>
        [DataMember(Name = "formattedHandlerIdentifier", EmitDefaultValue = false)]
        public string FormattedHandlerIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOfPaymentMethod {\n");
            sb.Append("  PluginId: ").Append(PluginId).Append("\n");
            sb.Append("  HandlerIdentifier: ").Append(HandlerIdentifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AvailabilityRuleId: ").Append(AvailabilityRuleId).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  FormattedHandlerIdentifier: ").Append(FormattedHandlerIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannelContextAllOfPaymentMethod);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOfPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOfPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOfPaymentMethod input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PluginId == input.PluginId ||
                    (this.PluginId != null &&
                    this.PluginId.Equals(input.PluginId))
                ) && 
                (
                    this.HandlerIdentifier == input.HandlerIdentifier ||
                    (this.HandlerIdentifier != null &&
                    this.HandlerIdentifier.Equals(input.HandlerIdentifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.AvailabilityRuleId == input.AvailabilityRuleId ||
                    (this.AvailabilityRuleId != null &&
                    this.AvailabilityRuleId.Equals(input.AvailabilityRuleId))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.FormattedHandlerIdentifier == input.FormattedHandlerIdentifier ||
                    (this.FormattedHandlerIdentifier != null &&
                    this.FormattedHandlerIdentifier.Equals(input.FormattedHandlerIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PluginId != null)
                {
                    hashCode = (hashCode * 59) + this.PluginId.GetHashCode();
                }
                if (this.HandlerIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HandlerIdentifier.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.AvailabilityRuleId != null)
                {
                    hashCode = (hashCode * 59) + this.AvailabilityRuleId.GetHashCode();
                }
                if (this.MediaId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaId.GetHashCode();
                }
                if (this.FormattedHandlerIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.FormattedHandlerIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

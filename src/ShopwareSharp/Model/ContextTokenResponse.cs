/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ContextTokenResponse
    /// </summary>
    [DataContract(Name = "ContextTokenResponse")]
    public partial class ContextTokenResponse : IEquatable<ContextTokenResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextTokenResponse" /> class.
        /// </summary>
        /// <param name="contextToken">Context token identifying the current user session..</param>
        public ContextTokenResponse(string contextToken = default(string))
        {
            this._ContextToken = contextToken;
            if (this.ContextToken != null)
            {
                this._flagContextToken = true;
            }
        }

        /// <summary>
        /// Context token identifying the current user session.
        /// </summary>
        /// <value>Context token identifying the current user session.</value>
        [DataMember(Name = "contextToken", EmitDefaultValue = false)]
        public string ContextToken
        {
            get{ return _ContextToken;}
            set
            {
                _ContextToken = value;
                _flagContextToken = true;
            }
        }
        private string _ContextToken;
        private bool _flagContextToken;

        /// <summary>
        /// Returns false as ContextToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContextToken()
        {
            return _flagContextToken;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContextTokenResponse {\n");
            sb.Append("  ContextToken: ").Append(ContextToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContextTokenResponse);
        }

        /// <summary>
        /// Returns true if ContextTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ContextTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContextTokenResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContextToken == input.ContextToken ||
                    (this.ContextToken != null &&
                    this.ContextToken.Equals(input.ContextToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContextToken != null)
                {
                    hashCode = (hashCode * 59) + this.ContextToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

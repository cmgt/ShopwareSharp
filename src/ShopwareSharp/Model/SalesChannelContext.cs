/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// SalesChannelContext
    /// </summary>
    [DataContract(Name = "SalesChannelContext")]
    public partial class SalesChannelContext : IEquatable<SalesChannelContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContext" /> class.
        /// </summary>
        /// <param name="apiAlias">Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias)..</param>
        /// <param name="token">Context the user session.</param>
        /// <param name="currentCustomerGroup">currentCustomerGroup.</param>
        /// <param name="fallbackCustomerGroup">fallbackCustomerGroup.</param>
        /// <param name="currency">currency.</param>
        /// <param name="salesChannel">salesChannel.</param>
        /// <param name="taxRules">Currently active tax rules and/or rates.</param>
        /// <param name="customer">customer.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="context">context.</param>
        public SalesChannelContext(string apiAlias = default(string), string token = default(string), SalesChannelContextAllOfCurrentCustomerGroup currentCustomerGroup = default(SalesChannelContextAllOfCurrentCustomerGroup), SalesChannelContextAllOfFallbackCustomerGroup fallbackCustomerGroup = default(SalesChannelContextAllOfFallbackCustomerGroup), SalesChannelContextAllOfCurrency currency = default(SalesChannelContextAllOfCurrency), SalesChannelContextAllOfSalesChannel salesChannel = default(SalesChannelContextAllOfSalesChannel), List<SalesChannelContextAllOfTaxRules> taxRules = default(List<SalesChannelContextAllOfTaxRules>), SalesChannelContextAllOfCustomer customer = default(SalesChannelContextAllOfCustomer), SalesChannelContextAllOfPaymentMethod paymentMethod = default(SalesChannelContextAllOfPaymentMethod), SalesChannelContextAllOfShippingMethod shippingMethod = default(SalesChannelContextAllOfShippingMethod), SalesChannelContextAllOfContext context = default(SalesChannelContextAllOfContext))
        {
            this._ApiAlias = apiAlias;
            if (this.ApiAlias != null)
            {
                this._flagApiAlias = true;
            }
            this._Token = token;
            if (this.Token != null)
            {
                this._flagToken = true;
            }
            this._CurrentCustomerGroup = currentCustomerGroup;
            if (this.CurrentCustomerGroup != null)
            {
                this._flagCurrentCustomerGroup = true;
            }
            this._FallbackCustomerGroup = fallbackCustomerGroup;
            if (this.FallbackCustomerGroup != null)
            {
                this._flagFallbackCustomerGroup = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._SalesChannel = salesChannel;
            if (this.SalesChannel != null)
            {
                this._flagSalesChannel = true;
            }
            this._TaxRules = taxRules;
            if (this.TaxRules != null)
            {
                this._flagTaxRules = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._PaymentMethod = paymentMethod;
            if (this.PaymentMethod != null)
            {
                this._flagPaymentMethod = true;
            }
            this._ShippingMethod = shippingMethod;
            if (this.ShippingMethod != null)
            {
                this._flagShippingMethod = true;
            }
            this._Context = context;
            if (this.Context != null)
            {
                this._flagContext = true;
            }
        }

        /// <summary>
        /// Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias).
        /// </summary>
        /// <value>Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias).</value>
        [DataMember(Name = "apiAlias", EmitDefaultValue = false)]
        public string ApiAlias
        {
            get{ return _ApiAlias;}
            set
            {
                _ApiAlias = value;
                _flagApiAlias = true;
            }
        }
        private string _ApiAlias;
        private bool _flagApiAlias;

        /// <summary>
        /// Returns false as ApiAlias should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiAlias()
        {
            return _flagApiAlias;
        }
        /// <summary>
        /// Context the user session
        /// </summary>
        /// <value>Context the user session</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token
        {
            get{ return _Token;}
            set
            {
                _Token = value;
                _flagToken = true;
            }
        }
        private string _Token;
        private bool _flagToken;

        /// <summary>
        /// Returns false as Token should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToken()
        {
            return _flagToken;
        }
        /// <summary>
        /// Gets or Sets CurrentCustomerGroup
        /// </summary>
        [DataMember(Name = "currentCustomerGroup", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCurrentCustomerGroup CurrentCustomerGroup
        {
            get{ return _CurrentCustomerGroup;}
            set
            {
                _CurrentCustomerGroup = value;
                _flagCurrentCustomerGroup = true;
            }
        }
        private SalesChannelContextAllOfCurrentCustomerGroup _CurrentCustomerGroup;
        private bool _flagCurrentCustomerGroup;

        /// <summary>
        /// Returns false as CurrentCustomerGroup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrentCustomerGroup()
        {
            return _flagCurrentCustomerGroup;
        }
        /// <summary>
        /// Gets or Sets FallbackCustomerGroup
        /// </summary>
        [DataMember(Name = "fallbackCustomerGroup", EmitDefaultValue = false)]
        public SalesChannelContextAllOfFallbackCustomerGroup FallbackCustomerGroup
        {
            get{ return _FallbackCustomerGroup;}
            set
            {
                _FallbackCustomerGroup = value;
                _flagFallbackCustomerGroup = true;
            }
        }
        private SalesChannelContextAllOfFallbackCustomerGroup _FallbackCustomerGroup;
        private bool _flagFallbackCustomerGroup;

        /// <summary>
        /// Returns false as FallbackCustomerGroup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFallbackCustomerGroup()
        {
            return _flagFallbackCustomerGroup;
        }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCurrency Currency
        {
            get{ return _Currency;}
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private SalesChannelContextAllOfCurrency _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// Gets or Sets SalesChannel
        /// </summary>
        [DataMember(Name = "salesChannel", EmitDefaultValue = false)]
        public SalesChannelContextAllOfSalesChannel SalesChannel
        {
            get{ return _SalesChannel;}
            set
            {
                _SalesChannel = value;
                _flagSalesChannel = true;
            }
        }
        private SalesChannelContextAllOfSalesChannel _SalesChannel;
        private bool _flagSalesChannel;

        /// <summary>
        /// Returns false as SalesChannel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannel()
        {
            return _flagSalesChannel;
        }
        /// <summary>
        /// Currently active tax rules and/or rates
        /// </summary>
        /// <value>Currently active tax rules and/or rates</value>
        [DataMember(Name = "taxRules", EmitDefaultValue = false)]
        public List<SalesChannelContextAllOfTaxRules> TaxRules
        {
            get{ return _TaxRules;}
            set
            {
                _TaxRules = value;
                _flagTaxRules = true;
            }
        }
        private List<SalesChannelContextAllOfTaxRules> _TaxRules;
        private bool _flagTaxRules;

        /// <summary>
        /// Returns false as TaxRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxRules()
        {
            return _flagTaxRules;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCustomer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private SalesChannelContextAllOfCustomer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public SalesChannelContextAllOfPaymentMethod PaymentMethod
        {
            get{ return _PaymentMethod;}
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }
        private SalesChannelContextAllOfPaymentMethod _PaymentMethod;
        private bool _flagPaymentMethod;

        /// <summary>
        /// Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }
        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "shippingMethod", EmitDefaultValue = false)]
        public SalesChannelContextAllOfShippingMethod ShippingMethod
        {
            get{ return _ShippingMethod;}
            set
            {
                _ShippingMethod = value;
                _flagShippingMethod = true;
            }
        }
        private SalesChannelContextAllOfShippingMethod _ShippingMethod;
        private bool _flagShippingMethod;

        /// <summary>
        /// Returns false as ShippingMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethod()
        {
            return _flagShippingMethod;
        }
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public SalesChannelContextAllOfContext Context
        {
            get{ return _Context;}
            set
            {
                _Context = value;
                _flagContext = true;
            }
        }
        private SalesChannelContextAllOfContext _Context;
        private bool _flagContext;

        /// <summary>
        /// Returns false as Context should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContext()
        {
            return _flagContext;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContext {\n");
            sb.Append("  ApiAlias: ").Append(ApiAlias).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CurrentCustomerGroup: ").Append(CurrentCustomerGroup).Append("\n");
            sb.Append("  FallbackCustomerGroup: ").Append(FallbackCustomerGroup).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannelContext);
        }

        /// <summary>
        /// Returns true if SalesChannelContext instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiAlias == input.ApiAlias ||
                    (this.ApiAlias != null &&
                    this.ApiAlias.Equals(input.ApiAlias))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CurrentCustomerGroup == input.CurrentCustomerGroup ||
                    (this.CurrentCustomerGroup != null &&
                    this.CurrentCustomerGroup.Equals(input.CurrentCustomerGroup))
                ) && 
                (
                    this.FallbackCustomerGroup == input.FallbackCustomerGroup ||
                    (this.FallbackCustomerGroup != null &&
                    this.FallbackCustomerGroup.Equals(input.FallbackCustomerGroup))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SalesChannel == input.SalesChannel ||
                    (this.SalesChannel != null &&
                    this.SalesChannel.Equals(input.SalesChannel))
                ) && 
                (
                    this.TaxRules == input.TaxRules ||
                    this.TaxRules != null &&
                    input.TaxRules != null &&
                    this.TaxRules.SequenceEqual(input.TaxRules)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiAlias != null)
                {
                    hashCode = (hashCode * 59) + this.ApiAlias.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.CurrentCustomerGroup != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentCustomerGroup.GetHashCode();
                }
                if (this.FallbackCustomerGroup != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackCustomerGroup.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.SalesChannel != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannel.GetHashCode();
                }
                if (this.TaxRules != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRules.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

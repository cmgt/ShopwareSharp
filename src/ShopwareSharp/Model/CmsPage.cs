// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class CmsPage : IEquatable<CmsPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CmsPage" /> class.
        /// </summary>
        /// <param name="name">name (required)</param>
        /// <param name="type">type (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="versionId">versionId</param>
        /// <param name="entity">entity</param>
        /// <param name="config">config</param>
        /// <param name="previewMediaId">previewMediaId</param>
        /// <param name="customFields">customFields</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="translated">translated</param>
        /// <param name="sections">sections</param>
        /// <param name="previewMedia">previewMedia</param>
        /// <param name="landingPages">landingPages</param>
        public CmsPage(string name, string type, DateTime createdAt, string? id = default, string? versionId = default, string? entity = default, CmsPageConfig? config = default, string? previewMediaId = default, Object? customFields = default, DateTime? updatedAt = default, Object? translated = default, CmsSection? sections = default, Media? previewMedia = default, LandingPage? landingPages = default)
        {
            if (name == null)
                throw new ArgumentNullException("name is a required property for CmsPage and cannot be null.");

            if (type == null)
                throw new ArgumentNullException("type is a required property for CmsPage and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for CmsPage and cannot be null.");

            Name = name;
            Type = type;
            CreatedAt = createdAt;
            Id = id;
            VersionId = versionId;
            Entity = entity;
            Config = config;
            PreviewMediaId = previewMediaId;
            CustomFields = customFields;
            UpdatedAt = updatedAt;
            Translated = translated;
            Sections = sections;
            PreviewMedia = previewMedia;
            LandingPages = landingPages;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [JsonPropertyName("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public string? Entity { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [JsonPropertyName("config")]
        public CmsPageConfig? Config { get; set; }

        /// <summary>
        /// Gets or Sets PreviewMediaId
        /// </summary>
        [JsonPropertyName("previewMediaId")]
        public string? PreviewMediaId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [JsonPropertyName("translated")]
        public Object? Translated { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [JsonPropertyName("sections")]
        public CmsSection? Sections { get; set; }

        /// <summary>
        /// Gets or Sets PreviewMedia
        /// </summary>
        [JsonPropertyName("previewMedia")]
        public Media? PreviewMedia { get; set; }

        /// <summary>
        /// Gets or Sets LandingPages
        /// </summary>
        [JsonPropertyName("landingPages")]
        public LandingPage? LandingPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CmsPage {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  PreviewMediaId: ").Append(PreviewMediaId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  PreviewMedia: ").Append(PreviewMedia).Append("\n");
            sb.Append("  LandingPages: ").Append(LandingPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CmsPage);
        }

        /// <summary>
        /// Returns true if CmsPage instances are equal
        /// </summary>
        /// <param name="input">Instance of CmsPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CmsPage? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.PreviewMediaId == input.PreviewMediaId ||
                    (this.PreviewMediaId != null &&
                    this.PreviewMediaId.Equals(input.PreviewMediaId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.Sections == input.Sections ||
                    (this.Sections != null &&
                    this.Sections.Equals(input.Sections))
                ) && 
                (
                    this.PreviewMedia == input.PreviewMedia ||
                    (this.PreviewMedia != null &&
                    this.PreviewMedia.Equals(input.PreviewMedia))
                ) && 
                (
                    this.LandingPages == input.LandingPages ||
                    (this.LandingPages != null &&
                    this.LandingPages.Equals(input.LandingPages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                if (this.PreviewMediaId != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewMediaId.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.Sections != null)
                {
                    hashCode = (hashCode * 59) + this.Sections.GetHashCode();
                }
                if (this.PreviewMedia != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewMedia.GetHashCode();
                }
                if (this.LandingPages != null)
                {
                    hashCode = (hashCode * 59) + this.LandingPages.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // PreviewMediaId (string) pattern
            Regex regexPreviewMediaId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexPreviewMediaId.Match(this.PreviewMediaId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviewMediaId, must match a pattern of " + regexPreviewMediaId, new [] { "PreviewMediaId" });
            }

            yield break;
        }
    }

}

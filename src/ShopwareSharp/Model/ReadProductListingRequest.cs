/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ReadProductListingRequest
    /// </summary>
    [DataContract(Name = "readProductListing_request")]
    public partial class ReadProductListingRequest : IEquatable<ReadProductListingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadProductListingRequest" /> class.
        /// </summary>
        /// <param name="page">Search result page.</param>
        /// <param name="limit">Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings..</param>
        /// <param name="filter">List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter).</param>
        /// <param name="sort">Sorting in the search result..</param>
        /// <param name="postFilter">Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter).</param>
        /// <param name="associations">Used to fetch associations which are not fetched by default..</param>
        /// <param name="aggregations">Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations).</param>
        /// <param name="grouping">Perform groupings over certain fields.</param>
        /// <param name="order">Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results..</param>
        /// <param name="p">Search result page (default to 1).</param>
        /// <param name="manufacturer">Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;..</param>
        /// <param name="minPrice">Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter. (default to 0).</param>
        /// <param name="maxPrice">Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter. (default to 0).</param>
        /// <param name="rating">Filter products with a minimum average rating..</param>
        /// <param name="shippingFree">Filters products that are marked as shipping-free. (default to false).</param>
        /// <param name="properties">Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;..</param>
        /// <param name="manufacturerFilter">Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response. (default to true).</param>
        /// <param name="priceFilter">Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response. (default to true).</param>
        /// <param name="ratingFilter">Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response. (default to true).</param>
        /// <param name="shippingFreeFilter">Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response. (default to true).</param>
        /// <param name="propertyFilter">Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response. (default to true).</param>
        /// <param name="propertyWhitelist">A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect..</param>
        /// <param name="reduceAggregations">By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect..</param>
        /// <param name="noAggregations">Resets all aggregations in the criteria. This parameter is a flag, the value has no effect..</param>
        /// <param name="onlyAggregations">If this flag is set, no products are fetched. Sorting and associations are also ignored. This parameter is a flag, the value has no effect..</param>
        public ReadProductListingRequest(int page = default(int), int limit = default(int), List<CriteriaFilterInner> filter = default(List<CriteriaFilterInner>), List<CriteriaSortInner> sort = default(List<CriteriaSortInner>), List<CriteriaFilterInner> postFilter = default(List<CriteriaFilterInner>), Object associations = default(Object), List<CriteriaAggregationsInner> aggregations = default(List<CriteriaAggregationsInner>), List<string> grouping = default(List<string>), string order = default(string), int p = 1, string manufacturer = default(string), int minPrice = 0, int maxPrice = 0, int rating = default(int), bool shippingFree = false, string properties = default(string), bool manufacturerFilter = true, bool priceFilter = true, bool ratingFilter = true, bool shippingFreeFilter = true, bool propertyFilter = true, string propertyWhitelist = default(string), string reduceAggregations = default(string), string noAggregations = default(string), string onlyAggregations = default(string))
        {
            this._Page = page;
            if (this.Page != null)
            {
                this._flagPage = true;
            }
            this._Limit = limit;
            if (this.Limit != null)
            {
                this._flagLimit = true;
            }
            this._Filter = filter;
            if (this.Filter != null)
            {
                this._flagFilter = true;
            }
            this._Sort = sort;
            if (this.Sort != null)
            {
                this._flagSort = true;
            }
            this._PostFilter = postFilter;
            if (this.PostFilter != null)
            {
                this._flagPostFilter = true;
            }
            this._Associations = associations;
            if (this.Associations != null)
            {
                this._flagAssociations = true;
            }
            this._Aggregations = aggregations;
            if (this.Aggregations != null)
            {
                this._flagAggregations = true;
            }
            this._Grouping = grouping;
            if (this.Grouping != null)
            {
                this._flagGrouping = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Manufacturer = manufacturer;
            if (this.Manufacturer != null)
            {
                this._flagManufacturer = true;
            }
            this._Rating = rating;
            if (this.Rating != null)
            {
                this._flagRating = true;
            }
            this._Properties = properties;
            if (this.Properties != null)
            {
                this._flagProperties = true;
            }
            this._PropertyWhitelist = propertyWhitelist;
            if (this.PropertyWhitelist != null)
            {
                this._flagPropertyWhitelist = true;
            }
            this._ReduceAggregations = reduceAggregations;
            if (this.ReduceAggregations != null)
            {
                this._flagReduceAggregations = true;
            }
            this._NoAggregations = noAggregations;
            if (this.NoAggregations != null)
            {
                this._flagNoAggregations = true;
            }
            this._OnlyAggregations = onlyAggregations;
            if (this.OnlyAggregations != null)
            {
                this._flagOnlyAggregations = true;
            }
        }

        /// <summary>
        /// Search result page
        /// </summary>
        /// <value>Search result page</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page
        {
            get{ return _Page;}
            set
            {
                _Page = value;
                _flagPage = true;
            }
        }
        private int _Page;
        private bool _flagPage;

        /// <summary>
        /// Returns false as Page should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePage()
        {
            return _flagPage;
        }
        /// <summary>
        /// Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.
        /// </summary>
        /// <value>Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit
        {
            get{ return _Limit;}
            set
            {
                _Limit = value;
                _flagLimit = true;
            }
        }
        private int _Limit;
        private bool _flagLimit;

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return _flagLimit;
        }
        /// <summary>
        /// List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)
        /// </summary>
        /// <value>List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)</value>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public List<CriteriaFilterInner> Filter
        {
            get{ return _Filter;}
            set
            {
                _Filter = value;
                _flagFilter = true;
            }
        }
        private List<CriteriaFilterInner> _Filter;
        private bool _flagFilter;

        /// <summary>
        /// Returns false as Filter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFilter()
        {
            return _flagFilter;
        }
        /// <summary>
        /// Sorting in the search result.
        /// </summary>
        /// <value>Sorting in the search result.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public List<CriteriaSortInner> Sort
        {
            get{ return _Sort;}
            set
            {
                _Sort = value;
                _flagSort = true;
            }
        }
        private List<CriteriaSortInner> _Sort;
        private bool _flagSort;

        /// <summary>
        /// Returns false as Sort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSort()
        {
            return _flagSort;
        }
        /// <summary>
        /// Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)
        /// </summary>
        /// <value>Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)</value>
        [DataMember(Name = "post-filter", EmitDefaultValue = false)]
        public List<CriteriaFilterInner> PostFilter
        {
            get{ return _PostFilter;}
            set
            {
                _PostFilter = value;
                _flagPostFilter = true;
            }
        }
        private List<CriteriaFilterInner> _PostFilter;
        private bool _flagPostFilter;

        /// <summary>
        /// Returns false as PostFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostFilter()
        {
            return _flagPostFilter;
        }
        /// <summary>
        /// Used to fetch associations which are not fetched by default.
        /// </summary>
        /// <value>Used to fetch associations which are not fetched by default.</value>
        [DataMember(Name = "associations", EmitDefaultValue = false)]
        public Object Associations
        {
            get{ return _Associations;}
            set
            {
                _Associations = value;
                _flagAssociations = true;
            }
        }
        private Object _Associations;
        private bool _flagAssociations;

        /// <summary>
        /// Returns false as Associations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssociations()
        {
            return _flagAssociations;
        }
        /// <summary>
        /// Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)
        /// </summary>
        /// <value>Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)</value>
        [DataMember(Name = "aggregations", EmitDefaultValue = false)]
        public List<CriteriaAggregationsInner> Aggregations
        {
            get{ return _Aggregations;}
            set
            {
                _Aggregations = value;
                _flagAggregations = true;
            }
        }
        private List<CriteriaAggregationsInner> _Aggregations;
        private bool _flagAggregations;

        /// <summary>
        /// Returns false as Aggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregations()
        {
            return _flagAggregations;
        }
        /// <summary>
        /// Perform groupings over certain fields
        /// </summary>
        /// <value>Perform groupings over certain fields</value>
        [DataMember(Name = "grouping", EmitDefaultValue = false)]
        public List<string> Grouping
        {
            get{ return _Grouping;}
            set
            {
                _Grouping = value;
                _flagGrouping = true;
            }
        }
        private List<string> _Grouping;
        private bool _flagGrouping;

        /// <summary>
        /// Returns false as Grouping should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrouping()
        {
            return _flagGrouping;
        }
        /// <summary>
        /// Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.
        /// </summary>
        /// <value>Specifies the sorting of the products by &#x60;availableSortings&#x60;. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the &#x60;availableSortings&#x60; key. In order to sort by a field, consider using the &#x60;sort&#x60; parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public string Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private string _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Search result page
        /// </summary>
        /// <value>Search result page</value>
        [DataMember(Name = "p", EmitDefaultValue = false)]
        public int P
        {
            get{ return _P;}
            set
            {
                _P = value;
                _flagP = true;
            }
        }
        private int _P;
        private bool _flagP;

        /// <summary>
        /// Returns false as P should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeP()
        {
            return _flagP;
        }
        /// <summary>
        /// Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;.
        /// </summary>
        /// <value>Filter by manufacturers. List of manufacturer identifiers separated by a &#x60;|&#x60;.</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer
        {
            get{ return _Manufacturer;}
            set
            {
                _Manufacturer = value;
                _flagManufacturer = true;
            }
        }
        private string _Manufacturer;
        private bool _flagManufacturer;

        /// <summary>
        /// Returns false as Manufacturer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeManufacturer()
        {
            return _flagManufacturer;
        }
        /// <summary>
        /// Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter.
        /// </summary>
        /// <value>Filters by a minimum product price. Has to be lower than the &#x60;max-price&#x60; filter.</value>
        [DataMember(Name = "min-price", EmitDefaultValue = false)]
        public int MinPrice
        {
            get{ return _MinPrice;}
            set
            {
                _MinPrice = value;
                _flagMinPrice = true;
            }
        }
        private int _MinPrice;
        private bool _flagMinPrice;

        /// <summary>
        /// Returns false as MinPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinPrice()
        {
            return _flagMinPrice;
        }
        /// <summary>
        /// Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter.
        /// </summary>
        /// <value>Filters by a maximum product price. Has to be higher than the &#x60;min-price&#x60; filter.</value>
        [DataMember(Name = "max-price", EmitDefaultValue = false)]
        public int MaxPrice
        {
            get{ return _MaxPrice;}
            set
            {
                _MaxPrice = value;
                _flagMaxPrice = true;
            }
        }
        private int _MaxPrice;
        private bool _flagMaxPrice;

        /// <summary>
        /// Returns false as MaxPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaxPrice()
        {
            return _flagMaxPrice;
        }
        /// <summary>
        /// Filter products with a minimum average rating.
        /// </summary>
        /// <value>Filter products with a minimum average rating.</value>
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        public int Rating
        {
            get{ return _Rating;}
            set
            {
                _Rating = value;
                _flagRating = true;
            }
        }
        private int _Rating;
        private bool _flagRating;

        /// <summary>
        /// Returns false as Rating should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRating()
        {
            return _flagRating;
        }
        /// <summary>
        /// Filters products that are marked as shipping-free.
        /// </summary>
        /// <value>Filters products that are marked as shipping-free.</value>
        [DataMember(Name = "shipping-free", EmitDefaultValue = true)]
        public bool ShippingFree
        {
            get{ return _ShippingFree;}
            set
            {
                _ShippingFree = value;
                _flagShippingFree = true;
            }
        }
        private bool _ShippingFree;
        private bool _flagShippingFree;

        /// <summary>
        /// Returns false as ShippingFree should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingFree()
        {
            return _flagShippingFree;
        }
        /// <summary>
        /// Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;.
        /// </summary>
        /// <value>Filters products by their properties. List of property identifiers separated by a &#x60;|&#x60;.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public string Properties
        {
            get{ return _Properties;}
            set
            {
                _Properties = value;
                _flagProperties = true;
            }
        }
        private string _Properties;
        private bool _flagProperties;

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return _flagProperties;
        }
        /// <summary>
        /// Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by manufacturer. If set to false, the &#x60;manufacturer&#x60; filter will be ignored. Also the &#x60;aggregations[manufacturer]&#x60; key will be removed from the response.</value>
        [DataMember(Name = "manufacturer-filter", EmitDefaultValue = true)]
        public bool ManufacturerFilter
        {
            get{ return _ManufacturerFilter;}
            set
            {
                _ManufacturerFilter = value;
                _flagManufacturerFilter = true;
            }
        }
        private bool _ManufacturerFilter;
        private bool _flagManufacturerFilter;

        /// <summary>
        /// Returns false as ManufacturerFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeManufacturerFilter()
        {
            return _flagManufacturerFilter;
        }
        /// <summary>
        /// Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by price. If set to false, the &#x60;min-price&#x60; and &#x60;max-price&#x60; filter will be ignored. Also the &#x60;aggregations[price]&#x60; key will be removed from the response.</value>
        [DataMember(Name = "price-filter", EmitDefaultValue = true)]
        public bool PriceFilter
        {
            get{ return _PriceFilter;}
            set
            {
                _PriceFilter = value;
                _flagPriceFilter = true;
            }
        }
        private bool _PriceFilter;
        private bool _flagPriceFilter;

        /// <summary>
        /// Returns false as PriceFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePriceFilter()
        {
            return _flagPriceFilter;
        }
        /// <summary>
        /// Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by rating. If set to false, the &#x60;rating&#x60; filter will be ignored. Also the &#x60;aggregations[rating]&#x60; key will be removed from the response.</value>
        [DataMember(Name = "rating-filter", EmitDefaultValue = true)]
        public bool RatingFilter
        {
            get{ return _RatingFilter;}
            set
            {
                _RatingFilter = value;
                _flagRatingFilter = true;
            }
        }
        private bool _RatingFilter;
        private bool _flagRatingFilter;

        /// <summary>
        /// Returns false as RatingFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRatingFilter()
        {
            return _flagRatingFilter;
        }
        /// <summary>
        /// Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by shipping-free products. If set to false, the &#x60;shipping-free&#x60; filter will be ignored. Also the &#x60;aggregations[shipping-free]&#x60; key will be removed from the response.</value>
        [DataMember(Name = "shipping-free-filter", EmitDefaultValue = true)]
        public bool ShippingFreeFilter
        {
            get{ return _ShippingFreeFilter;}
            set
            {
                _ShippingFreeFilter = value;
                _flagShippingFreeFilter = true;
            }
        }
        private bool _ShippingFreeFilter;
        private bool _flagShippingFreeFilter;

        /// <summary>
        /// Returns false as ShippingFreeFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingFreeFilter()
        {
            return _flagShippingFreeFilter;
        }
        /// <summary>
        /// Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response.
        /// </summary>
        /// <value>Enables/disabled filtering by properties products. If set to false, the &#x60;properties&#x60; filter will be ignored. Also the &#x60;aggregations[properties]&#x60; key will be removed from the response.</value>
        [DataMember(Name = "property-filter", EmitDefaultValue = true)]
        public bool PropertyFilter
        {
            get{ return _PropertyFilter;}
            set
            {
                _PropertyFilter = value;
                _flagPropertyFilter = true;
            }
        }
        private bool _PropertyFilter;
        private bool _flagPropertyFilter;

        /// <summary>
        /// Returns false as PropertyFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyFilter()
        {
            return _flagPropertyFilter;
        }
        /// <summary>
        /// A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect.
        /// </summary>
        /// <value>A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a &#x60;|&#x60;. The &#x60;property-filter&#x60; must be &#x60;true&#x60;, otherwise the whitelist has no effect.</value>
        [DataMember(Name = "property-whitelist", EmitDefaultValue = false)]
        public string PropertyWhitelist
        {
            get{ return _PropertyWhitelist;}
            set
            {
                _PropertyWhitelist = value;
                _flagPropertyWhitelist = true;
            }
        }
        private string _PropertyWhitelist;
        private bool _flagPropertyWhitelist;

        /// <summary>
        /// Returns false as PropertyWhitelist should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyWhitelist()
        {
            return _flagPropertyWhitelist;
        }
        /// <summary>
        /// By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.
        /// </summary>
        /// <value>By sending the parameter &#x60;reduce-aggregations&#x60; , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.</value>
        [DataMember(Name = "reduce-aggregations", EmitDefaultValue = true)]
        public string ReduceAggregations
        {
            get{ return _ReduceAggregations;}
            set
            {
                _ReduceAggregations = value;
                _flagReduceAggregations = true;
            }
        }
        private string _ReduceAggregations;
        private bool _flagReduceAggregations;

        /// <summary>
        /// Returns false as ReduceAggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReduceAggregations()
        {
            return _flagReduceAggregations;
        }
        /// <summary>
        /// Resets all aggregations in the criteria. This parameter is a flag, the value has no effect.
        /// </summary>
        /// <value>Resets all aggregations in the criteria. This parameter is a flag, the value has no effect.</value>
        [DataMember(Name = "no-aggregations", EmitDefaultValue = true)]
        public string NoAggregations
        {
            get{ return _NoAggregations;}
            set
            {
                _NoAggregations = value;
                _flagNoAggregations = true;
            }
        }
        private string _NoAggregations;
        private bool _flagNoAggregations;

        /// <summary>
        /// Returns false as NoAggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNoAggregations()
        {
            return _flagNoAggregations;
        }
        /// <summary>
        /// If this flag is set, no products are fetched. Sorting and associations are also ignored. This parameter is a flag, the value has no effect.
        /// </summary>
        /// <value>If this flag is set, no products are fetched. Sorting and associations are also ignored. This parameter is a flag, the value has no effect.</value>
        [DataMember(Name = "only-aggregations", EmitDefaultValue = true)]
        public string OnlyAggregations
        {
            get{ return _OnlyAggregations;}
            set
            {
                _OnlyAggregations = value;
                _flagOnlyAggregations = true;
            }
        }
        private string _OnlyAggregations;
        private bool _flagOnlyAggregations;

        /// <summary>
        /// Returns false as OnlyAggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOnlyAggregations()
        {
            return _flagOnlyAggregations;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadProductListingRequest {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  PostFilter: ").Append(PostFilter).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  ShippingFree: ").Append(ShippingFree).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  ManufacturerFilter: ").Append(ManufacturerFilter).Append("\n");
            sb.Append("  PriceFilter: ").Append(PriceFilter).Append("\n");
            sb.Append("  RatingFilter: ").Append(RatingFilter).Append("\n");
            sb.Append("  ShippingFreeFilter: ").Append(ShippingFreeFilter).Append("\n");
            sb.Append("  PropertyFilter: ").Append(PropertyFilter).Append("\n");
            sb.Append("  PropertyWhitelist: ").Append(PropertyWhitelist).Append("\n");
            sb.Append("  ReduceAggregations: ").Append(ReduceAggregations).Append("\n");
            sb.Append("  NoAggregations: ").Append(NoAggregations).Append("\n");
            sb.Append("  OnlyAggregations: ").Append(OnlyAggregations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadProductListingRequest);
        }

        /// <summary>
        /// Returns true if ReadProductListingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadProductListingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadProductListingRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    input.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                ) && 
                (
                    this.PostFilter == input.PostFilter ||
                    this.PostFilter != null &&
                    input.PostFilter != null &&
                    this.PostFilter.SequenceEqual(input.PostFilter)
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    input.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.Grouping == input.Grouping ||
                    this.Grouping != null &&
                    input.Grouping != null &&
                    this.Grouping.SequenceEqual(input.Grouping)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.P == input.P ||
                    this.P.Equals(input.P)
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    this.MinPrice.Equals(input.MinPrice)
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    this.MaxPrice.Equals(input.MaxPrice)
                ) && 
                (
                    this.Rating == input.Rating ||
                    this.Rating.Equals(input.Rating)
                ) && 
                (
                    this.ShippingFree == input.ShippingFree ||
                    this.ShippingFree.Equals(input.ShippingFree)
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.ManufacturerFilter == input.ManufacturerFilter ||
                    this.ManufacturerFilter.Equals(input.ManufacturerFilter)
                ) && 
                (
                    this.PriceFilter == input.PriceFilter ||
                    this.PriceFilter.Equals(input.PriceFilter)
                ) && 
                (
                    this.RatingFilter == input.RatingFilter ||
                    this.RatingFilter.Equals(input.RatingFilter)
                ) && 
                (
                    this.ShippingFreeFilter == input.ShippingFreeFilter ||
                    this.ShippingFreeFilter.Equals(input.ShippingFreeFilter)
                ) && 
                (
                    this.PropertyFilter == input.PropertyFilter ||
                    this.PropertyFilter.Equals(input.PropertyFilter)
                ) && 
                (
                    this.PropertyWhitelist == input.PropertyWhitelist ||
                    (this.PropertyWhitelist != null &&
                    this.PropertyWhitelist.Equals(input.PropertyWhitelist))
                ) && 
                (
                    this.ReduceAggregations == input.ReduceAggregations ||
                    (this.ReduceAggregations != null &&
                    this.ReduceAggregations.Equals(input.ReduceAggregations))
                ) && 
                (
                    this.NoAggregations == input.NoAggregations ||
                    (this.NoAggregations != null &&
                    this.NoAggregations.Equals(input.NoAggregations))
                ) && 
                (
                    this.OnlyAggregations == input.OnlyAggregations ||
                    (this.OnlyAggregations != null &&
                    this.OnlyAggregations.Equals(input.OnlyAggregations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                if (this.PostFilter != null)
                {
                    hashCode = (hashCode * 59) + this.PostFilter.GetHashCode();
                }
                if (this.Associations != null)
                {
                    hashCode = (hashCode * 59) + this.Associations.GetHashCode();
                }
                if (this.Aggregations != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregations.GetHashCode();
                }
                if (this.Grouping != null)
                {
                    hashCode = (hashCode * 59) + this.Grouping.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.P.GetHashCode();
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFree.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ManufacturerFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.RatingFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFreeFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.PropertyFilter.GetHashCode();
                if (this.PropertyWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyWhitelist.GetHashCode();
                }
                if (this.ReduceAggregations != null)
                {
                    hashCode = (hashCode * 59) + this.ReduceAggregations.GetHashCode();
                }
                if (this.NoAggregations != null)
                {
                    hashCode = (hashCode * 59) + this.NoAggregations.GetHashCode();
                }
                if (this.OnlyAggregations != null)
                {
                    hashCode = (hashCode * 59) + this.OnlyAggregations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Limit (int) minimum
            if (this.Limit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 0.", new [] { "Limit" });
            }

            // MinPrice (int) minimum
            if (this.MinPrice < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinPrice, must be a value greater than or equal to 0.", new [] { "MinPrice" });
            }

            // MaxPrice (int) minimum
            if (this.MaxPrice < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxPrice, must be a value greater than or equal to 0.", new [] { "MaxPrice" });
            }

            yield break;
        }
    }

}

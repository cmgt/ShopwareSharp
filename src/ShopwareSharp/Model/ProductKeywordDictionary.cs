/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "ProductKeywordDictionary")]
    public partial class ProductKeywordDictionary : IEquatable<ProductKeywordDictionary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductKeywordDictionary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductKeywordDictionary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductKeywordDictionary" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="languageId">languageId (required).</param>
        /// <param name="keyword">keyword (required).</param>
        public ProductKeywordDictionary(string id = default(string), string languageId = default(string), string keyword = default(string))
        {
            // to ensure "languageId" is required (not null)
            if (languageId == null)
            {
                throw new ArgumentNullException("languageId is a required property for ProductKeywordDictionary and cannot be null");
            }
            this._LanguageId = languageId;
            // to ensure "keyword" is required (not null)
            if (keyword == null)
            {
                throw new ArgumentNullException("keyword is a required property for ProductKeywordDictionary and cannot be null");
            }
            this._Keyword = keyword;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>
        [DataMember(Name = "keyword", IsRequired = true, EmitDefaultValue = false)]
        public string Keyword
        {
            get{ return _Keyword;}
            set
            {
                _Keyword = value;
                _flagKeyword = true;
            }
        }
        private string _Keyword;
        private bool _flagKeyword;

        /// <summary>
        /// Returns false as Keyword should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeyword()
        {
            return _flagKeyword;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductKeywordDictionary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductKeywordDictionary);
        }

        /// <summary>
        /// Returns true if ProductKeywordDictionary instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductKeywordDictionary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductKeywordDictionary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.Keyword != null)
                {
                    hashCode = (hashCode * 59) + this.Keyword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            yield break;
        }
    }

}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// SalesChannelContextAllOfTaxRules
    /// </summary>
    public partial class SalesChannelContextAllOfTaxRules : IEquatable<SalesChannelContextAllOfTaxRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOfTaxRules" /> class.
        /// </summary>
        /// <param name="taxRate">taxRate</param>
        /// <param name="name">name</param>
        public SalesChannelContextAllOfTaxRules(float? taxRate = default, string? name = default)
        {
            TaxRate = taxRate;
            Name = name;
        }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [JsonPropertyName("taxRate")]
        public float? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOfTaxRules {\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as SalesChannelContextAllOfTaxRules);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOfTaxRules instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOfTaxRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOfTaxRules? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaxRate == input.TaxRate ||
                    this.TaxRate.Equals(input.TaxRate)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TaxRate.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

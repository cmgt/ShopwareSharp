/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ShippingMethodPageRouteResponseInner
    /// </summary>
    [DataContract(Name = "ShippingMethodPageRouteResponse_inner")]
    public partial class ShippingMethodPageRouteResponseInner : IEquatable<ShippingMethodPageRouteResponseInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPageRouteResponseInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="active">active.</param>
        /// <param name="description">description.</param>
        /// <param name="deliveryTimeId">deliveryTimeId.</param>
        /// <param name="deliveryTime">deliveryTime.</param>
        /// <param name="translations">translations.</param>
        /// <param name="orderDeliveries">orderDeliveries.</param>
        /// <param name="salesChannelDefaultAssignments">salesChannelDefaultAssignments.</param>
        /// <param name="salesChannels">salesChannels.</param>
        /// <param name="availabilityRule">availabilityRule.</param>
        /// <param name="availabilityRuleId">availabilityRuleId.</param>
        /// <param name="prices">prices.</param>
        /// <param name="mediaId">mediaId.</param>
        /// <param name="media">media.</param>
        /// <param name="tags">tags.</param>
        public ShippingMethodPageRouteResponseInner(string name = default(string), bool active = default(bool), string description = default(string), string deliveryTimeId = default(string), ShippingMethodPageRouteResponseInnerDeliveryTime deliveryTime = default(ShippingMethodPageRouteResponseInnerDeliveryTime), List<ShippingMethodPageRouteResponseInnerTranslationsInner> translations = default(List<ShippingMethodPageRouteResponseInnerTranslationsInner>), List<ShippingMethodPageRouteResponseInnerOrderDeliveriesInner> orderDeliveries = default(List<ShippingMethodPageRouteResponseInnerOrderDeliveriesInner>), List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> salesChannelDefaultAssignments = default(List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner>), List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> salesChannels = default(List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner>), ShippingMethodPageRouteResponseInnerAvailabilityRule availabilityRule = default(ShippingMethodPageRouteResponseInnerAvailabilityRule), string availabilityRuleId = default(string), List<ShippingMethodPageRouteResponseInnerPricesInner> prices = default(List<ShippingMethodPageRouteResponseInnerPricesInner>), string mediaId = default(string), ShippingMethodPageRouteResponseInnerMedia media = default(ShippingMethodPageRouteResponseInnerMedia), List<ShippingMethodPageRouteResponseInnerTagsInner> tags = default(List<ShippingMethodPageRouteResponseInnerTagsInner>))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._DeliveryTimeId = deliveryTimeId;
            if (this.DeliveryTimeId != null)
            {
                this._flagDeliveryTimeId = true;
            }
            this._DeliveryTime = deliveryTime;
            if (this.DeliveryTime != null)
            {
                this._flagDeliveryTime = true;
            }
            this._Translations = translations;
            if (this.Translations != null)
            {
                this._flagTranslations = true;
            }
            this._OrderDeliveries = orderDeliveries;
            if (this.OrderDeliveries != null)
            {
                this._flagOrderDeliveries = true;
            }
            this._SalesChannelDefaultAssignments = salesChannelDefaultAssignments;
            if (this.SalesChannelDefaultAssignments != null)
            {
                this._flagSalesChannelDefaultAssignments = true;
            }
            this._SalesChannels = salesChannels;
            if (this.SalesChannels != null)
            {
                this._flagSalesChannels = true;
            }
            this._AvailabilityRule = availabilityRule;
            if (this.AvailabilityRule != null)
            {
                this._flagAvailabilityRule = true;
            }
            this._AvailabilityRuleId = availabilityRuleId;
            if (this.AvailabilityRuleId != null)
            {
                this._flagAvailabilityRuleId = true;
            }
            this._Prices = prices;
            if (this.Prices != null)
            {
                this._flagPrices = true;
            }
            this._MediaId = mediaId;
            if (this.MediaId != null)
            {
                this._flagMediaId = true;
            }
            this._Media = media;
            if (this.Media != null)
            {
                this._flagMedia = true;
            }
            this._Tags = tags;
            if (this.Tags != null)
            {
                this._flagTags = true;
            }
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Gets or Sets DeliveryTimeId
        /// </summary>
        [DataMember(Name = "deliveryTimeId", EmitDefaultValue = false)]
        public string DeliveryTimeId
        {
            get{ return _DeliveryTimeId;}
            set
            {
                _DeliveryTimeId = value;
                _flagDeliveryTimeId = true;
            }
        }
        private string _DeliveryTimeId;
        private bool _flagDeliveryTimeId;

        /// <summary>
        /// Returns false as DeliveryTimeId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryTimeId()
        {
            return _flagDeliveryTimeId;
        }
        /// <summary>
        /// Gets or Sets DeliveryTime
        /// </summary>
        [DataMember(Name = "deliveryTime", EmitDefaultValue = false)]
        public ShippingMethodPageRouteResponseInnerDeliveryTime DeliveryTime
        {
            get{ return _DeliveryTime;}
            set
            {
                _DeliveryTime = value;
                _flagDeliveryTime = true;
            }
        }
        private ShippingMethodPageRouteResponseInnerDeliveryTime _DeliveryTime;
        private bool _flagDeliveryTime;

        /// <summary>
        /// Returns false as DeliveryTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryTime()
        {
            return _flagDeliveryTime;
        }
        /// <summary>
        /// Gets or Sets Translations
        /// </summary>
        [DataMember(Name = "translations", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerTranslationsInner> Translations
        {
            get{ return _Translations;}
            set
            {
                _Translations = value;
                _flagTranslations = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerTranslationsInner> _Translations;
        private bool _flagTranslations;

        /// <summary>
        /// Returns false as Translations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslations()
        {
            return _flagTranslations;
        }
        /// <summary>
        /// Gets or Sets OrderDeliveries
        /// </summary>
        [DataMember(Name = "orderDeliveries", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerOrderDeliveriesInner> OrderDeliveries
        {
            get{ return _OrderDeliveries;}
            set
            {
                _OrderDeliveries = value;
                _flagOrderDeliveries = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerOrderDeliveriesInner> _OrderDeliveries;
        private bool _flagOrderDeliveries;

        /// <summary>
        /// Returns false as OrderDeliveries should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderDeliveries()
        {
            return _flagOrderDeliveries;
        }
        /// <summary>
        /// Gets or Sets SalesChannelDefaultAssignments
        /// </summary>
        [DataMember(Name = "salesChannelDefaultAssignments", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> SalesChannelDefaultAssignments
        {
            get{ return _SalesChannelDefaultAssignments;}
            set
            {
                _SalesChannelDefaultAssignments = value;
                _flagSalesChannelDefaultAssignments = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> _SalesChannelDefaultAssignments;
        private bool _flagSalesChannelDefaultAssignments;

        /// <summary>
        /// Returns false as SalesChannelDefaultAssignments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannelDefaultAssignments()
        {
            return _flagSalesChannelDefaultAssignments;
        }
        /// <summary>
        /// Gets or Sets SalesChannels
        /// </summary>
        [DataMember(Name = "salesChannels", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> SalesChannels
        {
            get{ return _SalesChannels;}
            set
            {
                _SalesChannels = value;
                _flagSalesChannels = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner> _SalesChannels;
        private bool _flagSalesChannels;

        /// <summary>
        /// Returns false as SalesChannels should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalesChannels()
        {
            return _flagSalesChannels;
        }
        /// <summary>
        /// Gets or Sets AvailabilityRule
        /// </summary>
        [DataMember(Name = "availabilityRule", EmitDefaultValue = false)]
        public ShippingMethodPageRouteResponseInnerAvailabilityRule AvailabilityRule
        {
            get{ return _AvailabilityRule;}
            set
            {
                _AvailabilityRule = value;
                _flagAvailabilityRule = true;
            }
        }
        private ShippingMethodPageRouteResponseInnerAvailabilityRule _AvailabilityRule;
        private bool _flagAvailabilityRule;

        /// <summary>
        /// Returns false as AvailabilityRule should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvailabilityRule()
        {
            return _flagAvailabilityRule;
        }
        /// <summary>
        /// Gets or Sets AvailabilityRuleId
        /// </summary>
        [DataMember(Name = "availabilityRuleId", EmitDefaultValue = false)]
        public string AvailabilityRuleId
        {
            get{ return _AvailabilityRuleId;}
            set
            {
                _AvailabilityRuleId = value;
                _flagAvailabilityRuleId = true;
            }
        }
        private string _AvailabilityRuleId;
        private bool _flagAvailabilityRuleId;

        /// <summary>
        /// Returns false as AvailabilityRuleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvailabilityRuleId()
        {
            return _flagAvailabilityRuleId;
        }
        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerPricesInner> Prices
        {
            get{ return _Prices;}
            set
            {
                _Prices = value;
                _flagPrices = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerPricesInner> _Prices;
        private bool _flagPrices;

        /// <summary>
        /// Returns false as Prices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrices()
        {
            return _flagPrices;
        }
        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "mediaId", EmitDefaultValue = false)]
        public string MediaId
        {
            get{ return _MediaId;}
            set
            {
                _MediaId = value;
                _flagMediaId = true;
            }
        }
        private string _MediaId;
        private bool _flagMediaId;

        /// <summary>
        /// Returns false as MediaId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMediaId()
        {
            return _flagMediaId;
        }
        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public ShippingMethodPageRouteResponseInnerMedia Media
        {
            get{ return _Media;}
            set
            {
                _Media = value;
                _flagMedia = true;
            }
        }
        private ShippingMethodPageRouteResponseInnerMedia _Media;
        private bool _flagMedia;

        /// <summary>
        /// Returns false as Media should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMedia()
        {
            return _flagMedia;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<ShippingMethodPageRouteResponseInnerTagsInner> Tags
        {
            get{ return _Tags;}
            set
            {
                _Tags = value;
                _flagTags = true;
            }
        }
        private List<ShippingMethodPageRouteResponseInnerTagsInner> _Tags;
        private bool _flagTags;

        /// <summary>
        /// Returns false as Tags should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTags()
        {
            return _flagTags;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPageRouteResponseInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeliveryTimeId: ").Append(DeliveryTimeId).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  OrderDeliveries: ").Append(OrderDeliveries).Append("\n");
            sb.Append("  SalesChannelDefaultAssignments: ").Append(SalesChannelDefaultAssignments).Append("\n");
            sb.Append("  SalesChannels: ").Append(SalesChannels).Append("\n");
            sb.Append("  AvailabilityRule: ").Append(AvailabilityRule).Append("\n");
            sb.Append("  AvailabilityRuleId: ").Append(AvailabilityRuleId).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingMethodPageRouteResponseInner);
        }

        /// <summary>
        /// Returns true if ShippingMethodPageRouteResponseInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPageRouteResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPageRouteResponseInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DeliveryTimeId == input.DeliveryTimeId ||
                    (this.DeliveryTimeId != null &&
                    this.DeliveryTimeId.Equals(input.DeliveryTimeId))
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    (this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(input.DeliveryTime))
                ) && 
                (
                    this.Translations == input.Translations ||
                    this.Translations != null &&
                    input.Translations != null &&
                    this.Translations.SequenceEqual(input.Translations)
                ) && 
                (
                    this.OrderDeliveries == input.OrderDeliveries ||
                    this.OrderDeliveries != null &&
                    input.OrderDeliveries != null &&
                    this.OrderDeliveries.SequenceEqual(input.OrderDeliveries)
                ) && 
                (
                    this.SalesChannelDefaultAssignments == input.SalesChannelDefaultAssignments ||
                    this.SalesChannelDefaultAssignments != null &&
                    input.SalesChannelDefaultAssignments != null &&
                    this.SalesChannelDefaultAssignments.SequenceEqual(input.SalesChannelDefaultAssignments)
                ) && 
                (
                    this.SalesChannels == input.SalesChannels ||
                    this.SalesChannels != null &&
                    input.SalesChannels != null &&
                    this.SalesChannels.SequenceEqual(input.SalesChannels)
                ) && 
                (
                    this.AvailabilityRule == input.AvailabilityRule ||
                    (this.AvailabilityRule != null &&
                    this.AvailabilityRule.Equals(input.AvailabilityRule))
                ) && 
                (
                    this.AvailabilityRuleId == input.AvailabilityRuleId ||
                    (this.AvailabilityRuleId != null &&
                    this.AvailabilityRuleId.Equals(input.AvailabilityRuleId))
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DeliveryTimeId != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryTimeId.GetHashCode();
                }
                if (this.DeliveryTime != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryTime.GetHashCode();
                }
                if (this.Translations != null)
                {
                    hashCode = (hashCode * 59) + this.Translations.GetHashCode();
                }
                if (this.OrderDeliveries != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDeliveries.GetHashCode();
                }
                if (this.SalesChannelDefaultAssignments != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelDefaultAssignments.GetHashCode();
                }
                if (this.SalesChannels != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannels.GetHashCode();
                }
                if (this.AvailabilityRule != null)
                {
                    hashCode = (hashCode * 59) + this.AvailabilityRule.GetHashCode();
                }
                if (this.AvailabilityRuleId != null)
                {
                    hashCode = (hashCode * 59) + this.AvailabilityRuleId.GetHashCode();
                }
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.MediaId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaId.GetHashCode();
                }
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

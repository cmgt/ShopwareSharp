// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// CrossSellingElementCollectionInner
    /// </summary>
    public partial class CrossSellingElementCollectionInner : IEquatable<CrossSellingElementCollectionInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSellingElementCollectionInner" /> class.
        /// </summary>
        /// <param name="crossSelling">crossSelling</param>
        /// <param name="products">products</param>
        /// <param name="total">total</param>
        public CrossSellingElementCollectionInner(CrossSellingElementCollectionInnerCrossSelling? crossSelling = default, List<Product>? products = default, int? total = default)
        {
            CrossSelling = crossSelling;
            Products = products;
            Total = total;
        }

        /// <summary>
        /// Gets or Sets CrossSelling
        /// </summary>
        [JsonPropertyName("crossSelling")]
        public CrossSellingElementCollectionInnerCrossSelling? CrossSelling { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [JsonPropertyName("products")]
        public List<Product>? Products { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CrossSellingElementCollectionInner {\n");
            sb.Append("  CrossSelling: ").Append(CrossSelling).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CrossSellingElementCollectionInner);
        }

        /// <summary>
        /// Returns true if CrossSellingElementCollectionInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossSellingElementCollectionInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossSellingElementCollectionInner? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CrossSelling == input.CrossSelling ||
                    (this.CrossSelling != null &&
                    this.CrossSelling.Equals(input.CrossSelling))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CrossSelling != null)
                {
                    hashCode = (hashCode * 59) + this.CrossSelling.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

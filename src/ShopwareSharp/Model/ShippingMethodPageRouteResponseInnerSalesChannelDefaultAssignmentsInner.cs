/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner
    /// </summary>
    [DataContract(Name = "ShippingMethodPageRouteResponse_inner_salesChannelDefaultAssignments_inner")]
    public partial class ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner : IEquatable<ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner" /> class.
        /// </summary>
        /// <param name="typeId">typeId.</param>
        /// <param name="languageId">languageId.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="paymentMethodId">paymentMethodId.</param>
        /// <param name="shippingMethodId">shippingMethodId.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="navigationCategoryId">navigationCategoryId.</param>
        /// <param name="navigationCategoryDepth">navigationCategoryDepth.</param>
        /// <param name="footerCategoryId">footerCategoryId.</param>
        /// <param name="serviceCategoryId">serviceCategoryId.</param>
        /// <param name="name">name.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="accessKey">accessKey.</param>
        /// <param name="active">active.</param>
        /// <param name="maintenance">maintenance.</param>
        /// <param name="maintenanceIpWhitelist">maintenanceIpWhitelist.</param>
        /// <param name="mailHeaderFooterId">mailHeaderFooterId.</param>
        /// <param name="customerGroupId">customerGroupId.</param>
        /// <param name="hreflangActive">hreflangActive.</param>
        /// <param name="hreflangDefaultDomainId">hreflangDefaultDomainId.</param>
        public ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner(string typeId = default(string), string languageId = default(string), string currencyId = default(string), string paymentMethodId = default(string), string shippingMethodId = default(string), string countryId = default(string), string navigationCategoryId = default(string), int navigationCategoryDepth = default(int), string footerCategoryId = default(string), string serviceCategoryId = default(string), string name = default(string), string shortName = default(string), string accessKey = default(string), bool active = default(bool), bool maintenance = default(bool), string maintenanceIpWhitelist = default(string), string mailHeaderFooterId = default(string), string customerGroupId = default(string), bool hreflangActive = default(bool), string hreflangDefaultDomainId = default(string))
        {
            this._TypeId = typeId;
            if (this.TypeId != null)
            {
                this._flagTypeId = true;
            }
            this._LanguageId = languageId;
            if (this.LanguageId != null)
            {
                this._flagLanguageId = true;
            }
            this._CurrencyId = currencyId;
            if (this.CurrencyId != null)
            {
                this._flagCurrencyId = true;
            }
            this._PaymentMethodId = paymentMethodId;
            if (this.PaymentMethodId != null)
            {
                this._flagPaymentMethodId = true;
            }
            this._ShippingMethodId = shippingMethodId;
            if (this.ShippingMethodId != null)
            {
                this._flagShippingMethodId = true;
            }
            this._CountryId = countryId;
            if (this.CountryId != null)
            {
                this._flagCountryId = true;
            }
            this._NavigationCategoryId = navigationCategoryId;
            if (this.NavigationCategoryId != null)
            {
                this._flagNavigationCategoryId = true;
            }
            this._NavigationCategoryDepth = navigationCategoryDepth;
            if (this.NavigationCategoryDepth != null)
            {
                this._flagNavigationCategoryDepth = true;
            }
            this._FooterCategoryId = footerCategoryId;
            if (this.FooterCategoryId != null)
            {
                this._flagFooterCategoryId = true;
            }
            this._ServiceCategoryId = serviceCategoryId;
            if (this.ServiceCategoryId != null)
            {
                this._flagServiceCategoryId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._ShortName = shortName;
            if (this.ShortName != null)
            {
                this._flagShortName = true;
            }
            this._AccessKey = accessKey;
            if (this.AccessKey != null)
            {
                this._flagAccessKey = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._Maintenance = maintenance;
            if (this.Maintenance != null)
            {
                this._flagMaintenance = true;
            }
            this._MaintenanceIpWhitelist = maintenanceIpWhitelist;
            if (this.MaintenanceIpWhitelist != null)
            {
                this._flagMaintenanceIpWhitelist = true;
            }
            this._MailHeaderFooterId = mailHeaderFooterId;
            if (this.MailHeaderFooterId != null)
            {
                this._flagMailHeaderFooterId = true;
            }
            this._CustomerGroupId = customerGroupId;
            if (this.CustomerGroupId != null)
            {
                this._flagCustomerGroupId = true;
            }
            this._HreflangActive = hreflangActive;
            if (this.HreflangActive != null)
            {
                this._flagHreflangActive = true;
            }
            this._HreflangDefaultDomainId = hreflangDefaultDomainId;
            if (this.HreflangDefaultDomainId != null)
            {
                this._flagHreflangDefaultDomainId = true;
            }
        }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = false)]
        public string TypeId
        {
            get{ return _TypeId;}
            set
            {
                _TypeId = value;
                _flagTypeId = true;
            }
        }
        private string _TypeId;
        private bool _flagTypeId;

        /// <summary>
        /// Returns false as TypeId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTypeId()
        {
            return _flagTypeId;
        }
        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", EmitDefaultValue = false)]
        public string CurrencyId
        {
            get{ return _CurrencyId;}
            set
            {
                _CurrencyId = value;
                _flagCurrencyId = true;
            }
        }
        private string _CurrencyId;
        private bool _flagCurrencyId;

        /// <summary>
        /// Returns false as CurrencyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyId()
        {
            return _flagCurrencyId;
        }
        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [DataMember(Name = "paymentMethodId", EmitDefaultValue = false)]
        public string PaymentMethodId
        {
            get{ return _PaymentMethodId;}
            set
            {
                _PaymentMethodId = value;
                _flagPaymentMethodId = true;
            }
        }
        private string _PaymentMethodId;
        private bool _flagPaymentMethodId;

        /// <summary>
        /// Returns false as PaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethodId()
        {
            return _flagPaymentMethodId;
        }
        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [DataMember(Name = "shippingMethodId", EmitDefaultValue = false)]
        public string ShippingMethodId
        {
            get{ return _ShippingMethodId;}
            set
            {
                _ShippingMethodId = value;
                _flagShippingMethodId = true;
            }
        }
        private string _ShippingMethodId;
        private bool _flagShippingMethodId;

        /// <summary>
        /// Returns false as ShippingMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethodId()
        {
            return _flagShippingMethodId;
        }
        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public string CountryId
        {
            get{ return _CountryId;}
            set
            {
                _CountryId = value;
                _flagCountryId = true;
            }
        }
        private string _CountryId;
        private bool _flagCountryId;

        /// <summary>
        /// Returns false as CountryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryId()
        {
            return _flagCountryId;
        }
        /// <summary>
        /// Gets or Sets NavigationCategoryId
        /// </summary>
        [DataMember(Name = "navigationCategoryId", EmitDefaultValue = false)]
        public string NavigationCategoryId
        {
            get{ return _NavigationCategoryId;}
            set
            {
                _NavigationCategoryId = value;
                _flagNavigationCategoryId = true;
            }
        }
        private string _NavigationCategoryId;
        private bool _flagNavigationCategoryId;

        /// <summary>
        /// Returns false as NavigationCategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNavigationCategoryId()
        {
            return _flagNavigationCategoryId;
        }
        /// <summary>
        /// Gets or Sets NavigationCategoryDepth
        /// </summary>
        [DataMember(Name = "navigationCategoryDepth", EmitDefaultValue = false)]
        public int NavigationCategoryDepth
        {
            get{ return _NavigationCategoryDepth;}
            set
            {
                _NavigationCategoryDepth = value;
                _flagNavigationCategoryDepth = true;
            }
        }
        private int _NavigationCategoryDepth;
        private bool _flagNavigationCategoryDepth;

        /// <summary>
        /// Returns false as NavigationCategoryDepth should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNavigationCategoryDepth()
        {
            return _flagNavigationCategoryDepth;
        }
        /// <summary>
        /// Gets or Sets FooterCategoryId
        /// </summary>
        [DataMember(Name = "footerCategoryId", EmitDefaultValue = false)]
        public string FooterCategoryId
        {
            get{ return _FooterCategoryId;}
            set
            {
                _FooterCategoryId = value;
                _flagFooterCategoryId = true;
            }
        }
        private string _FooterCategoryId;
        private bool _flagFooterCategoryId;

        /// <summary>
        /// Returns false as FooterCategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFooterCategoryId()
        {
            return _flagFooterCategoryId;
        }
        /// <summary>
        /// Gets or Sets ServiceCategoryId
        /// </summary>
        [DataMember(Name = "serviceCategoryId", EmitDefaultValue = false)]
        public string ServiceCategoryId
        {
            get{ return _ServiceCategoryId;}
            set
            {
                _ServiceCategoryId = value;
                _flagServiceCategoryId = true;
            }
        }
        private string _ServiceCategoryId;
        private bool _flagServiceCategoryId;

        /// <summary>
        /// Returns false as ServiceCategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeServiceCategoryId()
        {
            return _flagServiceCategoryId;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName
        {
            get{ return _ShortName;}
            set
            {
                _ShortName = value;
                _flagShortName = true;
            }
        }
        private string _ShortName;
        private bool _flagShortName;

        /// <summary>
        /// Returns false as ShortName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShortName()
        {
            return _flagShortName;
        }
        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name = "accessKey", EmitDefaultValue = false)]
        public string AccessKey
        {
            get{ return _AccessKey;}
            set
            {
                _AccessKey = value;
                _flagAccessKey = true;
            }
        }
        private string _AccessKey;
        private bool _flagAccessKey;

        /// <summary>
        /// Returns false as AccessKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccessKey()
        {
            return _flagAccessKey;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        [DataMember(Name = "maintenance", EmitDefaultValue = true)]
        public bool Maintenance
        {
            get{ return _Maintenance;}
            set
            {
                _Maintenance = value;
                _flagMaintenance = true;
            }
        }
        private bool _Maintenance;
        private bool _flagMaintenance;

        /// <summary>
        /// Returns false as Maintenance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaintenance()
        {
            return _flagMaintenance;
        }
        /// <summary>
        /// Gets or Sets MaintenanceIpWhitelist
        /// </summary>
        [DataMember(Name = "maintenanceIpWhitelist", EmitDefaultValue = false)]
        public string MaintenanceIpWhitelist
        {
            get{ return _MaintenanceIpWhitelist;}
            set
            {
                _MaintenanceIpWhitelist = value;
                _flagMaintenanceIpWhitelist = true;
            }
        }
        private string _MaintenanceIpWhitelist;
        private bool _flagMaintenanceIpWhitelist;

        /// <summary>
        /// Returns false as MaintenanceIpWhitelist should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaintenanceIpWhitelist()
        {
            return _flagMaintenanceIpWhitelist;
        }
        /// <summary>
        /// Gets or Sets MailHeaderFooterId
        /// </summary>
        [DataMember(Name = "mailHeaderFooterId", EmitDefaultValue = false)]
        public string MailHeaderFooterId
        {
            get{ return _MailHeaderFooterId;}
            set
            {
                _MailHeaderFooterId = value;
                _flagMailHeaderFooterId = true;
            }
        }
        private string _MailHeaderFooterId;
        private bool _flagMailHeaderFooterId;

        /// <summary>
        /// Returns false as MailHeaderFooterId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMailHeaderFooterId()
        {
            return _flagMailHeaderFooterId;
        }
        /// <summary>
        /// Gets or Sets CustomerGroupId
        /// </summary>
        [DataMember(Name = "customerGroupId", EmitDefaultValue = false)]
        public string CustomerGroupId
        {
            get{ return _CustomerGroupId;}
            set
            {
                _CustomerGroupId = value;
                _flagCustomerGroupId = true;
            }
        }
        private string _CustomerGroupId;
        private bool _flagCustomerGroupId;

        /// <summary>
        /// Returns false as CustomerGroupId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerGroupId()
        {
            return _flagCustomerGroupId;
        }
        /// <summary>
        /// Gets or Sets HreflangActive
        /// </summary>
        [DataMember(Name = "hreflangActive", EmitDefaultValue = true)]
        public bool HreflangActive
        {
            get{ return _HreflangActive;}
            set
            {
                _HreflangActive = value;
                _flagHreflangActive = true;
            }
        }
        private bool _HreflangActive;
        private bool _flagHreflangActive;

        /// <summary>
        /// Returns false as HreflangActive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHreflangActive()
        {
            return _flagHreflangActive;
        }
        /// <summary>
        /// Gets or Sets HreflangDefaultDomainId
        /// </summary>
        [DataMember(Name = "hreflangDefaultDomainId", EmitDefaultValue = false)]
        public string HreflangDefaultDomainId
        {
            get{ return _HreflangDefaultDomainId;}
            set
            {
                _HreflangDefaultDomainId = value;
                _flagHreflangDefaultDomainId = true;
            }
        }
        private string _HreflangDefaultDomainId;
        private bool _flagHreflangDefaultDomainId;

        /// <summary>
        /// Returns false as HreflangDefaultDomainId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHreflangDefaultDomainId()
        {
            return _flagHreflangDefaultDomainId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner {\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  NavigationCategoryId: ").Append(NavigationCategoryId).Append("\n");
            sb.Append("  NavigationCategoryDepth: ").Append(NavigationCategoryDepth).Append("\n");
            sb.Append("  FooterCategoryId: ").Append(FooterCategoryId).Append("\n");
            sb.Append("  ServiceCategoryId: ").Append(ServiceCategoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  MaintenanceIpWhitelist: ").Append(MaintenanceIpWhitelist).Append("\n");
            sb.Append("  MailHeaderFooterId: ").Append(MailHeaderFooterId).Append("\n");
            sb.Append("  CustomerGroupId: ").Append(CustomerGroupId).Append("\n");
            sb.Append("  HreflangActive: ").Append(HreflangActive).Append("\n");
            sb.Append("  HreflangDefaultDomainId: ").Append(HreflangDefaultDomainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner);
        }

        /// <summary>
        /// Returns true if ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPageRouteResponseInnerSalesChannelDefaultAssignmentsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.NavigationCategoryId == input.NavigationCategoryId ||
                    (this.NavigationCategoryId != null &&
                    this.NavigationCategoryId.Equals(input.NavigationCategoryId))
                ) && 
                (
                    this.NavigationCategoryDepth == input.NavigationCategoryDepth ||
                    this.NavigationCategoryDepth.Equals(input.NavigationCategoryDepth)
                ) && 
                (
                    this.FooterCategoryId == input.FooterCategoryId ||
                    (this.FooterCategoryId != null &&
                    this.FooterCategoryId.Equals(input.FooterCategoryId))
                ) && 
                (
                    this.ServiceCategoryId == input.ServiceCategoryId ||
                    (this.ServiceCategoryId != null &&
                    this.ServiceCategoryId.Equals(input.ServiceCategoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Maintenance == input.Maintenance ||
                    this.Maintenance.Equals(input.Maintenance)
                ) && 
                (
                    this.MaintenanceIpWhitelist == input.MaintenanceIpWhitelist ||
                    (this.MaintenanceIpWhitelist != null &&
                    this.MaintenanceIpWhitelist.Equals(input.MaintenanceIpWhitelist))
                ) && 
                (
                    this.MailHeaderFooterId == input.MailHeaderFooterId ||
                    (this.MailHeaderFooterId != null &&
                    this.MailHeaderFooterId.Equals(input.MailHeaderFooterId))
                ) && 
                (
                    this.CustomerGroupId == input.CustomerGroupId ||
                    (this.CustomerGroupId != null &&
                    this.CustomerGroupId.Equals(input.CustomerGroupId))
                ) && 
                (
                    this.HreflangActive == input.HreflangActive ||
                    this.HreflangActive.Equals(input.HreflangActive)
                ) && 
                (
                    this.HreflangDefaultDomainId == input.HreflangDefaultDomainId ||
                    (this.HreflangDefaultDomainId != null &&
                    this.HreflangDefaultDomainId.Equals(input.HreflangDefaultDomainId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.PaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodId.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.NavigationCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.NavigationCategoryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NavigationCategoryDepth.GetHashCode();
                if (this.FooterCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.FooterCategoryId.GetHashCode();
                }
                if (this.ServiceCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCategoryId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.AccessKey != null)
                {
                    hashCode = (hashCode * 59) + this.AccessKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.Maintenance.GetHashCode();
                if (this.MaintenanceIpWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.MaintenanceIpWhitelist.GetHashCode();
                }
                if (this.MailHeaderFooterId != null)
                {
                    hashCode = (hashCode * 59) + this.MailHeaderFooterId.GetHashCode();
                }
                if (this.CustomerGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerGroupId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HreflangActive.GetHashCode();
                if (this.HreflangDefaultDomainId != null)
                {
                    hashCode = (hashCode * 59) + this.HreflangDefaultDomainId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

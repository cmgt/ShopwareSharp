// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// OrderShippingCosts
    /// </summary>
    public partial class OrderShippingCosts : IEquatable<OrderShippingCosts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShippingCosts" /> class.
        /// </summary>
        /// <param name="unitPrice">unitPrice (required)</param>
        /// <param name="totalPrice">totalPrice (required)</param>
        /// <param name="quantity">quantity (required)</param>
        /// <param name="calculatedTaxes">calculatedTaxes</param>
        /// <param name="taxRules">taxRules</param>
        /// <param name="referencePrice">referencePrice</param>
        /// <param name="listPrice">listPrice</param>
        public OrderShippingCosts(float unitPrice, float totalPrice, long quantity, Object? calculatedTaxes = default, Object? taxRules = default, Object? referencePrice = default, OrderShippingCostsListPrice? listPrice = default)
        {
            if (unitPrice == null)
                throw new ArgumentNullException("unitPrice is a required property for OrderShippingCosts and cannot be null.");

            if (totalPrice == null)
                throw new ArgumentNullException("totalPrice is a required property for OrderShippingCosts and cannot be null.");

            if (quantity == null)
                throw new ArgumentNullException("quantity is a required property for OrderShippingCosts and cannot be null.");

            UnitPrice = unitPrice;
            TotalPrice = totalPrice;
            Quantity = quantity;
            CalculatedTaxes = calculatedTaxes;
            TaxRules = taxRules;
            ReferencePrice = referencePrice;
            ListPrice = listPrice;
        }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [JsonPropertyName("unitPrice")]
        public float UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [JsonPropertyName("totalPrice")]
        public float TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public long Quantity { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedTaxes
        /// </summary>
        [JsonPropertyName("calculatedTaxes")]
        public Object? CalculatedTaxes { get; set; }

        /// <summary>
        /// Gets or Sets TaxRules
        /// </summary>
        [JsonPropertyName("taxRules")]
        public Object? TaxRules { get; set; }

        /// <summary>
        /// Gets or Sets ReferencePrice
        /// </summary>
        [JsonPropertyName("referencePrice")]
        public Object? ReferencePrice { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [JsonPropertyName("listPrice")]
        public OrderShippingCostsListPrice? ListPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderShippingCosts {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  CalculatedTaxes: ").Append(CalculatedTaxes).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("  ReferencePrice: ").Append(ReferencePrice).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as OrderShippingCosts);
        }

        /// <summary>
        /// Returns true if OrderShippingCosts instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderShippingCosts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShippingCosts? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.CalculatedTaxes == input.CalculatedTaxes ||
                    (this.CalculatedTaxes != null &&
                    this.CalculatedTaxes.Equals(input.CalculatedTaxes))
                ) && 
                (
                    this.TaxRules == input.TaxRules ||
                    (this.TaxRules != null &&
                    this.TaxRules.Equals(input.TaxRules))
                ) && 
                (
                    this.ReferencePrice == input.ReferencePrice ||
                    (this.ReferencePrice != null &&
                    this.ReferencePrice.Equals(input.ReferencePrice))
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    (this.ListPrice != null &&
                    this.ListPrice.Equals(input.ListPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.CalculatedTaxes != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedTaxes.GetHashCode();
                }
                if (this.TaxRules != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRules.GetHashCode();
                }
                if (this.ReferencePrice != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencePrice.GetHashCode();
                }
                if (this.ListPrice != null)
                {
                    hashCode = (hashCode * 59) + this.ListPrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

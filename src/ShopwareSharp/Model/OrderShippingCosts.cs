/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// OrderShippingCosts
    /// </summary>
    [DataContract(Name = "Order_shippingCosts")]
    public partial class OrderShippingCosts : IEquatable<OrderShippingCosts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShippingCosts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderShippingCosts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShippingCosts" /> class.
        /// </summary>
        /// <param name="unitPrice">unitPrice (required).</param>
        /// <param name="totalPrice">totalPrice (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="calculatedTaxes">calculatedTaxes.</param>
        /// <param name="taxRules">taxRules.</param>
        /// <param name="referencePrice">referencePrice.</param>
        /// <param name="listPrice">listPrice.</param>
        public OrderShippingCosts(float unitPrice = default(float), float totalPrice = default(float), long quantity = default(long), Object calculatedTaxes = default(Object), Object taxRules = default(Object), Object referencePrice = default(Object), OrderShippingCostsListPrice listPrice = default(OrderShippingCostsListPrice))
        {
            this._UnitPrice = unitPrice;
            this._TotalPrice = totalPrice;
            this._Quantity = quantity;
            this._CalculatedTaxes = calculatedTaxes;
            if (this.CalculatedTaxes != null)
            {
                this._flagCalculatedTaxes = true;
            }
            this._TaxRules = taxRules;
            if (this.TaxRules != null)
            {
                this._flagTaxRules = true;
            }
            this._ReferencePrice = referencePrice;
            if (this.ReferencePrice != null)
            {
                this._flagReferencePrice = true;
            }
            this._ListPrice = listPrice;
            if (this.ListPrice != null)
            {
                this._flagListPrice = true;
            }
        }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = false)]
        public float UnitPrice
        {
            get{ return _UnitPrice;}
            set
            {
                _UnitPrice = value;
                _flagUnitPrice = true;
            }
        }
        private float _UnitPrice;
        private bool _flagUnitPrice;

        /// <summary>
        /// Returns false as UnitPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitPrice()
        {
            return _flagUnitPrice;
        }
        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name = "totalPrice", IsRequired = true, EmitDefaultValue = false)]
        public float TotalPrice
        {
            get{ return _TotalPrice;}
            set
            {
                _TotalPrice = value;
                _flagTotalPrice = true;
            }
        }
        private float _TotalPrice;
        private bool _flagTotalPrice;

        /// <summary>
        /// Returns false as TotalPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalPrice()
        {
            return _flagTotalPrice;
        }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public long Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private long _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// Gets or Sets CalculatedTaxes
        /// </summary>
        [DataMember(Name = "calculatedTaxes", EmitDefaultValue = false)]
        public Object CalculatedTaxes
        {
            get{ return _CalculatedTaxes;}
            set
            {
                _CalculatedTaxes = value;
                _flagCalculatedTaxes = true;
            }
        }
        private Object _CalculatedTaxes;
        private bool _flagCalculatedTaxes;

        /// <summary>
        /// Returns false as CalculatedTaxes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCalculatedTaxes()
        {
            return _flagCalculatedTaxes;
        }
        /// <summary>
        /// Gets or Sets TaxRules
        /// </summary>
        [DataMember(Name = "taxRules", EmitDefaultValue = false)]
        public Object TaxRules
        {
            get{ return _TaxRules;}
            set
            {
                _TaxRules = value;
                _flagTaxRules = true;
            }
        }
        private Object _TaxRules;
        private bool _flagTaxRules;

        /// <summary>
        /// Returns false as TaxRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxRules()
        {
            return _flagTaxRules;
        }
        /// <summary>
        /// Gets or Sets ReferencePrice
        /// </summary>
        [DataMember(Name = "referencePrice", EmitDefaultValue = false)]
        public Object ReferencePrice
        {
            get{ return _ReferencePrice;}
            set
            {
                _ReferencePrice = value;
                _flagReferencePrice = true;
            }
        }
        private Object _ReferencePrice;
        private bool _flagReferencePrice;

        /// <summary>
        /// Returns false as ReferencePrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferencePrice()
        {
            return _flagReferencePrice;
        }
        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public OrderShippingCostsListPrice ListPrice
        {
            get{ return _ListPrice;}
            set
            {
                _ListPrice = value;
                _flagListPrice = true;
            }
        }
        private OrderShippingCostsListPrice _ListPrice;
        private bool _flagListPrice;

        /// <summary>
        /// Returns false as ListPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeListPrice()
        {
            return _flagListPrice;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderShippingCosts {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  CalculatedTaxes: ").Append(CalculatedTaxes).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("  ReferencePrice: ").Append(ReferencePrice).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderShippingCosts);
        }

        /// <summary>
        /// Returns true if OrderShippingCosts instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderShippingCosts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShippingCosts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.CalculatedTaxes == input.CalculatedTaxes ||
                    (this.CalculatedTaxes != null &&
                    this.CalculatedTaxes.Equals(input.CalculatedTaxes))
                ) && 
                (
                    this.TaxRules == input.TaxRules ||
                    (this.TaxRules != null &&
                    this.TaxRules.Equals(input.TaxRules))
                ) && 
                (
                    this.ReferencePrice == input.ReferencePrice ||
                    (this.ReferencePrice != null &&
                    this.ReferencePrice.Equals(input.ReferencePrice))
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    (this.ListPrice != null &&
                    this.ListPrice.Equals(input.ListPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.CalculatedTaxes != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedTaxes.GetHashCode();
                }
                if (this.TaxRules != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRules.GetHashCode();
                }
                if (this.ReferencePrice != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencePrice.GetHashCode();
                }
                if (this.ListPrice != null)
                {
                    hashCode = (hashCode * 59) + this.ListPrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

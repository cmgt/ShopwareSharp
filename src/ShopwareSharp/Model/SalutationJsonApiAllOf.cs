// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// SalutationJsonApiAllOf
    /// </summary>
    public partial class SalutationJsonApiAllOf : IEquatable<SalutationJsonApiAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalutationJsonApiAllOf" /> class.
        /// </summary>
        /// <param name="salutationKey">salutationKey (required)</param>
        /// <param name="displayName">displayName (required)</param>
        /// <param name="letterName">letterName (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="customFields">customFields</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="translated">translated</param>
        public SalutationJsonApiAllOf(string salutationKey, string displayName, string letterName, DateTime createdAt, string? id = default, Object? customFields = default, DateTime? updatedAt = default, Object? translated = default)
        {
            if (salutationKey == null)
                throw new ArgumentNullException("salutationKey is a required property for SalutationJsonApiAllOf and cannot be null.");

            if (displayName == null)
                throw new ArgumentNullException("displayName is a required property for SalutationJsonApiAllOf and cannot be null.");

            if (letterName == null)
                throw new ArgumentNullException("letterName is a required property for SalutationJsonApiAllOf and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for SalutationJsonApiAllOf and cannot be null.");

            SalutationKey = salutationKey;
            DisplayName = displayName;
            LetterName = letterName;
            CreatedAt = createdAt;
            Id = id;
            CustomFields = customFields;
            UpdatedAt = updatedAt;
            Translated = translated;
        }

        /// <summary>
        /// Gets or Sets SalutationKey
        /// </summary>
        [JsonPropertyName("salutationKey")]
        public string SalutationKey { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets LetterName
        /// </summary>
        [JsonPropertyName("letterName")]
        public string LetterName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [JsonPropertyName("translated")]
        public Object? Translated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalutationJsonApiAllOf {\n");
            sb.Append("  SalutationKey: ").Append(SalutationKey).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  LetterName: ").Append(LetterName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as SalutationJsonApiAllOf);
        }

        /// <summary>
        /// Returns true if SalutationJsonApiAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SalutationJsonApiAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalutationJsonApiAllOf? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SalutationKey == input.SalutationKey ||
                    (this.SalutationKey != null &&
                    this.SalutationKey.Equals(input.SalutationKey))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.LetterName == input.LetterName ||
                    (this.LetterName != null &&
                    this.LetterName.Equals(input.LetterName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SalutationKey != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationKey.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.LetterName != null)
                {
                    hashCode = (hashCode * 59) + this.LetterName.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}

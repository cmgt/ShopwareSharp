/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// RegisterRequest
    /// </summary>
    [DataContract(Name = "register_request")]
    public partial class RegisterRequest : IEquatable<RegisterRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterRequest" /> class.
        /// </summary>
        /// <param name="email">Email of the customer. Has to be unique, unless &#x60;guest&#x60; is &#x60;true&#x60; (required).</param>
        /// <param name="password">Password for the customer. Required, unless &#x60;guest&#x60; is &#x60;true&#x60; (required).</param>
        /// <param name="salutationId">Id of the salutation for the customer account. Fetch options using &#x60;salutation&#x60; endpoint. (required).</param>
        /// <param name="firstName">Customer first name. Value will be reused for shipping and billing address if not provided explicitly. (required).</param>
        /// <param name="lastName">Customer last name. Value will be reused for shipping and billing address if not provided explicitly. (required).</param>
        /// <param name="acceptedDataProtection">Flag indicating accepted data protection (required).</param>
        /// <param name="storefrontUrl">URL of the storefront for that registration. Used in confirmation emails. Has to be one of the configured domains of the sales channel. (required).</param>
        /// <param name="billingAddress">billingAddress (required).</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="accountType">Account type of the customer which can be either &#x60;private&#x60; or &#x60;business&#x60;. (default to &quot;private&quot;).</param>
        /// <param name="guest">If set, will create a guest customer. Guest customers can re-use an email address and don&#39;t need a password. (default to false).</param>
        /// <param name="birthdayDay">Birthday day.</param>
        /// <param name="birthdayMonth">Birthday month.</param>
        /// <param name="birthdayYear">Birthday year.</param>
        /// <param name="title">(Academic) title of the customer.</param>
        /// <param name="affiliateCode">Field can be used to store an affiliate tracking code.</param>
        /// <param name="campaignCode">Field can be used to store a campaign tracking code.</param>
        public RegisterRequest(string email = default(string), string password = default(string), string salutationId = default(string), string firstName = default(string), string lastName = default(string), bool acceptedDataProtection = default(bool), string storefrontUrl = default(string), CustomerAddress billingAddress = default(CustomerAddress), CustomerAddress shippingAddress = default(CustomerAddress), string accountType = "private", bool guest = false, int birthdayDay = default(int), int birthdayMonth = default(int), int birthdayYear = default(int), string title = default(string), string affiliateCode = default(string), string campaignCode = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for RegisterRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for RegisterRequest and cannot be null");
            }
            this.Password = password;
            // to ensure "salutationId" is required (not null)
            if (salutationId == null)
            {
                throw new ArgumentNullException("salutationId is a required property for RegisterRequest and cannot be null");
            }
            this.SalutationId = salutationId;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for RegisterRequest and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for RegisterRequest and cannot be null");
            }
            this.LastName = lastName;
            this.AcceptedDataProtection = acceptedDataProtection;
            // to ensure "storefrontUrl" is required (not null)
            if (storefrontUrl == null)
            {
                throw new ArgumentNullException("storefrontUrl is a required property for RegisterRequest and cannot be null");
            }
            this.StorefrontUrl = storefrontUrl;
            // to ensure "billingAddress" is required (not null)
            if (billingAddress == null)
            {
                throw new ArgumentNullException("billingAddress is a required property for RegisterRequest and cannot be null");
            }
            this.BillingAddress = billingAddress;
            this.ShippingAddress = shippingAddress;
            // use default value if no "accountType" provided
            this.AccountType = accountType ?? "private";
            this.Guest = guest;
            this.BirthdayDay = birthdayDay;
            this.BirthdayMonth = birthdayMonth;
            this.BirthdayYear = birthdayYear;
            this.Title = title;
            this.AffiliateCode = affiliateCode;
            this.CampaignCode = campaignCode;
        }

        /// <summary>
        /// Email of the customer. Has to be unique, unless &#x60;guest&#x60; is &#x60;true&#x60;
        /// </summary>
        /// <value>Email of the customer. Has to be unique, unless &#x60;guest&#x60; is &#x60;true&#x60;</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Password for the customer. Required, unless &#x60;guest&#x60; is &#x60;true&#x60;
        /// </summary>
        /// <value>Password for the customer. Required, unless &#x60;guest&#x60; is &#x60;true&#x60;</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Id of the salutation for the customer account. Fetch options using &#x60;salutation&#x60; endpoint.
        /// </summary>
        /// <value>Id of the salutation for the customer account. Fetch options using &#x60;salutation&#x60; endpoint.</value>
        [DataMember(Name = "salutationId", IsRequired = true, EmitDefaultValue = false)]
        public string SalutationId { get; set; }

        /// <summary>
        /// Customer first name. Value will be reused for shipping and billing address if not provided explicitly.
        /// </summary>
        /// <value>Customer first name. Value will be reused for shipping and billing address if not provided explicitly.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Customer last name. Value will be reused for shipping and billing address if not provided explicitly.
        /// </summary>
        /// <value>Customer last name. Value will be reused for shipping and billing address if not provided explicitly.</value>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Flag indicating accepted data protection
        /// </summary>
        /// <value>Flag indicating accepted data protection</value>
        [DataMember(Name = "acceptedDataProtection", IsRequired = true, EmitDefaultValue = true)]
        public bool AcceptedDataProtection { get; set; }

        /// <summary>
        /// URL of the storefront for that registration. Used in confirmation emails. Has to be one of the configured domains of the sales channel.
        /// </summary>
        /// <value>URL of the storefront for that registration. Used in confirmation emails. Has to be one of the configured domains of the sales channel.</value>
        [DataMember(Name = "storefrontUrl", IsRequired = true, EmitDefaultValue = false)]
        public string StorefrontUrl { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", IsRequired = true, EmitDefaultValue = false)]
        public CustomerAddress BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", EmitDefaultValue = false)]
        public CustomerAddress ShippingAddress { get; set; }

        /// <summary>
        /// Account type of the customer which can be either &#x60;private&#x60; or &#x60;business&#x60;.
        /// </summary>
        /// <value>Account type of the customer which can be either &#x60;private&#x60; or &#x60;business&#x60;.</value>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// If set, will create a guest customer. Guest customers can re-use an email address and don&#39;t need a password.
        /// </summary>
        /// <value>If set, will create a guest customer. Guest customers can re-use an email address and don&#39;t need a password.</value>
        [DataMember(Name = "guest", EmitDefaultValue = true)]
        public bool Guest { get; set; }

        /// <summary>
        /// Birthday day
        /// </summary>
        /// <value>Birthday day</value>
        [DataMember(Name = "birthdayDay", EmitDefaultValue = false)]
        public int BirthdayDay { get; set; }

        /// <summary>
        /// Birthday month
        /// </summary>
        /// <value>Birthday month</value>
        [DataMember(Name = "birthdayMonth", EmitDefaultValue = false)]
        public int BirthdayMonth { get; set; }

        /// <summary>
        /// Birthday year
        /// </summary>
        /// <value>Birthday year</value>
        [DataMember(Name = "birthdayYear", EmitDefaultValue = false)]
        public int BirthdayYear { get; set; }

        /// <summary>
        /// (Academic) title of the customer
        /// </summary>
        /// <value>(Academic) title of the customer</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Field can be used to store an affiliate tracking code
        /// </summary>
        /// <value>Field can be used to store an affiliate tracking code</value>
        [DataMember(Name = "affiliateCode", EmitDefaultValue = false)]
        public string AffiliateCode { get; set; }

        /// <summary>
        /// Field can be used to store a campaign tracking code
        /// </summary>
        /// <value>Field can be used to store a campaign tracking code</value>
        [DataMember(Name = "campaignCode", EmitDefaultValue = false)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SalutationId: ").Append(SalutationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AcceptedDataProtection: ").Append(AcceptedDataProtection).Append("\n");
            sb.Append("  StorefrontUrl: ").Append(StorefrontUrl).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  BirthdayDay: ").Append(BirthdayDay).Append("\n");
            sb.Append("  BirthdayMonth: ").Append(BirthdayMonth).Append("\n");
            sb.Append("  BirthdayYear: ").Append(BirthdayYear).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AffiliateCode: ").Append(AffiliateCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterRequest);
        }

        /// <summary>
        /// Returns true if RegisterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.SalutationId == input.SalutationId ||
                    (this.SalutationId != null &&
                    this.SalutationId.Equals(input.SalutationId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.AcceptedDataProtection == input.AcceptedDataProtection ||
                    this.AcceptedDataProtection.Equals(input.AcceptedDataProtection)
                ) && 
                (
                    this.StorefrontUrl == input.StorefrontUrl ||
                    (this.StorefrontUrl != null &&
                    this.StorefrontUrl.Equals(input.StorefrontUrl))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Guest == input.Guest ||
                    this.Guest.Equals(input.Guest)
                ) && 
                (
                    this.BirthdayDay == input.BirthdayDay ||
                    this.BirthdayDay.Equals(input.BirthdayDay)
                ) && 
                (
                    this.BirthdayMonth == input.BirthdayMonth ||
                    this.BirthdayMonth.Equals(input.BirthdayMonth)
                ) && 
                (
                    this.BirthdayYear == input.BirthdayYear ||
                    this.BirthdayYear.Equals(input.BirthdayYear)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.AffiliateCode == input.AffiliateCode ||
                    (this.AffiliateCode != null &&
                    this.AffiliateCode.Equals(input.AffiliateCode))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.SalutationId != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AcceptedDataProtection.GetHashCode();
                if (this.StorefrontUrl != null)
                {
                    hashCode = (hashCode * 59) + this.StorefrontUrl.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.ShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddress.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Guest.GetHashCode();
                hashCode = (hashCode * 59) + this.BirthdayDay.GetHashCode();
                hashCode = (hashCode * 59) + this.BirthdayMonth.GetHashCode();
                hashCode = (hashCode * 59) + this.BirthdayYear.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.AffiliateCode != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliateCode.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

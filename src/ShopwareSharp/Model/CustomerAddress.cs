/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "CustomerAddress")]
    public partial class CustomerAddress : IEquatable<CustomerAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAddress" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="customerId">customerId (required).</param>
        /// <param name="countryId">countryId (required).</param>
        /// <param name="countryStateId">countryStateId.</param>
        /// <param name="salutationId">salutationId (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="zipcode">zipcode (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="company">company.</param>
        /// <param name="street">street (required).</param>
        /// <param name="department">department.</param>
        /// <param name="title">title.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="additionalAddressLine1">additionalAddressLine1.</param>
        /// <param name="additionalAddressLine2">additionalAddressLine2.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="country">country.</param>
        /// <param name="countryState">countryState.</param>
        /// <param name="salutation">salutation.</param>
        public CustomerAddress(string id = default(string), string customerId = default(string), string countryId = default(string), string countryStateId = default(string), string salutationId = default(string), string firstName = default(string), string lastName = default(string), string zipcode = default(string), string city = default(string), string company = default(string), string street = default(string), string department = default(string), string title = default(string), string phoneNumber = default(string), string additionalAddressLine1 = default(string), string additionalAddressLine2 = default(string), Object customFields = default(Object), Country country = default(Country), CountryState countryState = default(CountryState), Salutation salutation = default(Salutation))
        {
            // to ensure "customerId" is required (not null)
            if (customerId == null)
            {
                throw new ArgumentNullException("customerId is a required property for CustomerAddress and cannot be null");
            }
            this._CustomerId = customerId;
            // to ensure "countryId" is required (not null)
            if (countryId == null)
            {
                throw new ArgumentNullException("countryId is a required property for CustomerAddress and cannot be null");
            }
            this._CountryId = countryId;
            // to ensure "salutationId" is required (not null)
            if (salutationId == null)
            {
                throw new ArgumentNullException("salutationId is a required property for CustomerAddress and cannot be null");
            }
            this._SalutationId = salutationId;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for CustomerAddress and cannot be null");
            }
            this._FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for CustomerAddress and cannot be null");
            }
            this._LastName = lastName;
            // to ensure "zipcode" is required (not null)
            if (zipcode == null)
            {
                throw new ArgumentNullException("zipcode is a required property for CustomerAddress and cannot be null");
            }
            this._Zipcode = zipcode;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for CustomerAddress and cannot be null");
            }
            this._City = city;
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new ArgumentNullException("street is a required property for CustomerAddress and cannot be null");
            }
            this._Street = street;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CountryStateId = countryStateId;
            if (this.CountryStateId != null)
            {
                this._flagCountryStateId = true;
            }
            this._Company = company;
            if (this.Company != null)
            {
                this._flagCompany = true;
            }
            this._Department = department;
            if (this.Department != null)
            {
                this._flagDepartment = true;
            }
            this._Title = title;
            if (this.Title != null)
            {
                this._flagTitle = true;
            }
            this._PhoneNumber = phoneNumber;
            if (this.PhoneNumber != null)
            {
                this._flagPhoneNumber = true;
            }
            this._AdditionalAddressLine1 = additionalAddressLine1;
            if (this.AdditionalAddressLine1 != null)
            {
                this._flagAdditionalAddressLine1 = true;
            }
            this._AdditionalAddressLine2 = additionalAddressLine2;
            if (this.AdditionalAddressLine2 != null)
            {
                this._flagAdditionalAddressLine2 = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._Country = country;
            if (this.Country != null)
            {
                this._flagCountry = true;
            }
            this._CountryState = countryState;
            if (this.CountryState != null)
            {
                this._flagCountryState = true;
            }
            this._Salutation = salutation;
            if (this.Salutation != null)
            {
                this._flagSalutation = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customerId", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", IsRequired = true, EmitDefaultValue = false)]
        public string CountryId
        {
            get{ return _CountryId;}
            set
            {
                _CountryId = value;
                _flagCountryId = true;
            }
        }
        private string _CountryId;
        private bool _flagCountryId;

        /// <summary>
        /// Returns false as CountryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryId()
        {
            return _flagCountryId;
        }
        /// <summary>
        /// Gets or Sets CountryStateId
        /// </summary>
        [DataMember(Name = "countryStateId", EmitDefaultValue = false)]
        public string CountryStateId
        {
            get{ return _CountryStateId;}
            set
            {
                _CountryStateId = value;
                _flagCountryStateId = true;
            }
        }
        private string _CountryStateId;
        private bool _flagCountryStateId;

        /// <summary>
        /// Returns false as CountryStateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryStateId()
        {
            return _flagCountryStateId;
        }
        /// <summary>
        /// Gets or Sets SalutationId
        /// </summary>
        [DataMember(Name = "salutationId", IsRequired = true, EmitDefaultValue = false)]
        public string SalutationId
        {
            get{ return _SalutationId;}
            set
            {
                _SalutationId = value;
                _flagSalutationId = true;
            }
        }
        private string _SalutationId;
        private bool _flagSalutationId;

        /// <summary>
        /// Returns false as SalutationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalutationId()
        {
            return _flagSalutationId;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [DataMember(Name = "zipcode", IsRequired = true, EmitDefaultValue = false)]
        public string Zipcode
        {
            get{ return _Zipcode;}
            set
            {
                _Zipcode = value;
                _flagZipcode = true;
            }
        }
        private string _Zipcode;
        private bool _flagZipcode;

        /// <summary>
        /// Returns false as Zipcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeZipcode()
        {
            return _flagZipcode;
        }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        public string City
        {
            get{ return _City;}
            set
            {
                _City = value;
                _flagCity = true;
            }
        }
        private string _City;
        private bool _flagCity;

        /// <summary>
        /// Returns false as City should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCity()
        {
            return _flagCity;
        }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company
        {
            get{ return _Company;}
            set
            {
                _Company = value;
                _flagCompany = true;
            }
        }
        private string _Company;
        private bool _flagCompany;

        /// <summary>
        /// Returns false as Company should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompany()
        {
            return _flagCompany;
        }
        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", IsRequired = true, EmitDefaultValue = false)]
        public string Street
        {
            get{ return _Street;}
            set
            {
                _Street = value;
                _flagStreet = true;
            }
        }
        private string _Street;
        private bool _flagStreet;

        /// <summary>
        /// Returns false as Street should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStreet()
        {
            return _flagStreet;
        }
        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public string Department
        {
            get{ return _Department;}
            set
            {
                _Department = value;
                _flagDepartment = true;
            }
        }
        private string _Department;
        private bool _flagDepartment;

        /// <summary>
        /// Returns false as Department should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDepartment()
        {
            return _flagDepartment;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title
        {
            get{ return _Title;}
            set
            {
                _Title = value;
                _flagTitle = true;
            }
        }
        private string _Title;
        private bool _flagTitle;

        /// <summary>
        /// Returns false as Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTitle()
        {
            return _flagTitle;
        }
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber
        {
            get{ return _PhoneNumber;}
            set
            {
                _PhoneNumber = value;
                _flagPhoneNumber = true;
            }
        }
        private string _PhoneNumber;
        private bool _flagPhoneNumber;

        /// <summary>
        /// Returns false as PhoneNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhoneNumber()
        {
            return _flagPhoneNumber;
        }
        /// <summary>
        /// Gets or Sets AdditionalAddressLine1
        /// </summary>
        [DataMember(Name = "additionalAddressLine1", EmitDefaultValue = false)]
        public string AdditionalAddressLine1
        {
            get{ return _AdditionalAddressLine1;}
            set
            {
                _AdditionalAddressLine1 = value;
                _flagAdditionalAddressLine1 = true;
            }
        }
        private string _AdditionalAddressLine1;
        private bool _flagAdditionalAddressLine1;

        /// <summary>
        /// Returns false as AdditionalAddressLine1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAdditionalAddressLine1()
        {
            return _flagAdditionalAddressLine1;
        }
        /// <summary>
        /// Gets or Sets AdditionalAddressLine2
        /// </summary>
        [DataMember(Name = "additionalAddressLine2", EmitDefaultValue = false)]
        public string AdditionalAddressLine2
        {
            get{ return _AdditionalAddressLine2;}
            set
            {
                _AdditionalAddressLine2 = value;
                _flagAdditionalAddressLine2 = true;
            }
        }
        private string _AdditionalAddressLine2;
        private bool _flagAdditionalAddressLine2;

        /// <summary>
        /// Returns false as AdditionalAddressLine2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAdditionalAddressLine2()
        {
            return _flagAdditionalAddressLine2;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public Country Country
        {
            get{ return _Country;}
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }
        private Country _Country;
        private bool _flagCountry;

        /// <summary>
        /// Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }
        /// <summary>
        /// Gets or Sets CountryState
        /// </summary>
        [DataMember(Name = "countryState", EmitDefaultValue = false)]
        public CountryState CountryState
        {
            get{ return _CountryState;}
            set
            {
                _CountryState = value;
                _flagCountryState = true;
            }
        }
        private CountryState _CountryState;
        private bool _flagCountryState;

        /// <summary>
        /// Returns false as CountryState should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryState()
        {
            return _flagCountryState;
        }
        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name = "salutation", EmitDefaultValue = false)]
        public Salutation Salutation
        {
            get{ return _Salutation;}
            set
            {
                _Salutation = value;
                _flagSalutation = true;
            }
        }
        private Salutation _Salutation;
        private bool _flagSalutation;

        /// <summary>
        /// Returns false as Salutation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSalutation()
        {
            return _flagSalutation;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAddress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryStateId: ").Append(CountryStateId).Append("\n");
            sb.Append("  SalutationId: ").Append(SalutationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AdditionalAddressLine1: ").Append(AdditionalAddressLine1).Append("\n");
            sb.Append("  AdditionalAddressLine2: ").Append(AdditionalAddressLine2).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryState: ").Append(CountryState).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAddress);
        }

        /// <summary>
        /// Returns true if CustomerAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountryStateId == input.CountryStateId ||
                    (this.CountryStateId != null &&
                    this.CountryStateId.Equals(input.CountryStateId))
                ) && 
                (
                    this.SalutationId == input.SalutationId ||
                    (this.SalutationId != null &&
                    this.SalutationId.Equals(input.SalutationId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.AdditionalAddressLine1 == input.AdditionalAddressLine1 ||
                    (this.AdditionalAddressLine1 != null &&
                    this.AdditionalAddressLine1.Equals(input.AdditionalAddressLine1))
                ) && 
                (
                    this.AdditionalAddressLine2 == input.AdditionalAddressLine2 ||
                    (this.AdditionalAddressLine2 != null &&
                    this.AdditionalAddressLine2.Equals(input.AdditionalAddressLine2))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryState == input.CountryState ||
                    (this.CountryState != null &&
                    this.CountryState.Equals(input.CountryState))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.CountryStateId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryStateId.GetHashCode();
                }
                if (this.SalutationId != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.Department != null)
                {
                    hashCode = (hashCode * 59) + this.Department.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.AdditionalAddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalAddressLine1.GetHashCode();
                }
                if (this.AdditionalAddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalAddressLine2.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.CountryState != null)
                {
                    hashCode = (hashCode * 59) + this.CountryState.GetHashCode();
                }
                if (this.Salutation != null)
                {
                    hashCode = (hashCode * 59) + this.Salutation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // CustomerId (string) pattern
            Regex regexCustomerId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerId.Match(this.CustomerId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, must match a pattern of " + regexCustomerId, new [] { "CustomerId" });
            }

            // CountryId (string) pattern
            Regex regexCountryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCountryId.Match(this.CountryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryId, must match a pattern of " + regexCountryId, new [] { "CountryId" });
            }

            // CountryStateId (string) pattern
            Regex regexCountryStateId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCountryStateId.Match(this.CountryStateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryStateId, must match a pattern of " + regexCountryStateId, new [] { "CountryStateId" });
            }

            // SalutationId (string) pattern
            Regex regexSalutationId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalutationId.Match(this.SalutationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalutationId, must match a pattern of " + regexSalutationId, new [] { "SalutationId" });
            }

            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "ShippingMethodPrice")]
    public partial class ShippingMethodPrice : IEquatable<ShippingMethodPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingMethodPrice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPrice" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="shippingMethodId">shippingMethodId (required).</param>
        /// <param name="ruleId">ruleId.</param>
        /// <param name="calculation">calculation.</param>
        /// <param name="calculationRuleId">calculationRuleId.</param>
        /// <param name="quantityStart">quantityStart.</param>
        /// <param name="quantityEnd">quantityEnd.</param>
        /// <param name="currencyPrice">currencyPrice.</param>
        /// <param name="customFields">customFields.</param>
        public ShippingMethodPrice(string id = default(string), string shippingMethodId = default(string), string ruleId = default(string), long calculation = default(long), string calculationRuleId = default(string), float quantityStart = default(float), float quantityEnd = default(float), Object currencyPrice = default(Object), Object customFields = default(Object))
        {
            // to ensure "shippingMethodId" is required (not null)
            if (shippingMethodId == null)
            {
                throw new ArgumentNullException("shippingMethodId is a required property for ShippingMethodPrice and cannot be null");
            }
            this._ShippingMethodId = shippingMethodId;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._RuleId = ruleId;
            if (this.RuleId != null)
            {
                this._flagRuleId = true;
            }
            this._Calculation = calculation;
            if (this.Calculation != null)
            {
                this._flagCalculation = true;
            }
            this._CalculationRuleId = calculationRuleId;
            if (this.CalculationRuleId != null)
            {
                this._flagCalculationRuleId = true;
            }
            this._QuantityStart = quantityStart;
            if (this.QuantityStart != null)
            {
                this._flagQuantityStart = true;
            }
            this._QuantityEnd = quantityEnd;
            if (this.QuantityEnd != null)
            {
                this._flagQuantityEnd = true;
            }
            this._CurrencyPrice = currencyPrice;
            if (this.CurrencyPrice != null)
            {
                this._flagCurrencyPrice = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [DataMember(Name = "shippingMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingMethodId
        {
            get{ return _ShippingMethodId;}
            set
            {
                _ShippingMethodId = value;
                _flagShippingMethodId = true;
            }
        }
        private string _ShippingMethodId;
        private bool _flagShippingMethodId;

        /// <summary>
        /// Returns false as ShippingMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethodId()
        {
            return _flagShippingMethodId;
        }
        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public string RuleId
        {
            get{ return _RuleId;}
            set
            {
                _RuleId = value;
                _flagRuleId = true;
            }
        }
        private string _RuleId;
        private bool _flagRuleId;

        /// <summary>
        /// Returns false as RuleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRuleId()
        {
            return _flagRuleId;
        }
        /// <summary>
        /// Gets or Sets Calculation
        /// </summary>
        [DataMember(Name = "calculation", EmitDefaultValue = false)]
        public long Calculation
        {
            get{ return _Calculation;}
            set
            {
                _Calculation = value;
                _flagCalculation = true;
            }
        }
        private long _Calculation;
        private bool _flagCalculation;

        /// <summary>
        /// Returns false as Calculation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCalculation()
        {
            return _flagCalculation;
        }
        /// <summary>
        /// Gets or Sets CalculationRuleId
        /// </summary>
        [DataMember(Name = "calculationRuleId", EmitDefaultValue = false)]
        public string CalculationRuleId
        {
            get{ return _CalculationRuleId;}
            set
            {
                _CalculationRuleId = value;
                _flagCalculationRuleId = true;
            }
        }
        private string _CalculationRuleId;
        private bool _flagCalculationRuleId;

        /// <summary>
        /// Returns false as CalculationRuleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCalculationRuleId()
        {
            return _flagCalculationRuleId;
        }
        /// <summary>
        /// Gets or Sets QuantityStart
        /// </summary>
        [DataMember(Name = "quantityStart", EmitDefaultValue = false)]
        public float QuantityStart
        {
            get{ return _QuantityStart;}
            set
            {
                _QuantityStart = value;
                _flagQuantityStart = true;
            }
        }
        private float _QuantityStart;
        private bool _flagQuantityStart;

        /// <summary>
        /// Returns false as QuantityStart should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantityStart()
        {
            return _flagQuantityStart;
        }
        /// <summary>
        /// Gets or Sets QuantityEnd
        /// </summary>
        [DataMember(Name = "quantityEnd", EmitDefaultValue = false)]
        public float QuantityEnd
        {
            get{ return _QuantityEnd;}
            set
            {
                _QuantityEnd = value;
                _flagQuantityEnd = true;
            }
        }
        private float _QuantityEnd;
        private bool _flagQuantityEnd;

        /// <summary>
        /// Returns false as QuantityEnd should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantityEnd()
        {
            return _flagQuantityEnd;
        }
        /// <summary>
        /// Gets or Sets CurrencyPrice
        /// </summary>
        [DataMember(Name = "currencyPrice", EmitDefaultValue = false)]
        public Object CurrencyPrice
        {
            get{ return _CurrencyPrice;}
            set
            {
                _CurrencyPrice = value;
                _flagCurrencyPrice = true;
            }
        }
        private Object _CurrencyPrice;
        private bool _flagCurrencyPrice;

        /// <summary>
        /// Returns false as CurrencyPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyPrice()
        {
            return _flagCurrencyPrice;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPrice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  CalculationRuleId: ").Append(CalculationRuleId).Append("\n");
            sb.Append("  QuantityStart: ").Append(QuantityStart).Append("\n");
            sb.Append("  QuantityEnd: ").Append(QuantityEnd).Append("\n");
            sb.Append("  CurrencyPrice: ").Append(CurrencyPrice).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingMethodPrice);
        }

        /// <summary>
        /// Returns true if ShippingMethodPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPrice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    this.Calculation.Equals(input.Calculation)
                ) && 
                (
                    this.CalculationRuleId == input.CalculationRuleId ||
                    (this.CalculationRuleId != null &&
                    this.CalculationRuleId.Equals(input.CalculationRuleId))
                ) && 
                (
                    this.QuantityStart == input.QuantityStart ||
                    this.QuantityStart.Equals(input.QuantityStart)
                ) && 
                (
                    this.QuantityEnd == input.QuantityEnd ||
                    this.QuantityEnd.Equals(input.QuantityEnd)
                ) && 
                (
                    this.CurrencyPrice == input.CurrencyPrice ||
                    (this.CurrencyPrice != null &&
                    this.CurrencyPrice.Equals(input.CurrencyPrice))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Calculation.GetHashCode();
                if (this.CalculationRuleId != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationRuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuantityStart.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityEnd.GetHashCode();
                if (this.CurrencyPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyPrice.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // ShippingMethodId (string) pattern
            Regex regexShippingMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingMethodId.Match(this.ShippingMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMethodId, must match a pattern of " + regexShippingMethodId, new [] { "ShippingMethodId" });
            }

            // RuleId (string) pattern
            Regex regexRuleId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexRuleId.Match(this.RuleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, must match a pattern of " + regexRuleId, new [] { "RuleId" });
            }

            // CalculationRuleId (string) pattern
            Regex regexCalculationRuleId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCalculationRuleId.Match(this.CalculationRuleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationRuleId, must match a pattern of " + regexCalculationRuleId, new [] { "CalculationRuleId" });
            }

            yield break;
        }
    }

}

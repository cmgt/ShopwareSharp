/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "SalesChannel")]
    public partial class SalesChannel : IEquatable<SalesChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SalesChannel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="languageId">languageId (required).</param>
        /// <param name="customerGroupId">customerGroupId (required).</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="paymentMethodId">paymentMethodId (required).</param>
        /// <param name="shippingMethodId">shippingMethodId (required).</param>
        /// <param name="countryId">countryId (required).</param>
        /// <param name="navigationCategoryId">navigationCategoryId (required).</param>
        /// <param name="navigationCategoryVersionId">navigationCategoryVersionId.</param>
        /// <param name="navigationCategoryDepth">navigationCategoryDepth.</param>
        /// <param name="footerCategoryId">footerCategoryId.</param>
        /// <param name="footerCategoryVersionId">footerCategoryVersionId.</param>
        /// <param name="serviceCategoryId">serviceCategoryId.</param>
        /// <param name="serviceCategoryVersionId">serviceCategoryVersionId.</param>
        /// <param name="mailHeaderFooterId">mailHeaderFooterId.</param>
        /// <param name="hreflangDefaultDomainId">hreflangDefaultDomainId.</param>
        /// <param name="name">name (required).</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="taxCalculationType">taxCalculationType.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="active">active.</param>
        /// <param name="hreflangActive">hreflangActive.</param>
        /// <param name="maintenance">maintenance.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="translated">translated.</param>
        /// <param name="language">language.</param>
        /// <param name="currency">currency.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="country">country.</param>
        /// <param name="domains">domains.</param>
        /// <param name="navigationCategory">navigationCategory.</param>
        /// <param name="footerCategory">footerCategory.</param>
        /// <param name="serviceCategory">serviceCategory.</param>
        /// <param name="hreflangDefaultDomain">hreflangDefaultDomain.</param>
        public SalesChannel(string id = default(string), string languageId = default(string), string customerGroupId = default(string), string currencyId = default(string), string paymentMethodId = default(string), string shippingMethodId = default(string), string countryId = default(string), string navigationCategoryId = default(string), string navigationCategoryVersionId = default(string), long navigationCategoryDepth = default(long), string footerCategoryId = default(string), string footerCategoryVersionId = default(string), string serviceCategoryId = default(string), string serviceCategoryVersionId = default(string), string mailHeaderFooterId = default(string), string hreflangDefaultDomainId = default(string), string name = default(string), string shortName = default(string), string taxCalculationType = default(string), Object configuration = default(Object), bool active = default(bool), bool hreflangActive = default(bool), bool maintenance = default(bool), Object customFields = default(Object), Object translated = default(Object), Language language = default(Language), Currency currency = default(Currency), PaymentMethod paymentMethod = default(PaymentMethod), ShippingMethod shippingMethod = default(ShippingMethod), Country country = default(Country), SalesChannelDomain domains = default(SalesChannelDomain), Category navigationCategory = default(Category), Category footerCategory = default(Category), Category serviceCategory = default(Category), SalesChannelDomain hreflangDefaultDomain = default(SalesChannelDomain))
        {
            // to ensure "languageId" is required (not null)
            if (languageId == null)
            {
                throw new ArgumentNullException("languageId is a required property for SalesChannel and cannot be null");
            }
            this.LanguageId = languageId;
            // to ensure "customerGroupId" is required (not null)
            if (customerGroupId == null)
            {
                throw new ArgumentNullException("customerGroupId is a required property for SalesChannel and cannot be null");
            }
            this.CustomerGroupId = customerGroupId;
            // to ensure "currencyId" is required (not null)
            if (currencyId == null)
            {
                throw new ArgumentNullException("currencyId is a required property for SalesChannel and cannot be null");
            }
            this.CurrencyId = currencyId;
            // to ensure "paymentMethodId" is required (not null)
            if (paymentMethodId == null)
            {
                throw new ArgumentNullException("paymentMethodId is a required property for SalesChannel and cannot be null");
            }
            this.PaymentMethodId = paymentMethodId;
            // to ensure "shippingMethodId" is required (not null)
            if (shippingMethodId == null)
            {
                throw new ArgumentNullException("shippingMethodId is a required property for SalesChannel and cannot be null");
            }
            this.ShippingMethodId = shippingMethodId;
            // to ensure "countryId" is required (not null)
            if (countryId == null)
            {
                throw new ArgumentNullException("countryId is a required property for SalesChannel and cannot be null");
            }
            this.CountryId = countryId;
            // to ensure "navigationCategoryId" is required (not null)
            if (navigationCategoryId == null)
            {
                throw new ArgumentNullException("navigationCategoryId is a required property for SalesChannel and cannot be null");
            }
            this.NavigationCategoryId = navigationCategoryId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SalesChannel and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.NavigationCategoryVersionId = navigationCategoryVersionId;
            this.NavigationCategoryDepth = navigationCategoryDepth;
            this.FooterCategoryId = footerCategoryId;
            this.FooterCategoryVersionId = footerCategoryVersionId;
            this.ServiceCategoryId = serviceCategoryId;
            this.ServiceCategoryVersionId = serviceCategoryVersionId;
            this.MailHeaderFooterId = mailHeaderFooterId;
            this.HreflangDefaultDomainId = hreflangDefaultDomainId;
            this.ShortName = shortName;
            this.TaxCalculationType = taxCalculationType;
            this._Configuration = configuration;
            this.Active = active;
            this.HreflangActive = hreflangActive;
            this.Maintenance = maintenance;
            this.CustomFields = customFields;
            this.Translated = translated;
            this.Language = language;
            this.Currency = currency;
            this.PaymentMethod = paymentMethod;
            this.ShippingMethod = shippingMethod;
            this.Country = country;
            this.Domains = domains;
            this.NavigationCategory = navigationCategory;
            this.FooterCategory = footerCategory;
            this.ServiceCategory = serviceCategory;
            this.HreflangDefaultDomain = hreflangDefaultDomain;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroupId
        /// </summary>
        [DataMember(Name = "customerGroupId", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", IsRequired = true, EmitDefaultValue = false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [DataMember(Name = "paymentMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [DataMember(Name = "shippingMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingMethodId { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", IsRequired = true, EmitDefaultValue = false)]
        public string CountryId { get; set; }

        /// <summary>
        /// Gets or Sets NavigationCategoryId
        /// </summary>
        [DataMember(Name = "navigationCategoryId", IsRequired = true, EmitDefaultValue = false)]
        public string NavigationCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets NavigationCategoryVersionId
        /// </summary>
        [DataMember(Name = "navigationCategoryVersionId", EmitDefaultValue = false)]
        public string NavigationCategoryVersionId { get; set; }

        /// <summary>
        /// Gets or Sets NavigationCategoryDepth
        /// </summary>
        [DataMember(Name = "navigationCategoryDepth", EmitDefaultValue = false)]
        public long NavigationCategoryDepth { get; set; }

        /// <summary>
        /// Gets or Sets FooterCategoryId
        /// </summary>
        [DataMember(Name = "footerCategoryId", EmitDefaultValue = false)]
        public string FooterCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets FooterCategoryVersionId
        /// </summary>
        [DataMember(Name = "footerCategoryVersionId", EmitDefaultValue = false)]
        public string FooterCategoryVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCategoryId
        /// </summary>
        [DataMember(Name = "serviceCategoryId", EmitDefaultValue = false)]
        public string ServiceCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCategoryVersionId
        /// </summary>
        [DataMember(Name = "serviceCategoryVersionId", EmitDefaultValue = false)]
        public string ServiceCategoryVersionId { get; set; }

        /// <summary>
        /// Gets or Sets MailHeaderFooterId
        /// </summary>
        [DataMember(Name = "mailHeaderFooterId", EmitDefaultValue = false)]
        public string MailHeaderFooterId { get; set; }

        /// <summary>
        /// Gets or Sets HreflangDefaultDomainId
        /// </summary>
        [DataMember(Name = "hreflangDefaultDomainId", EmitDefaultValue = false)]
        public string HreflangDefaultDomainId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets TaxCalculationType
        /// </summary>
        [DataMember(Name = "taxCalculationType", EmitDefaultValue = false)]
        public string TaxCalculationType { get; set; }

        /// <summary>
        /// Gets or Sets _Configuration
        /// </summary>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public Object _Configuration { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets HreflangActive
        /// </summary>
        [DataMember(Name = "hreflangActive", EmitDefaultValue = true)]
        public bool HreflangActive { get; set; }

        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        [DataMember(Name = "maintenance", EmitDefaultValue = true)]
        public bool Maintenance { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "shippingMethod", EmitDefaultValue = false)]
        public ShippingMethod ShippingMethod { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [DataMember(Name = "domains", EmitDefaultValue = false)]
        public SalesChannelDomain Domains { get; set; }

        /// <summary>
        /// Gets or Sets NavigationCategory
        /// </summary>
        [DataMember(Name = "navigationCategory", EmitDefaultValue = false)]
        public Category NavigationCategory { get; set; }

        /// <summary>
        /// Gets or Sets FooterCategory
        /// </summary>
        [DataMember(Name = "footerCategory", EmitDefaultValue = false)]
        public Category FooterCategory { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCategory
        /// </summary>
        [DataMember(Name = "serviceCategory", EmitDefaultValue = false)]
        public Category ServiceCategory { get; set; }

        /// <summary>
        /// Gets or Sets HreflangDefaultDomain
        /// </summary>
        [DataMember(Name = "hreflangDefaultDomain", EmitDefaultValue = false)]
        public SalesChannelDomain HreflangDefaultDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  CustomerGroupId: ").Append(CustomerGroupId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  NavigationCategoryId: ").Append(NavigationCategoryId).Append("\n");
            sb.Append("  NavigationCategoryVersionId: ").Append(NavigationCategoryVersionId).Append("\n");
            sb.Append("  NavigationCategoryDepth: ").Append(NavigationCategoryDepth).Append("\n");
            sb.Append("  FooterCategoryId: ").Append(FooterCategoryId).Append("\n");
            sb.Append("  FooterCategoryVersionId: ").Append(FooterCategoryVersionId).Append("\n");
            sb.Append("  ServiceCategoryId: ").Append(ServiceCategoryId).Append("\n");
            sb.Append("  ServiceCategoryVersionId: ").Append(ServiceCategoryVersionId).Append("\n");
            sb.Append("  MailHeaderFooterId: ").Append(MailHeaderFooterId).Append("\n");
            sb.Append("  HreflangDefaultDomainId: ").Append(HreflangDefaultDomainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  TaxCalculationType: ").Append(TaxCalculationType).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  HreflangActive: ").Append(HreflangActive).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  NavigationCategory: ").Append(NavigationCategory).Append("\n");
            sb.Append("  FooterCategory: ").Append(FooterCategory).Append("\n");
            sb.Append("  ServiceCategory: ").Append(ServiceCategory).Append("\n");
            sb.Append("  HreflangDefaultDomain: ").Append(HreflangDefaultDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannel);
        }

        /// <summary>
        /// Returns true if SalesChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.CustomerGroupId == input.CustomerGroupId ||
                    (this.CustomerGroupId != null &&
                    this.CustomerGroupId.Equals(input.CustomerGroupId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.NavigationCategoryId == input.NavigationCategoryId ||
                    (this.NavigationCategoryId != null &&
                    this.NavigationCategoryId.Equals(input.NavigationCategoryId))
                ) && 
                (
                    this.NavigationCategoryVersionId == input.NavigationCategoryVersionId ||
                    (this.NavigationCategoryVersionId != null &&
                    this.NavigationCategoryVersionId.Equals(input.NavigationCategoryVersionId))
                ) && 
                (
                    this.NavigationCategoryDepth == input.NavigationCategoryDepth ||
                    this.NavigationCategoryDepth.Equals(input.NavigationCategoryDepth)
                ) && 
                (
                    this.FooterCategoryId == input.FooterCategoryId ||
                    (this.FooterCategoryId != null &&
                    this.FooterCategoryId.Equals(input.FooterCategoryId))
                ) && 
                (
                    this.FooterCategoryVersionId == input.FooterCategoryVersionId ||
                    (this.FooterCategoryVersionId != null &&
                    this.FooterCategoryVersionId.Equals(input.FooterCategoryVersionId))
                ) && 
                (
                    this.ServiceCategoryId == input.ServiceCategoryId ||
                    (this.ServiceCategoryId != null &&
                    this.ServiceCategoryId.Equals(input.ServiceCategoryId))
                ) && 
                (
                    this.ServiceCategoryVersionId == input.ServiceCategoryVersionId ||
                    (this.ServiceCategoryVersionId != null &&
                    this.ServiceCategoryVersionId.Equals(input.ServiceCategoryVersionId))
                ) && 
                (
                    this.MailHeaderFooterId == input.MailHeaderFooterId ||
                    (this.MailHeaderFooterId != null &&
                    this.MailHeaderFooterId.Equals(input.MailHeaderFooterId))
                ) && 
                (
                    this.HreflangDefaultDomainId == input.HreflangDefaultDomainId ||
                    (this.HreflangDefaultDomainId != null &&
                    this.HreflangDefaultDomainId.Equals(input.HreflangDefaultDomainId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.TaxCalculationType == input.TaxCalculationType ||
                    (this.TaxCalculationType != null &&
                    this.TaxCalculationType.Equals(input.TaxCalculationType))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    (this._Configuration != null &&
                    this._Configuration.Equals(input._Configuration))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.HreflangActive == input.HreflangActive ||
                    this.HreflangActive.Equals(input.HreflangActive)
                ) && 
                (
                    this.Maintenance == input.Maintenance ||
                    this.Maintenance.Equals(input.Maintenance)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Domains == input.Domains ||
                    (this.Domains != null &&
                    this.Domains.Equals(input.Domains))
                ) && 
                (
                    this.NavigationCategory == input.NavigationCategory ||
                    (this.NavigationCategory != null &&
                    this.NavigationCategory.Equals(input.NavigationCategory))
                ) && 
                (
                    this.FooterCategory == input.FooterCategory ||
                    (this.FooterCategory != null &&
                    this.FooterCategory.Equals(input.FooterCategory))
                ) && 
                (
                    this.ServiceCategory == input.ServiceCategory ||
                    (this.ServiceCategory != null &&
                    this.ServiceCategory.Equals(input.ServiceCategory))
                ) && 
                (
                    this.HreflangDefaultDomain == input.HreflangDefaultDomain ||
                    (this.HreflangDefaultDomain != null &&
                    this.HreflangDefaultDomain.Equals(input.HreflangDefaultDomain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.CustomerGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerGroupId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.PaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodId.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.NavigationCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.NavigationCategoryId.GetHashCode();
                }
                if (this.NavigationCategoryVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.NavigationCategoryVersionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NavigationCategoryDepth.GetHashCode();
                if (this.FooterCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.FooterCategoryId.GetHashCode();
                }
                if (this.FooterCategoryVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.FooterCategoryVersionId.GetHashCode();
                }
                if (this.ServiceCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCategoryId.GetHashCode();
                }
                if (this.ServiceCategoryVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCategoryVersionId.GetHashCode();
                }
                if (this.MailHeaderFooterId != null)
                {
                    hashCode = (hashCode * 59) + this.MailHeaderFooterId.GetHashCode();
                }
                if (this.HreflangDefaultDomainId != null)
                {
                    hashCode = (hashCode * 59) + this.HreflangDefaultDomainId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.TaxCalculationType != null)
                {
                    hashCode = (hashCode * 59) + this.TaxCalculationType.GetHashCode();
                }
                if (this._Configuration != null)
                {
                    hashCode = (hashCode * 59) + this._Configuration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.HreflangActive.GetHashCode();
                hashCode = (hashCode * 59) + this.Maintenance.GetHashCode();
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Domains != null)
                {
                    hashCode = (hashCode * 59) + this.Domains.GetHashCode();
                }
                if (this.NavigationCategory != null)
                {
                    hashCode = (hashCode * 59) + this.NavigationCategory.GetHashCode();
                }
                if (this.FooterCategory != null)
                {
                    hashCode = (hashCode * 59) + this.FooterCategory.GetHashCode();
                }
                if (this.ServiceCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCategory.GetHashCode();
                }
                if (this.HreflangDefaultDomain != null)
                {
                    hashCode = (hashCode * 59) + this.HreflangDefaultDomain.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // CustomerGroupId (string) pattern
            Regex regexCustomerGroupId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerGroupId.Match(this.CustomerGroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerGroupId, must match a pattern of " + regexCustomerGroupId, new [] { "CustomerGroupId" });
            }

            // CurrencyId (string) pattern
            Regex regexCurrencyId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCurrencyId.Match(this.CurrencyId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyId, must match a pattern of " + regexCurrencyId, new [] { "CurrencyId" });
            }

            // PaymentMethodId (string) pattern
            Regex regexPaymentMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexPaymentMethodId.Match(this.PaymentMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethodId, must match a pattern of " + regexPaymentMethodId, new [] { "PaymentMethodId" });
            }

            // ShippingMethodId (string) pattern
            Regex regexShippingMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingMethodId.Match(this.ShippingMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMethodId, must match a pattern of " + regexShippingMethodId, new [] { "ShippingMethodId" });
            }

            // CountryId (string) pattern
            Regex regexCountryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCountryId.Match(this.CountryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryId, must match a pattern of " + regexCountryId, new [] { "CountryId" });
            }

            // NavigationCategoryId (string) pattern
            Regex regexNavigationCategoryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexNavigationCategoryId.Match(this.NavigationCategoryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NavigationCategoryId, must match a pattern of " + regexNavigationCategoryId, new [] { "NavigationCategoryId" });
            }

            // NavigationCategoryVersionId (string) pattern
            Regex regexNavigationCategoryVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexNavigationCategoryVersionId.Match(this.NavigationCategoryVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NavigationCategoryVersionId, must match a pattern of " + regexNavigationCategoryVersionId, new [] { "NavigationCategoryVersionId" });
            }

            // FooterCategoryId (string) pattern
            Regex regexFooterCategoryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexFooterCategoryId.Match(this.FooterCategoryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FooterCategoryId, must match a pattern of " + regexFooterCategoryId, new [] { "FooterCategoryId" });
            }

            // FooterCategoryVersionId (string) pattern
            Regex regexFooterCategoryVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexFooterCategoryVersionId.Match(this.FooterCategoryVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FooterCategoryVersionId, must match a pattern of " + regexFooterCategoryVersionId, new [] { "FooterCategoryVersionId" });
            }

            // ServiceCategoryId (string) pattern
            Regex regexServiceCategoryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexServiceCategoryId.Match(this.ServiceCategoryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceCategoryId, must match a pattern of " + regexServiceCategoryId, new [] { "ServiceCategoryId" });
            }

            // ServiceCategoryVersionId (string) pattern
            Regex regexServiceCategoryVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexServiceCategoryVersionId.Match(this.ServiceCategoryVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceCategoryVersionId, must match a pattern of " + regexServiceCategoryVersionId, new [] { "ServiceCategoryVersionId" });
            }

            // MailHeaderFooterId (string) pattern
            Regex regexMailHeaderFooterId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexMailHeaderFooterId.Match(this.MailHeaderFooterId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailHeaderFooterId, must match a pattern of " + regexMailHeaderFooterId, new [] { "MailHeaderFooterId" });
            }

            // HreflangDefaultDomainId (string) pattern
            Regex regexHreflangDefaultDomainId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexHreflangDefaultDomainId.Match(this.HreflangDefaultDomainId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HreflangDefaultDomainId, must match a pattern of " + regexHreflangDefaultDomainId, new [] { "HreflangDefaultDomainId" });
            }

            yield break;
        }
    }

}

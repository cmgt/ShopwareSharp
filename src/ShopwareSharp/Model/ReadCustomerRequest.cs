/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ReadCustomerRequest
    /// </summary>
    [DataContract(Name = "readCustomer_request")]
    public partial class ReadCustomerRequest : IEquatable<ReadCustomerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadCustomerRequest" /> class.
        /// </summary>
        /// <param name="page">Search result page.</param>
        /// <param name="limit">Number of items per result page.</param>
        /// <param name="filter">List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter).</param>
        /// <param name="sort">Sorting in the search result..</param>
        /// <param name="postFilter">Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter).</param>
        /// <param name="associations">Used to fetch associations which are not fetched by default..</param>
        /// <param name="aggregations">Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations).</param>
        /// <param name="grouping">Perform groupings over certain fields.</param>
        public ReadCustomerRequest(int page = default(int), int limit = default(int), List<CriteriaFilterInner> filter = default(List<CriteriaFilterInner>), List<CriteriaSortInner> sort = default(List<CriteriaSortInner>), List<CriteriaFilterInner> postFilter = default(List<CriteriaFilterInner>), Object associations = default(Object), List<CriteriaAggregationsInner> aggregations = default(List<CriteriaAggregationsInner>), List<string> grouping = default(List<string>))
        {
            this._Page = page;
            if (this.Page != null)
            {
                this._flagPage = true;
            }
            this._Limit = limit;
            if (this.Limit != null)
            {
                this._flagLimit = true;
            }
            this._Filter = filter;
            if (this.Filter != null)
            {
                this._flagFilter = true;
            }
            this._Sort = sort;
            if (this.Sort != null)
            {
                this._flagSort = true;
            }
            this._PostFilter = postFilter;
            if (this.PostFilter != null)
            {
                this._flagPostFilter = true;
            }
            this._Associations = associations;
            if (this.Associations != null)
            {
                this._flagAssociations = true;
            }
            this._Aggregations = aggregations;
            if (this.Aggregations != null)
            {
                this._flagAggregations = true;
            }
            this._Grouping = grouping;
            if (this.Grouping != null)
            {
                this._flagGrouping = true;
            }
        }

        /// <summary>
        /// Search result page
        /// </summary>
        /// <value>Search result page</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page
        {
            get{ return _Page;}
            set
            {
                _Page = value;
                _flagPage = true;
            }
        }
        private int _Page;
        private bool _flagPage;

        /// <summary>
        /// Returns false as Page should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePage()
        {
            return _flagPage;
        }
        /// <summary>
        /// Number of items per result page
        /// </summary>
        /// <value>Number of items per result page</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit
        {
            get{ return _Limit;}
            set
            {
                _Limit = value;
                _flagLimit = true;
            }
        }
        private int _Limit;
        private bool _flagLimit;

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return _flagLimit;
        }
        /// <summary>
        /// List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)
        /// </summary>
        /// <value>List of filters to restrict the search result. For more information, see [Search Queries &gt; Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter)</value>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public List<CriteriaFilterInner> Filter
        {
            get{ return _Filter;}
            set
            {
                _Filter = value;
                _flagFilter = true;
            }
        }
        private List<CriteriaFilterInner> _Filter;
        private bool _flagFilter;

        /// <summary>
        /// Returns false as Filter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFilter()
        {
            return _flagFilter;
        }
        /// <summary>
        /// Sorting in the search result.
        /// </summary>
        /// <value>Sorting in the search result.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public List<CriteriaSortInner> Sort
        {
            get{ return _Sort;}
            set
            {
                _Sort = value;
                _flagSort = true;
            }
        }
        private List<CriteriaSortInner> _Sort;
        private bool _flagSort;

        /// <summary>
        /// Returns false as Sort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSort()
        {
            return _flagSort;
        }
        /// <summary>
        /// Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)
        /// </summary>
        /// <value>Filters that applied without affecting aggregations. For more information, see [Search Queries &gt; Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter)</value>
        [DataMember(Name = "post-filter", EmitDefaultValue = false)]
        public List<CriteriaFilterInner> PostFilter
        {
            get{ return _PostFilter;}
            set
            {
                _PostFilter = value;
                _flagPostFilter = true;
            }
        }
        private List<CriteriaFilterInner> _PostFilter;
        private bool _flagPostFilter;

        /// <summary>
        /// Returns false as PostFilter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostFilter()
        {
            return _flagPostFilter;
        }
        /// <summary>
        /// Used to fetch associations which are not fetched by default.
        /// </summary>
        /// <value>Used to fetch associations which are not fetched by default.</value>
        [DataMember(Name = "associations", EmitDefaultValue = false)]
        public Object Associations
        {
            get{ return _Associations;}
            set
            {
                _Associations = value;
                _flagAssociations = true;
            }
        }
        private Object _Associations;
        private bool _flagAssociations;

        /// <summary>
        /// Returns false as Associations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssociations()
        {
            return _flagAssociations;
        }
        /// <summary>
        /// Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)
        /// </summary>
        /// <value>Used to perform aggregations on the search result. For more information, see [Search Queries &gt; Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations)</value>
        [DataMember(Name = "aggregations", EmitDefaultValue = false)]
        public List<CriteriaAggregationsInner> Aggregations
        {
            get{ return _Aggregations;}
            set
            {
                _Aggregations = value;
                _flagAggregations = true;
            }
        }
        private List<CriteriaAggregationsInner> _Aggregations;
        private bool _flagAggregations;

        /// <summary>
        /// Returns false as Aggregations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregations()
        {
            return _flagAggregations;
        }
        /// <summary>
        /// Perform groupings over certain fields
        /// </summary>
        /// <value>Perform groupings over certain fields</value>
        [DataMember(Name = "grouping", EmitDefaultValue = false)]
        public List<string> Grouping
        {
            get{ return _Grouping;}
            set
            {
                _Grouping = value;
                _flagGrouping = true;
            }
        }
        private List<string> _Grouping;
        private bool _flagGrouping;

        /// <summary>
        /// Returns false as Grouping should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrouping()
        {
            return _flagGrouping;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadCustomerRequest {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  PostFilter: ").Append(PostFilter).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadCustomerRequest);
        }

        /// <summary>
        /// Returns true if ReadCustomerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadCustomerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadCustomerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    input.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                ) && 
                (
                    this.PostFilter == input.PostFilter ||
                    this.PostFilter != null &&
                    input.PostFilter != null &&
                    this.PostFilter.SequenceEqual(input.PostFilter)
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    input.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.Grouping == input.Grouping ||
                    this.Grouping != null &&
                    input.Grouping != null &&
                    this.Grouping.SequenceEqual(input.Grouping)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                if (this.PostFilter != null)
                {
                    hashCode = (hashCode * 59) + this.PostFilter.GetHashCode();
                }
                if (this.Associations != null)
                {
                    hashCode = (hashCode * 59) + this.Associations.GetHashCode();
                }
                if (this.Aggregations != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregations.GetHashCode();
                }
                if (this.Grouping != null)
                {
                    hashCode = (hashCode * 59) + this.Grouping.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

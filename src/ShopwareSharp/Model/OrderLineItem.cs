/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "OrderLineItem")]
    public partial class OrderLineItem : IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="orderVersionId">orderVersionId.</param>
        /// <param name="productId">productId.</param>
        /// <param name="productVersionId">productVersionId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="parentVersionId">parentVersionId.</param>
        /// <param name="coverId">coverId.</param>
        /// <param name="identifier">identifier (required).</param>
        /// <param name="referencedId">referencedId.</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="label">label (required).</param>
        /// <param name="payload">payload.</param>
        /// <param name="good">good.</param>
        /// <param name="removable">removable.</param>
        /// <param name="stackable">stackable.</param>
        /// <param name="position">position (required).</param>
        /// <param name="priceDefinition">priceDefinition.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="cover">cover.</param>
        /// <param name="orderDeliveryPositions">orderDeliveryPositions.</param>
        /// <param name="parent">parent.</param>
        /// <param name="children">children (required).</param>
        public OrderLineItem(string id = default(string), string versionId = default(string), string orderId = default(string), string orderVersionId = default(string), string productId = default(string), string productVersionId = default(string), string parentId = default(string), string parentVersionId = default(string), string coverId = default(string), string identifier = default(string), string referencedId = default(string), long quantity = default(long), string label = default(string), Object payload = default(Object), bool good = default(bool), bool removable = default(bool), bool stackable = default(bool), long position = default(long), Object priceDefinition = default(Object), float unitPrice = default(float), float totalPrice = default(float), string description = default(string), string type = default(string), Object customFields = default(Object), Media cover = default(Media), OrderDeliveryPosition orderDeliveryPositions = default(OrderDeliveryPosition), OrderLineItem parent = default(OrderLineItem), OrderLineItem children = default(OrderLineItem))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderLineItem and cannot be null");
            }
            this._OrderId = orderId;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for OrderLineItem and cannot be null");
            }
            this._Identifier = identifier;
            this._Quantity = quantity;
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for OrderLineItem and cannot be null");
            }
            this._Label = label;
            this._Position = position;
            // to ensure "children" is required (not null)
            if (children == null)
            {
                throw new ArgumentNullException("children is a required property for OrderLineItem and cannot be null");
            }
            this._Children = children;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._OrderVersionId = orderVersionId;
            if (this.OrderVersionId != null)
            {
                this._flagOrderVersionId = true;
            }
            this._ProductId = productId;
            if (this.ProductId != null)
            {
                this._flagProductId = true;
            }
            this._ProductVersionId = productVersionId;
            if (this.ProductVersionId != null)
            {
                this._flagProductVersionId = true;
            }
            this._ParentId = parentId;
            if (this.ParentId != null)
            {
                this._flagParentId = true;
            }
            this._ParentVersionId = parentVersionId;
            if (this.ParentVersionId != null)
            {
                this._flagParentVersionId = true;
            }
            this._CoverId = coverId;
            if (this.CoverId != null)
            {
                this._flagCoverId = true;
            }
            this._ReferencedId = referencedId;
            if (this.ReferencedId != null)
            {
                this._flagReferencedId = true;
            }
            this._Payload = payload;
            if (this.Payload != null)
            {
                this._flagPayload = true;
            }
            this._Good = good;
            if (this.Good != null)
            {
                this._flagGood = true;
            }
            this._Removable = removable;
            if (this.Removable != null)
            {
                this._flagRemovable = true;
            }
            this._Stackable = stackable;
            if (this.Stackable != null)
            {
                this._flagStackable = true;
            }
            this._PriceDefinition = priceDefinition;
            if (this.PriceDefinition != null)
            {
                this._flagPriceDefinition = true;
            }
            this._UnitPrice = unitPrice;
            if (this.UnitPrice != null)
            {
                this._flagUnitPrice = true;
            }
            this._TotalPrice = totalPrice;
            if (this.TotalPrice != null)
            {
                this._flagTotalPrice = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._Cover = cover;
            if (this.Cover != null)
            {
                this._flagCover = true;
            }
            this._OrderDeliveryPositions = orderDeliveryPositions;
            if (this.OrderDeliveryPositions != null)
            {
                this._flagOrderDeliveryPositions = true;
            }
            this._Parent = parent;
            if (this.Parent != null)
            {
                this._flagParent = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [DataMember(Name = "orderVersionId", EmitDefaultValue = false)]
        public string OrderVersionId
        {
            get{ return _OrderVersionId;}
            set
            {
                _OrderVersionId = value;
                _flagOrderVersionId = true;
            }
        }
        private string _OrderVersionId;
        private bool _flagOrderVersionId;

        /// <summary>
        /// Returns false as OrderVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderVersionId()
        {
            return _flagOrderVersionId;
        }
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId
        {
            get{ return _ProductId;}
            set
            {
                _ProductId = value;
                _flagProductId = true;
            }
        }
        private string _ProductId;
        private bool _flagProductId;

        /// <summary>
        /// Returns false as ProductId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductId()
        {
            return _flagProductId;
        }
        /// <summary>
        /// Gets or Sets ProductVersionId
        /// </summary>
        [DataMember(Name = "productVersionId", EmitDefaultValue = false)]
        public string ProductVersionId
        {
            get{ return _ProductVersionId;}
            set
            {
                _ProductVersionId = value;
                _flagProductVersionId = true;
            }
        }
        private string _ProductVersionId;
        private bool _flagProductVersionId;

        /// <summary>
        /// Returns false as ProductVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductVersionId()
        {
            return _flagProductVersionId;
        }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId
        {
            get{ return _ParentId;}
            set
            {
                _ParentId = value;
                _flagParentId = true;
            }
        }
        private string _ParentId;
        private bool _flagParentId;

        /// <summary>
        /// Returns false as ParentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentId()
        {
            return _flagParentId;
        }
        /// <summary>
        /// Gets or Sets ParentVersionId
        /// </summary>
        [DataMember(Name = "parentVersionId", EmitDefaultValue = false)]
        public string ParentVersionId
        {
            get{ return _ParentVersionId;}
            set
            {
                _ParentVersionId = value;
                _flagParentVersionId = true;
            }
        }
        private string _ParentVersionId;
        private bool _flagParentVersionId;

        /// <summary>
        /// Returns false as ParentVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentVersionId()
        {
            return _flagParentVersionId;
        }
        /// <summary>
        /// Gets or Sets CoverId
        /// </summary>
        [DataMember(Name = "coverId", EmitDefaultValue = false)]
        public string CoverId
        {
            get{ return _CoverId;}
            set
            {
                _CoverId = value;
                _flagCoverId = true;
            }
        }
        private string _CoverId;
        private bool _flagCoverId;

        /// <summary>
        /// Returns false as CoverId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCoverId()
        {
            return _flagCoverId;
        }
        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = false)]
        public string Identifier
        {
            get{ return _Identifier;}
            set
            {
                _Identifier = value;
                _flagIdentifier = true;
            }
        }
        private string _Identifier;
        private bool _flagIdentifier;

        /// <summary>
        /// Returns false as Identifier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIdentifier()
        {
            return _flagIdentifier;
        }
        /// <summary>
        /// Gets or Sets ReferencedId
        /// </summary>
        [DataMember(Name = "referencedId", EmitDefaultValue = false)]
        public string ReferencedId
        {
            get{ return _ReferencedId;}
            set
            {
                _ReferencedId = value;
                _flagReferencedId = true;
            }
        }
        private string _ReferencedId;
        private bool _flagReferencedId;

        /// <summary>
        /// Returns false as ReferencedId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferencedId()
        {
            return _flagReferencedId;
        }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public long Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private long _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label
        {
            get{ return _Label;}
            set
            {
                _Label = value;
                _flagLabel = true;
            }
        }
        private string _Label;
        private bool _flagLabel;

        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return _flagLabel;
        }
        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public Object Payload
        {
            get{ return _Payload;}
            set
            {
                _Payload = value;
                _flagPayload = true;
            }
        }
        private Object _Payload;
        private bool _flagPayload;

        /// <summary>
        /// Returns false as Payload should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePayload()
        {
            return _flagPayload;
        }
        /// <summary>
        /// Gets or Sets Good
        /// </summary>
        [DataMember(Name = "good", EmitDefaultValue = true)]
        public bool Good
        {
            get{ return _Good;}
            set
            {
                _Good = value;
                _flagGood = true;
            }
        }
        private bool _Good;
        private bool _flagGood;

        /// <summary>
        /// Returns false as Good should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGood()
        {
            return _flagGood;
        }
        /// <summary>
        /// Gets or Sets Removable
        /// </summary>
        [DataMember(Name = "removable", EmitDefaultValue = true)]
        public bool Removable
        {
            get{ return _Removable;}
            set
            {
                _Removable = value;
                _flagRemovable = true;
            }
        }
        private bool _Removable;
        private bool _flagRemovable;

        /// <summary>
        /// Returns false as Removable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemovable()
        {
            return _flagRemovable;
        }
        /// <summary>
        /// Gets or Sets Stackable
        /// </summary>
        [DataMember(Name = "stackable", EmitDefaultValue = true)]
        public bool Stackable
        {
            get{ return _Stackable;}
            set
            {
                _Stackable = value;
                _flagStackable = true;
            }
        }
        private bool _Stackable;
        private bool _flagStackable;

        /// <summary>
        /// Returns false as Stackable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStackable()
        {
            return _flagStackable;
        }
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = false)]
        public long Position
        {
            get{ return _Position;}
            set
            {
                _Position = value;
                _flagPosition = true;
            }
        }
        private long _Position;
        private bool _flagPosition;

        /// <summary>
        /// Returns false as Position should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePosition()
        {
            return _flagPosition;
        }
        /// <summary>
        /// Gets or Sets PriceDefinition
        /// </summary>
        [DataMember(Name = "priceDefinition", EmitDefaultValue = false)]
        public Object PriceDefinition
        {
            get{ return _PriceDefinition;}
            set
            {
                _PriceDefinition = value;
                _flagPriceDefinition = true;
            }
        }
        private Object _PriceDefinition;
        private bool _flagPriceDefinition;

        /// <summary>
        /// Returns false as PriceDefinition should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePriceDefinition()
        {
            return _flagPriceDefinition;
        }
        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name = "unitPrice", EmitDefaultValue = false)]
        public float UnitPrice
        {
            get{ return _UnitPrice;}
            set
            {
                _UnitPrice = value;
                _flagUnitPrice = true;
            }
        }
        private float _UnitPrice;
        private bool _flagUnitPrice;

        /// <summary>
        /// Returns false as UnitPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitPrice()
        {
            return _flagUnitPrice;
        }
        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name = "totalPrice", EmitDefaultValue = false)]
        public float TotalPrice
        {
            get{ return _TotalPrice;}
            set
            {
                _TotalPrice = value;
                _flagTotalPrice = true;
            }
        }
        private float _TotalPrice;
        private bool _flagTotalPrice;

        /// <summary>
        /// Returns false as TotalPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalPrice()
        {
            return _flagTotalPrice;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Cover
        /// </summary>
        [DataMember(Name = "cover", EmitDefaultValue = false)]
        public Media Cover
        {
            get{ return _Cover;}
            set
            {
                _Cover = value;
                _flagCover = true;
            }
        }
        private Media _Cover;
        private bool _flagCover;

        /// <summary>
        /// Returns false as Cover should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCover()
        {
            return _flagCover;
        }
        /// <summary>
        /// Gets or Sets OrderDeliveryPositions
        /// </summary>
        [DataMember(Name = "orderDeliveryPositions", EmitDefaultValue = false)]
        public OrderDeliveryPosition OrderDeliveryPositions
        {
            get{ return _OrderDeliveryPositions;}
            set
            {
                _OrderDeliveryPositions = value;
                _flagOrderDeliveryPositions = true;
            }
        }
        private OrderDeliveryPosition _OrderDeliveryPositions;
        private bool _flagOrderDeliveryPositions;

        /// <summary>
        /// Returns false as OrderDeliveryPositions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderDeliveryPositions()
        {
            return _flagOrderDeliveryPositions;
        }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public OrderLineItem Parent
        {
            get{ return _Parent;}
            set
            {
                _Parent = value;
                _flagParent = true;
            }
        }
        private OrderLineItem _Parent;
        private bool _flagParent;

        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return _flagParent;
        }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = false)]
        public OrderLineItem Children
        {
            get{ return _Children;}
            set
            {
                _Children = value;
                _flagChildren = true;
            }
        }
        private OrderLineItem _Children;
        private bool _flagChildren;

        /// <summary>
        /// Returns false as Children should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChildren()
        {
            return _flagChildren;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductVersionId: ").Append(ProductVersionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentVersionId: ").Append(ParentVersionId).Append("\n");
            sb.Append("  CoverId: ").Append(CoverId).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  ReferencedId: ").Append(ReferencedId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Good: ").Append(Good).Append("\n");
            sb.Append("  Removable: ").Append(Removable).Append("\n");
            sb.Append("  Stackable: ").Append(Stackable).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PriceDefinition: ").Append(PriceDefinition).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  OrderDeliveryPositions: ").Append(OrderDeliveryPositions).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductVersionId == input.ProductVersionId ||
                    (this.ProductVersionId != null &&
                    this.ProductVersionId.Equals(input.ProductVersionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ParentVersionId == input.ParentVersionId ||
                    (this.ParentVersionId != null &&
                    this.ParentVersionId.Equals(input.ParentVersionId))
                ) && 
                (
                    this.CoverId == input.CoverId ||
                    (this.CoverId != null &&
                    this.CoverId.Equals(input.CoverId))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.ReferencedId == input.ReferencedId ||
                    (this.ReferencedId != null &&
                    this.ReferencedId.Equals(input.ReferencedId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.Good == input.Good ||
                    this.Good.Equals(input.Good)
                ) && 
                (
                    this.Removable == input.Removable ||
                    this.Removable.Equals(input.Removable)
                ) && 
                (
                    this.Stackable == input.Stackable ||
                    this.Stackable.Equals(input.Stackable)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.PriceDefinition == input.PriceDefinition ||
                    (this.PriceDefinition != null &&
                    this.PriceDefinition.Equals(input.PriceDefinition))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Cover == input.Cover ||
                    (this.Cover != null &&
                    this.Cover.Equals(input.Cover))
                ) && 
                (
                    this.OrderDeliveryPositions == input.OrderDeliveryPositions ||
                    (this.OrderDeliveryPositions != null &&
                    this.OrderDeliveryPositions.Equals(input.OrderDeliveryPositions))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.ProductVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductVersionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.ParentVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentVersionId.GetHashCode();
                }
                if (this.CoverId != null)
                {
                    hashCode = (hashCode * 59) + this.CoverId.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.ReferencedId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Good.GetHashCode();
                hashCode = (hashCode * 59) + this.Removable.GetHashCode();
                hashCode = (hashCode * 59) + this.Stackable.GetHashCode();
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.PriceDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.PriceDefinition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Cover != null)
                {
                    hashCode = (hashCode * 59) + this.Cover.GetHashCode();
                }
                if (this.OrderDeliveryPositions != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDeliveryPositions.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            // ProductId (string) pattern
            Regex regexProductId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductId.Match(this.ProductId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductId, must match a pattern of " + regexProductId, new [] { "ProductId" });
            }

            // ProductVersionId (string) pattern
            Regex regexProductVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductVersionId.Match(this.ProductVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductVersionId, must match a pattern of " + regexProductVersionId, new [] { "ProductVersionId" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // ParentVersionId (string) pattern
            Regex regexParentVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentVersionId.Match(this.ParentVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentVersionId, must match a pattern of " + regexParentVersionId, new [] { "ParentVersionId" });
            }

            // CoverId (string) pattern
            Regex regexCoverId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCoverId.Match(this.CoverId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoverId, must match a pattern of " + regexCoverId, new [] { "CoverId" });
            }

            yield break;
        }
    }

}

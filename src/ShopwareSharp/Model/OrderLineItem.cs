// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class OrderLineItem : IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required)</param>
        /// <param name="identifier">identifier (required)</param>
        /// <param name="quantity">quantity (required)</param>
        /// <param name="label">label (required)</param>
        /// <param name="position">position (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="children">children (required)</param>
        /// <param name="id">id</param>
        /// <param name="versionId">versionId</param>
        /// <param name="orderVersionId">orderVersionId</param>
        /// <param name="productId">productId</param>
        /// <param name="productVersionId">productVersionId</param>
        /// <param name="parentId">parentId</param>
        /// <param name="parentVersionId">parentVersionId</param>
        /// <param name="coverId">coverId</param>
        /// <param name="referencedId">referencedId</param>
        /// <param name="payload">payload</param>
        /// <param name="good">good</param>
        /// <param name="removable">removable</param>
        /// <param name="stackable">stackable</param>
        /// <param name="priceDefinition">priceDefinition</param>
        /// <param name="unitPrice">unitPrice</param>
        /// <param name="totalPrice">totalPrice</param>
        /// <param name="description">description</param>
        /// <param name="type">type</param>
        /// <param name="customFields">customFields</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="cover">cover</param>
        /// <param name="orderDeliveryPositions">orderDeliveryPositions</param>
        /// <param name="parent">parent</param>
        public OrderLineItem(string orderId, string identifier, long quantity, string label, long position, DateTime createdAt, OrderLineItem[] children, string? id = default, string? versionId = default, string? orderVersionId = default, string? productId = default, string? productVersionId = default, string? parentId = default, string? parentVersionId = default, string? coverId = default, string? referencedId = default, Object? payload = default, bool? good = default, bool? removable = default, bool? stackable = default, Object? priceDefinition = default, float? unitPrice = default, float? totalPrice = default, string? description = default, string? type = default, Object? customFields = default, DateTime? updatedAt = default, Media? cover = default, OrderDeliveryPosition? orderDeliveryPositions = default, OrderLineItem? parent = default)
        {
            if (orderId == null)
                throw new ArgumentNullException("orderId is a required property for OrderLineItem and cannot be null.");

            if (identifier == null)
                throw new ArgumentNullException("identifier is a required property for OrderLineItem and cannot be null.");

            if (label == null)
                throw new ArgumentNullException("label is a required property for OrderLineItem and cannot be null.");

            if (children == null)
                throw new ArgumentNullException("children is a required property for OrderLineItem and cannot be null.");

            OrderId = orderId;
            Identifier = identifier;
            Quantity = quantity;
            Label = label;
            Position = position;
            CreatedAt = createdAt;
            Children = children;
            Id = id;
            VersionId = versionId;
            OrderVersionId = orderVersionId;
            ProductId = productId;
            ProductVersionId = productVersionId;
            ParentId = parentId;
            ParentVersionId = parentVersionId;
            CoverId = coverId;
            ReferencedId = referencedId;
            Payload = payload;
            Good = good;
            Removable = removable;
            Stackable = stackable;
            PriceDefinition = priceDefinition;
            UnitPrice = unitPrice;
            TotalPrice = totalPrice;
            Description = description;
            Type = type;
            CustomFields = customFields;
            UpdatedAt = updatedAt;
            Cover = cover;
            OrderDeliveryPositions = orderDeliveryPositions;
            Parent = parent;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public long Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [JsonPropertyName("label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public long Position { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [JsonPropertyName("children")]
        public OrderLineItem[] Children { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [JsonPropertyName("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [JsonPropertyName("orderVersionId")]
        public string? OrderVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [JsonPropertyName("productId")]
        public string? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ProductVersionId
        /// </summary>
        [JsonPropertyName("productVersionId")]
        public string? ProductVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parentId")]
        public string? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets ParentVersionId
        /// </summary>
        [JsonPropertyName("parentVersionId")]
        public string? ParentVersionId { get; set; }

        /// <summary>
        /// Gets or Sets CoverId
        /// </summary>
        [JsonPropertyName("coverId")]
        public string? CoverId { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedId
        /// </summary>
        [JsonPropertyName("referencedId")]
        public string? ReferencedId { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public Object? Payload { get; set; }

        /// <summary>
        /// Gets or Sets Good
        /// </summary>
        [JsonPropertyName("good")]
        public bool? Good { get; set; }

        /// <summary>
        /// Gets or Sets Removable
        /// </summary>
        [JsonPropertyName("removable")]
        public bool? Removable { get; set; }

        /// <summary>
        /// Gets or Sets Stackable
        /// </summary>
        [JsonPropertyName("stackable")]
        public bool? Stackable { get; set; }

        /// <summary>
        /// Gets or Sets PriceDefinition
        /// </summary>
        [JsonPropertyName("priceDefinition")]
        public Object? PriceDefinition { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [JsonPropertyName("unitPrice")]
        public float? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [JsonPropertyName("totalPrice")]
        public float? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Cover
        /// </summary>
        [JsonPropertyName("cover")]
        public Media? Cover { get; set; }

        /// <summary>
        /// Gets or Sets OrderDeliveryPositions
        /// </summary>
        [JsonPropertyName("orderDeliveryPositions")]
        public OrderDeliveryPosition? OrderDeliveryPositions { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [JsonPropertyName("parent")]
        public OrderLineItem? Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductVersionId: ").Append(ProductVersionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentVersionId: ").Append(ParentVersionId).Append("\n");
            sb.Append("  CoverId: ").Append(CoverId).Append("\n");
            sb.Append("  ReferencedId: ").Append(ReferencedId).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Good: ").Append(Good).Append("\n");
            sb.Append("  Removable: ").Append(Removable).Append("\n");
            sb.Append("  Stackable: ").Append(Stackable).Append("\n");
            sb.Append("  PriceDefinition: ").Append(PriceDefinition).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  OrderDeliveryPositions: ").Append(OrderDeliveryPositions).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt 
                    
                    
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductVersionId == input.ProductVersionId ||
                    (this.ProductVersionId != null &&
                    this.ProductVersionId.Equals(input.ProductVersionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ParentVersionId == input.ParentVersionId ||
                    (this.ParentVersionId != null &&
                    this.ParentVersionId.Equals(input.ParentVersionId))
                ) && 
                (
                    this.CoverId == input.CoverId ||
                    (this.CoverId != null &&
                    this.CoverId.Equals(input.CoverId))
                ) && 
                (
                    this.ReferencedId == input.ReferencedId ||
                    (this.ReferencedId != null &&
                    this.ReferencedId.Equals(input.ReferencedId))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.Good == input.Good ||
                    this.Good.Equals(input.Good)
                ) && 
                (
                    this.Removable == input.Removable ||
                    this.Removable.Equals(input.Removable)
                ) && 
                (
                    this.Stackable == input.Stackable ||
                    this.Stackable.Equals(input.Stackable)
                ) && 
                (
                    this.PriceDefinition == input.PriceDefinition ||
                    (this.PriceDefinition != null &&
                    this.PriceDefinition.Equals(input.PriceDefinition))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    this.UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Cover == input.Cover ||
                    (this.Cover != null &&
                    this.Cover.Equals(input.Cover))
                ) && 
                (
                    this.OrderDeliveryPositions == input.OrderDeliveryPositions ||
                    (this.OrderDeliveryPositions != null &&
                    this.OrderDeliveryPositions.Equals(input.OrderDeliveryPositions))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.ProductVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductVersionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.ParentVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentVersionId.GetHashCode();
                }
                if (this.CoverId != null)
                {
                    hashCode = (hashCode * 59) + this.CoverId.GetHashCode();
                }
                if (this.ReferencedId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedId.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Good.GetHashCode();
                hashCode = (hashCode * 59) + this.Removable.GetHashCode();
                hashCode = (hashCode * 59) + this.Stackable.GetHashCode();
                if (this.PriceDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.PriceDefinition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Cover != null)
                {
                    hashCode = (hashCode * 59) + this.Cover.GetHashCode();
                }
                if (this.OrderDeliveryPositions != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDeliveryPositions.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            // ProductId (string) pattern
            Regex regexProductId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductId.Match(this.ProductId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductId, must match a pattern of " + regexProductId, new [] { "ProductId" });
            }

            // ProductVersionId (string) pattern
            Regex regexProductVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductVersionId.Match(this.ProductVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductVersionId, must match a pattern of " + regexProductVersionId, new [] { "ProductVersionId" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // ParentVersionId (string) pattern
            Regex regexParentVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentVersionId.Match(this.ParentVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentVersionId, must match a pattern of " + regexParentVersionId, new [] { "ParentVersionId" });
            }

            // CoverId (string) pattern
            Regex regexCoverId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCoverId.Match(this.CoverId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoverId, must match a pattern of " + regexCoverId, new [] { "CoverId" });
            }

            yield break;
        }
    }

}

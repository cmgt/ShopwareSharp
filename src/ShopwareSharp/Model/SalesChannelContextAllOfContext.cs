// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Core context with general configuration values and state
    /// </summary>
    public partial class SalesChannelContextAllOfContext : IEquatable<SalesChannelContextAllOfContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOfContext" /> class.
        /// </summary>
        /// <param name="versionId">versionId</param>
        /// <param name="currencyId">currencyId</param>
        /// <param name="currencyFactor">currencyFactor</param>
        /// <param name="currencyPrecision">currencyPrecision</param>
        /// <param name="scope">scope</param>
        /// <param name="source">source</param>
        /// <param name="taxState">taxState</param>
        /// <param name="useCache">useCache</param>
        public SalesChannelContextAllOfContext(string? versionId = default, string? currencyId = default, int? currencyFactor = default, int? currencyPrecision = default, string? scope = default, string? source = default, string? taxState = default, bool? useCache = default)
        {
            VersionId = versionId;
            CurrencyId = currencyId;
            CurrencyFactor = currencyFactor;
            CurrencyPrecision = currencyPrecision;
            Scope = scope;
            Source = source;
            TaxState = taxState;
            UseCache = useCache;
        }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [JsonPropertyName("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyFactor
        /// </summary>
        [JsonPropertyName("currencyFactor")]
        public int? CurrencyFactor { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPrecision
        /// </summary>
        [JsonPropertyName("currencyPrecision")]
        public int? CurrencyPrecision { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public string? Source { get; set; }

        /// <summary>
        /// Gets or Sets TaxState
        /// </summary>
        [JsonPropertyName("taxState")]
        public string? TaxState { get; set; }

        /// <summary>
        /// Gets or Sets UseCache
        /// </summary>
        [JsonPropertyName("useCache")]
        public bool? UseCache { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOfContext {\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  CurrencyPrecision: ").Append(CurrencyPrecision).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TaxState: ").Append(TaxState).Append("\n");
            sb.Append("  UseCache: ").Append(UseCache).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as SalesChannelContextAllOfContext);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOfContext instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOfContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOfContext? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CurrencyFactor == input.CurrencyFactor ||
                    this.CurrencyFactor.Equals(input.CurrencyFactor)
                ) && 
                (
                    this.CurrencyPrecision == input.CurrencyPrecision ||
                    this.CurrencyPrecision.Equals(input.CurrencyPrecision)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TaxState == input.TaxState ||
                    (this.TaxState != null &&
                    this.TaxState.Equals(input.TaxState))
                ) && 
                (
                    this.UseCache == input.UseCache ||
                    this.UseCache.Equals(input.UseCache)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrencyPrecision.GetHashCode();
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.TaxState != null)
                {
                    hashCode = (hashCode * 59) + this.TaxState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseCache.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

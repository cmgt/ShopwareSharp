/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Core context with general configuration values and state
    /// </summary>
    [DataContract(Name = "SalesChannelContext_allOf_context")]
    public partial class SalesChannelContextAllOfContext : IEquatable<SalesChannelContextAllOfContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOfContext" /> class.
        /// </summary>
        /// <param name="versionId">versionId.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="currencyFactor">currencyFactor.</param>
        /// <param name="currencyPrecision">currencyPrecision.</param>
        /// <param name="scope">scope.</param>
        /// <param name="source">source.</param>
        /// <param name="taxState">taxState.</param>
        /// <param name="useCache">useCache.</param>
        public SalesChannelContextAllOfContext(string versionId = default(string), string currencyId = default(string), int currencyFactor = default(int), int currencyPrecision = default(int), string scope = default(string), string source = default(string), string taxState = default(string), bool useCache = default(bool))
        {
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._CurrencyId = currencyId;
            if (this.CurrencyId != null)
            {
                this._flagCurrencyId = true;
            }
            this._CurrencyFactor = currencyFactor;
            if (this.CurrencyFactor != null)
            {
                this._flagCurrencyFactor = true;
            }
            this._CurrencyPrecision = currencyPrecision;
            if (this.CurrencyPrecision != null)
            {
                this._flagCurrencyPrecision = true;
            }
            this._Scope = scope;
            if (this.Scope != null)
            {
                this._flagScope = true;
            }
            this._Source = source;
            if (this.Source != null)
            {
                this._flagSource = true;
            }
            this._TaxState = taxState;
            if (this.TaxState != null)
            {
                this._flagTaxState = true;
            }
            this._UseCache = useCache;
            if (this.UseCache != null)
            {
                this._flagUseCache = true;
            }
        }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", EmitDefaultValue = false)]
        public string CurrencyId
        {
            get{ return _CurrencyId;}
            set
            {
                _CurrencyId = value;
                _flagCurrencyId = true;
            }
        }
        private string _CurrencyId;
        private bool _flagCurrencyId;

        /// <summary>
        /// Returns false as CurrencyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyId()
        {
            return _flagCurrencyId;
        }
        /// <summary>
        /// Gets or Sets CurrencyFactor
        /// </summary>
        [DataMember(Name = "currencyFactor", EmitDefaultValue = false)]
        public int CurrencyFactor
        {
            get{ return _CurrencyFactor;}
            set
            {
                _CurrencyFactor = value;
                _flagCurrencyFactor = true;
            }
        }
        private int _CurrencyFactor;
        private bool _flagCurrencyFactor;

        /// <summary>
        /// Returns false as CurrencyFactor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyFactor()
        {
            return _flagCurrencyFactor;
        }
        /// <summary>
        /// Gets or Sets CurrencyPrecision
        /// </summary>
        [DataMember(Name = "currencyPrecision", EmitDefaultValue = false)]
        public int CurrencyPrecision
        {
            get{ return _CurrencyPrecision;}
            set
            {
                _CurrencyPrecision = value;
                _flagCurrencyPrecision = true;
            }
        }
        private int _CurrencyPrecision;
        private bool _flagCurrencyPrecision;

        /// <summary>
        /// Returns false as CurrencyPrecision should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyPrecision()
        {
            return _flagCurrencyPrecision;
        }
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope
        {
            get{ return _Scope;}
            set
            {
                _Scope = value;
                _flagScope = true;
            }
        }
        private string _Scope;
        private bool _flagScope;

        /// <summary>
        /// Returns false as Scope should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeScope()
        {
            return _flagScope;
        }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source
        {
            get{ return _Source;}
            set
            {
                _Source = value;
                _flagSource = true;
            }
        }
        private string _Source;
        private bool _flagSource;

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return _flagSource;
        }
        /// <summary>
        /// Gets or Sets TaxState
        /// </summary>
        [DataMember(Name = "taxState", EmitDefaultValue = false)]
        public string TaxState
        {
            get{ return _TaxState;}
            set
            {
                _TaxState = value;
                _flagTaxState = true;
            }
        }
        private string _TaxState;
        private bool _flagTaxState;

        /// <summary>
        /// Returns false as TaxState should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxState()
        {
            return _flagTaxState;
        }
        /// <summary>
        /// Gets or Sets UseCache
        /// </summary>
        [DataMember(Name = "useCache", EmitDefaultValue = true)]
        public bool UseCache
        {
            get{ return _UseCache;}
            set
            {
                _UseCache = value;
                _flagUseCache = true;
            }
        }
        private bool _UseCache;
        private bool _flagUseCache;

        /// <summary>
        /// Returns false as UseCache should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseCache()
        {
            return _flagUseCache;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOfContext {\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  CurrencyPrecision: ").Append(CurrencyPrecision).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TaxState: ").Append(TaxState).Append("\n");
            sb.Append("  UseCache: ").Append(UseCache).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannelContextAllOfContext);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOfContext instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOfContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOfContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CurrencyFactor == input.CurrencyFactor ||
                    this.CurrencyFactor.Equals(input.CurrencyFactor)
                ) && 
                (
                    this.CurrencyPrecision == input.CurrencyPrecision ||
                    this.CurrencyPrecision.Equals(input.CurrencyPrecision)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TaxState == input.TaxState ||
                    (this.TaxState != null &&
                    this.TaxState.Equals(input.TaxState))
                ) && 
                (
                    this.UseCache == input.UseCache ||
                    this.UseCache.Equals(input.UseCache)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrencyPrecision.GetHashCode();
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.TaxState != null)
                {
                    hashCode = (hashCode * 59) + this.TaxState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseCache.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Category")]
    public partial class Category : IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Category() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="parentVersionId">parentVersionId.</param>
        /// <param name="afterCategoryId">afterCategoryId.</param>
        /// <param name="afterCategoryVersionId">afterCategoryVersionId.</param>
        /// <param name="mediaId">mediaId.</param>
        /// <param name="displayNestedProducts">displayNestedProducts (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="productAssignmentType">productAssignmentType (required).</param>
        /// <param name="visible">visible.</param>
        /// <param name="active">active.</param>
        /// <param name="name">name (required).</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="linkType">linkType.</param>
        /// <param name="internalLink">internalLink.</param>
        /// <param name="externalLink">externalLink.</param>
        /// <param name="linkNewTab">linkNewTab.</param>
        /// <param name="description">description.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="cmsPageId">cmsPageId.</param>
        /// <param name="cmsPageVersionId">cmsPageVersionId.</param>
        /// <param name="translated">translated.</param>
        /// <param name="parent">parent.</param>
        /// <param name="children">children.</param>
        /// <param name="media">media.</param>
        /// <param name="cmsPage">cmsPage.</param>
        /// <param name="seoUrls">seoUrls.</param>
        public Category(string id = default(string), string versionId = default(string), string parentId = default(string), string parentVersionId = default(string), string afterCategoryId = default(string), string afterCategoryVersionId = default(string), string mediaId = default(string), bool displayNestedProducts = default(bool), string type = default(string), string productAssignmentType = default(string), bool visible = default(bool), bool active = default(bool), string name = default(string), Object customFields = default(Object), string linkType = default(string), string internalLink = default(string), string externalLink = default(string), bool linkNewTab = default(bool), string description = default(string), string metaTitle = default(string), string metaDescription = default(string), string keywords = default(string), string cmsPageId = default(string), string cmsPageVersionId = default(string), Object translated = default(Object), Category parent = default(Category), Category children = default(Category), Media media = default(Media), CmsPage cmsPage = default(CmsPage), SeoUrl seoUrls = default(SeoUrl))
        {
            this._DisplayNestedProducts = displayNestedProducts;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Category and cannot be null");
            }
            this._Type = type;
            // to ensure "productAssignmentType" is required (not null)
            if (productAssignmentType == null)
            {
                throw new ArgumentNullException("productAssignmentType is a required property for Category and cannot be null");
            }
            this._ProductAssignmentType = productAssignmentType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Category and cannot be null");
            }
            this._Name = name;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VersionId = versionId;
            if (this.VersionId != null)
            {
                this._flagVersionId = true;
            }
            this._ParentId = parentId;
            if (this.ParentId != null)
            {
                this._flagParentId = true;
            }
            this._ParentVersionId = parentVersionId;
            if (this.ParentVersionId != null)
            {
                this._flagParentVersionId = true;
            }
            this._AfterCategoryId = afterCategoryId;
            if (this.AfterCategoryId != null)
            {
                this._flagAfterCategoryId = true;
            }
            this._AfterCategoryVersionId = afterCategoryVersionId;
            if (this.AfterCategoryVersionId != null)
            {
                this._flagAfterCategoryVersionId = true;
            }
            this._MediaId = mediaId;
            if (this.MediaId != null)
            {
                this._flagMediaId = true;
            }
            this._Visible = visible;
            if (this.Visible != null)
            {
                this._flagVisible = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._CustomFields = customFields;
            if (this.CustomFields != null)
            {
                this._flagCustomFields = true;
            }
            this._LinkType = linkType;
            if (this.LinkType != null)
            {
                this._flagLinkType = true;
            }
            this._InternalLink = internalLink;
            if (this.InternalLink != null)
            {
                this._flagInternalLink = true;
            }
            this._ExternalLink = externalLink;
            if (this.ExternalLink != null)
            {
                this._flagExternalLink = true;
            }
            this._LinkNewTab = linkNewTab;
            if (this.LinkNewTab != null)
            {
                this._flagLinkNewTab = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._MetaTitle = metaTitle;
            if (this.MetaTitle != null)
            {
                this._flagMetaTitle = true;
            }
            this._MetaDescription = metaDescription;
            if (this.MetaDescription != null)
            {
                this._flagMetaDescription = true;
            }
            this._Keywords = keywords;
            if (this.Keywords != null)
            {
                this._flagKeywords = true;
            }
            this._CmsPageId = cmsPageId;
            if (this.CmsPageId != null)
            {
                this._flagCmsPageId = true;
            }
            this._CmsPageVersionId = cmsPageVersionId;
            if (this.CmsPageVersionId != null)
            {
                this._flagCmsPageVersionId = true;
            }
            this._Translated = translated;
            if (this.Translated != null)
            {
                this._flagTranslated = true;
            }
            this._Parent = parent;
            if (this.Parent != null)
            {
                this._flagParent = true;
            }
            this._Children = children;
            if (this.Children != null)
            {
                this._flagChildren = true;
            }
            this._Media = media;
            if (this.Media != null)
            {
                this._flagMedia = true;
            }
            this._CmsPage = cmsPage;
            if (this.CmsPage != null)
            {
                this._flagCmsPage = true;
            }
            this._SeoUrls = seoUrls;
            if (this.SeoUrls != null)
            {
                this._flagSeoUrls = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId
        {
            get{ return _VersionId;}
            set
            {
                _VersionId = value;
                _flagVersionId = true;
            }
        }
        private string _VersionId;
        private bool _flagVersionId;

        /// <summary>
        /// Returns false as VersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionId()
        {
            return _flagVersionId;
        }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId
        {
            get{ return _ParentId;}
            set
            {
                _ParentId = value;
                _flagParentId = true;
            }
        }
        private string _ParentId;
        private bool _flagParentId;

        /// <summary>
        /// Returns false as ParentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentId()
        {
            return _flagParentId;
        }
        /// <summary>
        /// Gets or Sets ParentVersionId
        /// </summary>
        [DataMember(Name = "parentVersionId", EmitDefaultValue = false)]
        public string ParentVersionId
        {
            get{ return _ParentVersionId;}
            set
            {
                _ParentVersionId = value;
                _flagParentVersionId = true;
            }
        }
        private string _ParentVersionId;
        private bool _flagParentVersionId;

        /// <summary>
        /// Returns false as ParentVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentVersionId()
        {
            return _flagParentVersionId;
        }
        /// <summary>
        /// Gets or Sets AfterCategoryId
        /// </summary>
        [DataMember(Name = "afterCategoryId", EmitDefaultValue = false)]
        public string AfterCategoryId
        {
            get{ return _AfterCategoryId;}
            set
            {
                _AfterCategoryId = value;
                _flagAfterCategoryId = true;
            }
        }
        private string _AfterCategoryId;
        private bool _flagAfterCategoryId;

        /// <summary>
        /// Returns false as AfterCategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAfterCategoryId()
        {
            return _flagAfterCategoryId;
        }
        /// <summary>
        /// Gets or Sets AfterCategoryVersionId
        /// </summary>
        [DataMember(Name = "afterCategoryVersionId", EmitDefaultValue = false)]
        public string AfterCategoryVersionId
        {
            get{ return _AfterCategoryVersionId;}
            set
            {
                _AfterCategoryVersionId = value;
                _flagAfterCategoryVersionId = true;
            }
        }
        private string _AfterCategoryVersionId;
        private bool _flagAfterCategoryVersionId;

        /// <summary>
        /// Returns false as AfterCategoryVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAfterCategoryVersionId()
        {
            return _flagAfterCategoryVersionId;
        }
        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "mediaId", EmitDefaultValue = false)]
        public string MediaId
        {
            get{ return _MediaId;}
            set
            {
                _MediaId = value;
                _flagMediaId = true;
            }
        }
        private string _MediaId;
        private bool _flagMediaId;

        /// <summary>
        /// Returns false as MediaId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMediaId()
        {
            return _flagMediaId;
        }
        /// <summary>
        /// Gets or Sets DisplayNestedProducts
        /// </summary>
        [DataMember(Name = "displayNestedProducts", IsRequired = true, EmitDefaultValue = true)]
        public bool DisplayNestedProducts
        {
            get{ return _DisplayNestedProducts;}
            set
            {
                _DisplayNestedProducts = value;
                _flagDisplayNestedProducts = true;
            }
        }
        private bool _DisplayNestedProducts;
        private bool _flagDisplayNestedProducts;

        /// <summary>
        /// Returns false as DisplayNestedProducts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayNestedProducts()
        {
            return _flagDisplayNestedProducts;
        }
        /// <summary>
        /// Gets or Sets Breadcrumb
        /// </summary>
        [DataMember(Name = "breadcrumb", EmitDefaultValue = false)]
        public List<string> Breadcrumb { get; private set; }

        /// <summary>
        /// Returns false as Breadcrumb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBreadcrumb()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public long Level { get; private set; }

        /// <summary>
        /// Returns false as Level should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLevel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; private set; }

        /// <summary>
        /// Returns false as Path should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePath()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ChildCount
        /// </summary>
        [DataMember(Name = "childCount", EmitDefaultValue = false)]
        public long ChildCount { get; private set; }

        /// <summary>
        /// Returns false as ChildCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChildCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Gets or Sets ProductAssignmentType
        /// </summary>
        [DataMember(Name = "productAssignmentType", IsRequired = true, EmitDefaultValue = false)]
        public string ProductAssignmentType
        {
            get{ return _ProductAssignmentType;}
            set
            {
                _ProductAssignmentType = value;
                _flagProductAssignmentType = true;
            }
        }
        private string _ProductAssignmentType;
        private bool _flagProductAssignmentType;

        /// <summary>
        /// Returns false as ProductAssignmentType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductAssignmentType()
        {
            return _flagProductAssignmentType;
        }
        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible
        {
            get{ return _Visible;}
            set
            {
                _Visible = value;
                _flagVisible = true;
            }
        }
        private bool _Visible;
        private bool _flagVisible;

        /// <summary>
        /// Returns false as Visible should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVisible()
        {
            return _flagVisible;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields
        {
            get{ return _CustomFields;}
            set
            {
                _CustomFields = value;
                _flagCustomFields = true;
            }
        }
        private Object _CustomFields;
        private bool _flagCustomFields;

        /// <summary>
        /// Returns false as CustomFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFields()
        {
            return _flagCustomFields;
        }
        /// <summary>
        /// Gets or Sets LinkType
        /// </summary>
        [DataMember(Name = "linkType", EmitDefaultValue = false)]
        public string LinkType
        {
            get{ return _LinkType;}
            set
            {
                _LinkType = value;
                _flagLinkType = true;
            }
        }
        private string _LinkType;
        private bool _flagLinkType;

        /// <summary>
        /// Returns false as LinkType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLinkType()
        {
            return _flagLinkType;
        }
        /// <summary>
        /// Gets or Sets InternalLink
        /// </summary>
        [DataMember(Name = "internalLink", EmitDefaultValue = false)]
        public string InternalLink
        {
            get{ return _InternalLink;}
            set
            {
                _InternalLink = value;
                _flagInternalLink = true;
            }
        }
        private string _InternalLink;
        private bool _flagInternalLink;

        /// <summary>
        /// Returns false as InternalLink should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInternalLink()
        {
            return _flagInternalLink;
        }
        /// <summary>
        /// Gets or Sets ExternalLink
        /// </summary>
        [DataMember(Name = "externalLink", EmitDefaultValue = false)]
        public string ExternalLink
        {
            get{ return _ExternalLink;}
            set
            {
                _ExternalLink = value;
                _flagExternalLink = true;
            }
        }
        private string _ExternalLink;
        private bool _flagExternalLink;

        /// <summary>
        /// Returns false as ExternalLink should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExternalLink()
        {
            return _flagExternalLink;
        }
        /// <summary>
        /// Gets or Sets LinkNewTab
        /// </summary>
        [DataMember(Name = "linkNewTab", EmitDefaultValue = true)]
        public bool LinkNewTab
        {
            get{ return _LinkNewTab;}
            set
            {
                _LinkNewTab = value;
                _flagLinkNewTab = true;
            }
        }
        private bool _LinkNewTab;
        private bool _flagLinkNewTab;

        /// <summary>
        /// Returns false as LinkNewTab should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLinkNewTab()
        {
            return _flagLinkNewTab;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name = "metaTitle", EmitDefaultValue = false)]
        public string MetaTitle
        {
            get{ return _MetaTitle;}
            set
            {
                _MetaTitle = value;
                _flagMetaTitle = true;
            }
        }
        private string _MetaTitle;
        private bool _flagMetaTitle;

        /// <summary>
        /// Returns false as MetaTitle should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetaTitle()
        {
            return _flagMetaTitle;
        }
        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name = "metaDescription", EmitDefaultValue = false)]
        public string MetaDescription
        {
            get{ return _MetaDescription;}
            set
            {
                _MetaDescription = value;
                _flagMetaDescription = true;
            }
        }
        private string _MetaDescription;
        private bool _flagMetaDescription;

        /// <summary>
        /// Returns false as MetaDescription should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetaDescription()
        {
            return _flagMetaDescription;
        }
        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public string Keywords
        {
            get{ return _Keywords;}
            set
            {
                _Keywords = value;
                _flagKeywords = true;
            }
        }
        private string _Keywords;
        private bool _flagKeywords;

        /// <summary>
        /// Returns false as Keywords should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeywords()
        {
            return _flagKeywords;
        }
        /// <summary>
        /// Gets or Sets CmsPageId
        /// </summary>
        [DataMember(Name = "cmsPageId", EmitDefaultValue = false)]
        public string CmsPageId
        {
            get{ return _CmsPageId;}
            set
            {
                _CmsPageId = value;
                _flagCmsPageId = true;
            }
        }
        private string _CmsPageId;
        private bool _flagCmsPageId;

        /// <summary>
        /// Returns false as CmsPageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPageId()
        {
            return _flagCmsPageId;
        }
        /// <summary>
        /// Gets or Sets CmsPageVersionId
        /// </summary>
        [DataMember(Name = "cmsPageVersionId", EmitDefaultValue = false)]
        public string CmsPageVersionId
        {
            get{ return _CmsPageVersionId;}
            set
            {
                _CmsPageVersionId = value;
                _flagCmsPageVersionId = true;
            }
        }
        private string _CmsPageVersionId;
        private bool _flagCmsPageVersionId;

        /// <summary>
        /// Returns false as CmsPageVersionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPageVersionId()
        {
            return _flagCmsPageVersionId;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated
        {
            get{ return _Translated;}
            set
            {
                _Translated = value;
                _flagTranslated = true;
            }
        }
        private Object _Translated;
        private bool _flagTranslated;

        /// <summary>
        /// Returns false as Translated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslated()
        {
            return _flagTranslated;
        }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public Category Parent
        {
            get{ return _Parent;}
            set
            {
                _Parent = value;
                _flagParent = true;
            }
        }
        private Category _Parent;
        private bool _flagParent;

        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return _flagParent;
        }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public Category Children
        {
            get{ return _Children;}
            set
            {
                _Children = value;
                _flagChildren = true;
            }
        }
        private Category _Children;
        private bool _flagChildren;

        /// <summary>
        /// Returns false as Children should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChildren()
        {
            return _flagChildren;
        }
        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public Media Media
        {
            get{ return _Media;}
            set
            {
                _Media = value;
                _flagMedia = true;
            }
        }
        private Media _Media;
        private bool _flagMedia;

        /// <summary>
        /// Returns false as Media should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMedia()
        {
            return _flagMedia;
        }
        /// <summary>
        /// Gets or Sets CmsPage
        /// </summary>
        [DataMember(Name = "cmsPage", EmitDefaultValue = false)]
        public CmsPage CmsPage
        {
            get{ return _CmsPage;}
            set
            {
                _CmsPage = value;
                _flagCmsPage = true;
            }
        }
        private CmsPage _CmsPage;
        private bool _flagCmsPage;

        /// <summary>
        /// Returns false as CmsPage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCmsPage()
        {
            return _flagCmsPage;
        }
        /// <summary>
        /// Gets or Sets SeoUrls
        /// </summary>
        [DataMember(Name = "seoUrls", EmitDefaultValue = false)]
        public SeoUrl SeoUrls
        {
            get{ return _SeoUrls;}
            set
            {
                _SeoUrls = value;
                _flagSeoUrls = true;
            }
        }
        private SeoUrl _SeoUrls;
        private bool _flagSeoUrls;

        /// <summary>
        /// Returns false as SeoUrls should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeoUrls()
        {
            return _flagSeoUrls;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentVersionId: ").Append(ParentVersionId).Append("\n");
            sb.Append("  AfterCategoryId: ").Append(AfterCategoryId).Append("\n");
            sb.Append("  AfterCategoryVersionId: ").Append(AfterCategoryVersionId).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  DisplayNestedProducts: ").Append(DisplayNestedProducts).Append("\n");
            sb.Append("  Breadcrumb: ").Append(Breadcrumb).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ChildCount: ").Append(ChildCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ProductAssignmentType: ").Append(ProductAssignmentType).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("  InternalLink: ").Append(InternalLink).Append("\n");
            sb.Append("  ExternalLink: ").Append(ExternalLink).Append("\n");
            sb.Append("  LinkNewTab: ").Append(LinkNewTab).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  CmsPageId: ").Append(CmsPageId).Append("\n");
            sb.Append("  CmsPageVersionId: ").Append(CmsPageVersionId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  CmsPage: ").Append(CmsPage).Append("\n");
            sb.Append("  SeoUrls: ").Append(SeoUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ParentVersionId == input.ParentVersionId ||
                    (this.ParentVersionId != null &&
                    this.ParentVersionId.Equals(input.ParentVersionId))
                ) && 
                (
                    this.AfterCategoryId == input.AfterCategoryId ||
                    (this.AfterCategoryId != null &&
                    this.AfterCategoryId.Equals(input.AfterCategoryId))
                ) && 
                (
                    this.AfterCategoryVersionId == input.AfterCategoryVersionId ||
                    (this.AfterCategoryVersionId != null &&
                    this.AfterCategoryVersionId.Equals(input.AfterCategoryVersionId))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.DisplayNestedProducts == input.DisplayNestedProducts ||
                    this.DisplayNestedProducts.Equals(input.DisplayNestedProducts)
                ) && 
                (
                    this.Breadcrumb == input.Breadcrumb ||
                    this.Breadcrumb != null &&
                    input.Breadcrumb != null &&
                    this.Breadcrumb.SequenceEqual(input.Breadcrumb)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ChildCount == input.ChildCount ||
                    this.ChildCount.Equals(input.ChildCount)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ProductAssignmentType == input.ProductAssignmentType ||
                    (this.ProductAssignmentType != null &&
                    this.ProductAssignmentType.Equals(input.ProductAssignmentType))
                ) && 
                (
                    this.Visible == input.Visible ||
                    this.Visible.Equals(input.Visible)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.LinkType == input.LinkType ||
                    (this.LinkType != null &&
                    this.LinkType.Equals(input.LinkType))
                ) && 
                (
                    this.InternalLink == input.InternalLink ||
                    (this.InternalLink != null &&
                    this.InternalLink.Equals(input.InternalLink))
                ) && 
                (
                    this.ExternalLink == input.ExternalLink ||
                    (this.ExternalLink != null &&
                    this.ExternalLink.Equals(input.ExternalLink))
                ) && 
                (
                    this.LinkNewTab == input.LinkNewTab ||
                    this.LinkNewTab.Equals(input.LinkNewTab)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MetaTitle == input.MetaTitle ||
                    (this.MetaTitle != null &&
                    this.MetaTitle.Equals(input.MetaTitle))
                ) && 
                (
                    this.MetaDescription == input.MetaDescription ||
                    (this.MetaDescription != null &&
                    this.MetaDescription.Equals(input.MetaDescription))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.CmsPageId == input.CmsPageId ||
                    (this.CmsPageId != null &&
                    this.CmsPageId.Equals(input.CmsPageId))
                ) && 
                (
                    this.CmsPageVersionId == input.CmsPageVersionId ||
                    (this.CmsPageVersionId != null &&
                    this.CmsPageVersionId.Equals(input.CmsPageVersionId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.CmsPage == input.CmsPage ||
                    (this.CmsPage != null &&
                    this.CmsPage.Equals(input.CmsPage))
                ) && 
                (
                    this.SeoUrls == input.SeoUrls ||
                    (this.SeoUrls != null &&
                    this.SeoUrls.Equals(input.SeoUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.ParentVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentVersionId.GetHashCode();
                }
                if (this.AfterCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.AfterCategoryId.GetHashCode();
                }
                if (this.AfterCategoryVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.AfterCategoryVersionId.GetHashCode();
                }
                if (this.MediaId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayNestedProducts.GetHashCode();
                if (this.Breadcrumb != null)
                {
                    hashCode = (hashCode * 59) + this.Breadcrumb.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChildCount.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.ProductAssignmentType != null)
                {
                    hashCode = (hashCode * 59) + this.ProductAssignmentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Visible.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.LinkType != null)
                {
                    hashCode = (hashCode * 59) + this.LinkType.GetHashCode();
                }
                if (this.InternalLink != null)
                {
                    hashCode = (hashCode * 59) + this.InternalLink.GetHashCode();
                }
                if (this.ExternalLink != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalLink.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LinkNewTab.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.MetaTitle != null)
                {
                    hashCode = (hashCode * 59) + this.MetaTitle.GetHashCode();
                }
                if (this.MetaDescription != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDescription.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.CmsPageId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageId.GetHashCode();
                }
                if (this.CmsPageVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageVersionId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                if (this.CmsPage != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPage.GetHashCode();
                }
                if (this.SeoUrls != null)
                {
                    hashCode = (hashCode * 59) + this.SeoUrls.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // ParentVersionId (string) pattern
            Regex regexParentVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentVersionId.Match(this.ParentVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentVersionId, must match a pattern of " + regexParentVersionId, new [] { "ParentVersionId" });
            }

            // AfterCategoryId (string) pattern
            Regex regexAfterCategoryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexAfterCategoryId.Match(this.AfterCategoryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AfterCategoryId, must match a pattern of " + regexAfterCategoryId, new [] { "AfterCategoryId" });
            }

            // AfterCategoryVersionId (string) pattern
            Regex regexAfterCategoryVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexAfterCategoryVersionId.Match(this.AfterCategoryVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AfterCategoryVersionId, must match a pattern of " + regexAfterCategoryVersionId, new [] { "AfterCategoryVersionId" });
            }

            // MediaId (string) pattern
            Regex regexMediaId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexMediaId.Match(this.MediaId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MediaId, must match a pattern of " + regexMediaId, new [] { "MediaId" });
            }

            // InternalLink (string) pattern
            Regex regexInternalLink = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexInternalLink.Match(this.InternalLink).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InternalLink, must match a pattern of " + regexInternalLink, new [] { "InternalLink" });
            }

            // CmsPageId (string) pattern
            Regex regexCmsPageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageId.Match(this.CmsPageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageId, must match a pattern of " + regexCmsPageId, new [] { "CmsPageId" });
            }

            // CmsPageVersionId (string) pattern
            Regex regexCmsPageVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageVersionId.Match(this.CmsPageVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageVersionId, must match a pattern of " + regexCmsPageVersionId, new [] { "CmsPageVersionId" });
            }

            yield break;
        }
    }

}

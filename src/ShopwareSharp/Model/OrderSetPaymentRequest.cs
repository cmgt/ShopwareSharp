/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// OrderSetPaymentRequest
    /// </summary>
    [DataContract(Name = "orderSetPayment_request")]
    public partial class OrderSetPaymentRequest : IEquatable<OrderSetPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSetPaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderSetPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSetPaymentRequest" /> class.
        /// </summary>
        /// <param name="paymentMethodId">The identifier of the paymentMethod to be set (required).</param>
        /// <param name="orderId">The identifier of the order. (required).</param>
        public OrderSetPaymentRequest(string paymentMethodId = default(string), string orderId = default(string))
        {
            // to ensure "paymentMethodId" is required (not null)
            if (paymentMethodId == null)
            {
                throw new ArgumentNullException("paymentMethodId is a required property for OrderSetPaymentRequest and cannot be null");
            }
            this.PaymentMethodId = paymentMethodId;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderSetPaymentRequest and cannot be null");
            }
            this.OrderId = orderId;
        }

        /// <summary>
        /// The identifier of the paymentMethod to be set
        /// </summary>
        /// <value>The identifier of the paymentMethod to be set</value>
        [DataMember(Name = "paymentMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The identifier of the order.
        /// </summary>
        /// <value>The identifier of the order.</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderSetPaymentRequest {\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderSetPaymentRequest);
        }

        /// <summary>
        /// Returns true if OrderSetPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderSetPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderSetPaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// RelationshipLinksSelf
    /// </summary>
    public partial class RelationshipLinksSelf : IEquatable<RelationshipLinksSelf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipLinksSelf" /> class.
        /// </summary>
        /// <param name="list"></param>
        /// <param name="link"></param>
        /// <param name="href">A string containing the link&#39;s URL. (required)</param>
        /// <param name="meta">Non-standard meta-information that can not be represented as an attribute or relationship.</param>
        public RelationshipLinksSelf(List<Object> list, Link link, string href, Dictionary<string, Object>? meta = default)
        {
            if (href == null)
                throw new ArgumentNullException("href is a required property for RelationshipLinksSelf and cannot be null.");

            List = list;
            Link = link;
            Href = href;
            Meta = meta;
        }

        /// <summary>
        /// A &#x60;self&#x60; member, whose value is a URL for the relationship itself (a \&quot;relationship URL\&quot;). This URL allows the client to directly manipulate the relationship. For example, it would allow a client to remove an &#x60;author&#x60; from an &#x60;article&#x60; without deleting the people resource itself.
        /// </summary>
        /// <value>A &#x60;self&#x60; member, whose value is a URL for the relationship itself (a \&quot;relationship URL\&quot;). This URL allows the client to directly manipulate the relationship. For example, it would allow a client to remove an &#x60;author&#x60; from an &#x60;article&#x60; without deleting the people resource itself.</value>
        public List<Object> List { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        public Link Link { get; set; }

        /// <summary>
        /// A string containing the link&#39;s URL.
        /// </summary>
        /// <value>A string containing the link&#39;s URL.</value>
        [JsonPropertyName("href")]
        public string Href { get; set; }

        /// <summary>
        /// Non-standard meta-information that can not be represented as an attribute or relationship.
        /// </summary>
        /// <value>Non-standard meta-information that can not be represented as an attribute or relationship.</value>
        [JsonPropertyName("meta")]
        public Dictionary<string, Object>? Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationshipLinksSelf {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as RelationshipLinksSelf);
        }

        /// <summary>
        /// Returns true if RelationshipLinksSelf instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationshipLinksSelf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipLinksSelf? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type RelationshipLinksSelf
    /// </summary>
    public class RelationshipLinksSelfJsonConverter : JsonConverter<RelationshipLinksSelf>
    {
        /// <summary>
        /// Returns a boolean if the type is compatible with this converter.
        /// </summary>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        public override bool CanConvert(Type typeToConvert) => typeof(RelationshipLinksSelf).IsAssignableFrom(typeToConvert);

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RelationshipLinksSelf Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            int currentDepth = reader.CurrentDepth;

            if (reader.TokenType != JsonTokenType.StartObject)
                throw new JsonException();

            Utf8JsonReader listReader = reader;
            bool listDeserialized = Client.ClientUtils.TryDeserialize<List<Object>>(ref listReader, options, out List<Object>? list);

            Utf8JsonReader linkReader = reader;
            bool linkDeserialized = Client.ClientUtils.TryDeserialize<Link>(ref linkReader, options, out Link? link);

            string? href = default;
            Dictionary<string, Object>? meta = default;

            while (reader.Read())
            {
                if (reader.TokenType == JsonTokenType.EndObject && currentDepth == reader.CurrentDepth)
                    break;

                if (reader.TokenType == JsonTokenType.PropertyName)
                {
                    string? propertyName = reader.GetString();
                    reader.Read();

                    switch (propertyName)
                    {
                        case "href":
                            href = reader.GetString();
                            break;
                        case "meta":
                            meta = JsonSerializer.Deserialize<Dictionary<string, Object>>(ref reader, options);
                            break;
                    }
                }
            }

            return new RelationshipLinksSelf(list, link, href, meta);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="relationshipLinksSelf"></param>
        /// <param name="options"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RelationshipLinksSelf relationshipLinksSelf, JsonSerializerOptions options) => throw new NotImplementedException();
    }
}

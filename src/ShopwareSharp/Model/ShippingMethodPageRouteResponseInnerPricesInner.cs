// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ShippingMethodPageRouteResponseInnerPricesInner
    /// </summary>
    public partial class ShippingMethodPageRouteResponseInnerPricesInner : IEquatable<ShippingMethodPageRouteResponseInnerPricesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPageRouteResponseInnerPricesInner" /> class.
        /// </summary>
        /// <param name="shippingMethodId">shippingMethodId</param>
        /// <param name="currencyId">currencyId</param>
        /// <param name="ruleId">ruleId</param>
        /// <param name="calculation">calculation</param>
        /// <param name="quantityStart">quantityStart</param>
        /// <param name="quantityEnd">quantityEnd</param>
        /// <param name="price">price</param>
        /// <param name="calculationRuleId">calculationRuleId</param>
        public ShippingMethodPageRouteResponseInnerPricesInner(string? shippingMethodId = default, string? currencyId = default, string? ruleId = default, int? calculation = default, float? quantityStart = default, float? quantityEnd = default, float? price = default, string? calculationRuleId = default)
        {
            ShippingMethodId = shippingMethodId;
            CurrencyId = currencyId;
            RuleId = ruleId;
            Calculation = calculation;
            QuantityStart = quantityStart;
            QuantityEnd = quantityEnd;
            Price = price;
            CalculationRuleId = calculationRuleId;
        }

        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [JsonPropertyName("shippingMethodId")]
        public string? ShippingMethodId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [JsonPropertyName("ruleId")]
        public string? RuleId { get; set; }

        /// <summary>
        /// Gets or Sets Calculation
        /// </summary>
        [JsonPropertyName("calculation")]
        public int? Calculation { get; set; }

        /// <summary>
        /// Gets or Sets QuantityStart
        /// </summary>
        [JsonPropertyName("quantityStart")]
        public float? QuantityStart { get; set; }

        /// <summary>
        /// Gets or Sets QuantityEnd
        /// </summary>
        [JsonPropertyName("quantityEnd")]
        public float? QuantityEnd { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public float? Price { get; set; }

        /// <summary>
        /// Gets or Sets CalculationRuleId
        /// </summary>
        [JsonPropertyName("calculationRuleId")]
        public string? CalculationRuleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPageRouteResponseInnerPricesInner {\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  QuantityStart: ").Append(QuantityStart).Append("\n");
            sb.Append("  QuantityEnd: ").Append(QuantityEnd).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CalculationRuleId: ").Append(CalculationRuleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ShippingMethodPageRouteResponseInnerPricesInner);
        }

        /// <summary>
        /// Returns true if ShippingMethodPageRouteResponseInnerPricesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPageRouteResponseInnerPricesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPageRouteResponseInnerPricesInner? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    this.Calculation.Equals(input.Calculation)
                ) && 
                (
                    this.QuantityStart == input.QuantityStart ||
                    this.QuantityStart.Equals(input.QuantityStart)
                ) && 
                (
                    this.QuantityEnd == input.QuantityEnd ||
                    this.QuantityEnd.Equals(input.QuantityEnd)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.CalculationRuleId == input.CalculationRuleId ||
                    (this.CalculationRuleId != null &&
                    this.CalculationRuleId.Equals(input.CalculationRuleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Calculation.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityStart.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityEnd.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.CalculationRuleId != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationRuleId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// SubscribeToNewsletterRequest
    /// </summary>
    public partial class SubscribeToNewsletterRequest : IEquatable<SubscribeToNewsletterRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribeToNewsletterRequest" /> class.
        /// </summary>
        /// <param name="email">Email address that will receive the confirmation and the newsletter. (required)</param>
        /// <param name="storefrontUrl">Url of the storefront of the shop. This will be used for generating the link to the /newsletter/confirm inside the confirm email. (required)</param>
        /// <param name="option">Defines what should be done. (required)</param>
        /// <param name="salutationId">Identifier of the salutation.</param>
        /// <param name="firstName">First name</param>
        /// <param name="lastName">Last name</param>
        /// <param name="street">Street</param>
        /// <param name="city">City</param>
        /// <param name="zipCode">Zip code</param>
        /// <param name="tags">Zip code</param>
        /// <param name="languageId">Identifier of the language.</param>
        /// <param name="customFields">Custom field data that should be added to the subscription.</param>
        public SubscribeToNewsletterRequest(string email, string storefrontUrl, Object? option = default, Object? salutationId = default, string? firstName = default, string? lastName = default, string? street = default, string? city = default, string? zipCode = default, string? tags = default, Object? languageId = default, string? customFields = default)
        {
            if (email == null)
                throw new ArgumentNullException("email is a required property for SubscribeToNewsletterRequest and cannot be null.");

            if (storefrontUrl == null)
                throw new ArgumentNullException("storefrontUrl is a required property for SubscribeToNewsletterRequest and cannot be null.");

            Email = email;
            Option = option;
            StorefrontUrl = storefrontUrl;
            SalutationId = salutationId;
            FirstName = firstName;
            LastName = lastName;
            Street = street;
            City = city;
            ZipCode = zipCode;
            Tags = tags;
            LanguageId = languageId;
            CustomFields = customFields;
        }

        /// <summary>
        /// Email address that will receive the confirmation and the newsletter.
        /// </summary>
        /// <value>Email address that will receive the confirmation and the newsletter.</value>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Defines what should be done.
        /// </summary>
        /// <value>Defines what should be done.</value>
        [JsonPropertyName("option")]
        public Object? Option { get; set; }

        /// <summary>
        /// Url of the storefront of the shop. This will be used for generating the link to the /newsletter/confirm inside the confirm email.
        /// </summary>
        /// <value>Url of the storefront of the shop. This will be used for generating the link to the /newsletter/confirm inside the confirm email.</value>
        [JsonPropertyName("storefrontUrl")]
        public string StorefrontUrl { get; set; }

        /// <summary>
        /// Identifier of the salutation.
        /// </summary>
        /// <value>Identifier of the salutation.</value>
        [JsonPropertyName("salutationId")]
        public Object? SalutationId { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [JsonPropertyName("firstName")]
        public string? FirstName { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [JsonPropertyName("lastName")]
        public string? LastName { get; set; }

        /// <summary>
        /// Street
        /// </summary>
        /// <value>Street</value>
        [JsonPropertyName("street")]
        public string? Street { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [JsonPropertyName("city")]
        public string? City { get; set; }

        /// <summary>
        /// Zip code
        /// </summary>
        /// <value>Zip code</value>
        [JsonPropertyName("zipCode")]
        public string? ZipCode { get; set; }

        /// <summary>
        /// Zip code
        /// </summary>
        /// <value>Zip code</value>
        [JsonPropertyName("tags")]
        public string? Tags { get; set; }

        /// <summary>
        /// Identifier of the language.
        /// </summary>
        /// <value>Identifier of the language.</value>
        [JsonPropertyName("languageId")]
        public Object? LanguageId { get; set; }

        /// <summary>
        /// Custom field data that should be added to the subscription.
        /// </summary>
        /// <value>Custom field data that should be added to the subscription.</value>
        [JsonPropertyName("customFields")]
        public string? CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscribeToNewsletterRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  StorefrontUrl: ").Append(StorefrontUrl).Append("\n");
            sb.Append("  SalutationId: ").Append(SalutationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as SubscribeToNewsletterRequest);
        }

        /// <summary>
        /// Returns true if SubscribeToNewsletterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscribeToNewsletterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribeToNewsletterRequest? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Option == input.Option ||
                    (this.Option != null &&
                    this.Option.Equals(input.Option))
                ) && 
                (
                    this.StorefrontUrl == input.StorefrontUrl ||
                    (this.StorefrontUrl != null &&
                    this.StorefrontUrl.Equals(input.StorefrontUrl))
                ) && 
                (
                    this.SalutationId == input.SalutationId ||
                    (this.SalutationId != null &&
                    this.SalutationId.Equals(input.SalutationId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Option != null)
                {
                    hashCode = (hashCode * 59) + this.Option.GetHashCode();
                }
                if (this.StorefrontUrl != null)
                {
                    hashCode = (hashCode * 59) + this.StorefrontUrl.GetHashCode();
                }
                if (this.SalutationId != null)
                {
                    hashCode = (hashCode * 59) + this.SalutationId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

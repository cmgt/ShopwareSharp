/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ProductListingResultAllOf
    /// </summary>
    [DataContract(Name = "ProductListingResult_allOf")]
    public partial class ProductListingResultAllOf : IEquatable<ProductListingResultAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListingResultAllOf" /> class.
        /// </summary>
        /// <param name="currentFilters">currentFilters.</param>
        /// <param name="availableSortings">Contains the available sorting. These can be used to show a sorting select-box in the product listing..</param>
        /// <param name="sorting">sorting.</param>
        /// <param name="elements">elements.</param>
        public ProductListingResultAllOf(ProductListingResultAllOfCurrentFilters currentFilters = default(ProductListingResultAllOfCurrentFilters), List<Object> availableSortings = default(List<Object>), string sorting = default(string), List<Product> elements = default(List<Product>))
        {
            this._CurrentFilters = currentFilters;
            if (this.CurrentFilters != null)
            {
                this._flagCurrentFilters = true;
            }
            this._AvailableSortings = availableSortings;
            if (this.AvailableSortings != null)
            {
                this._flagAvailableSortings = true;
            }
            this._Sorting = sorting;
            if (this.Sorting != null)
            {
                this._flagSorting = true;
            }
            this._Elements = elements;
            if (this.Elements != null)
            {
                this._flagElements = true;
            }
        }

        /// <summary>
        /// Gets or Sets CurrentFilters
        /// </summary>
        [DataMember(Name = "currentFilters", EmitDefaultValue = false)]
        public ProductListingResultAllOfCurrentFilters CurrentFilters
        {
            get{ return _CurrentFilters;}
            set
            {
                _CurrentFilters = value;
                _flagCurrentFilters = true;
            }
        }
        private ProductListingResultAllOfCurrentFilters _CurrentFilters;
        private bool _flagCurrentFilters;

        /// <summary>
        /// Returns false as CurrentFilters should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrentFilters()
        {
            return _flagCurrentFilters;
        }
        /// <summary>
        /// Contains the available sorting. These can be used to show a sorting select-box in the product listing.
        /// </summary>
        /// <value>Contains the available sorting. These can be used to show a sorting select-box in the product listing.</value>
        [DataMember(Name = "availableSortings", EmitDefaultValue = false)]
        public List<Object> AvailableSortings
        {
            get{ return _AvailableSortings;}
            set
            {
                _AvailableSortings = value;
                _flagAvailableSortings = true;
            }
        }
        private List<Object> _AvailableSortings;
        private bool _flagAvailableSortings;

        /// <summary>
        /// Returns false as AvailableSortings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvailableSortings()
        {
            return _flagAvailableSortings;
        }
        /// <summary>
        /// Gets or Sets Sorting
        /// </summary>
        [DataMember(Name = "sorting", EmitDefaultValue = false)]
        public string Sorting
        {
            get{ return _Sorting;}
            set
            {
                _Sorting = value;
                _flagSorting = true;
            }
        }
        private string _Sorting;
        private bool _flagSorting;

        /// <summary>
        /// Returns false as Sorting should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSorting()
        {
            return _flagSorting;
        }
        /// <summary>
        /// Gets or Sets Elements
        /// </summary>
        [DataMember(Name = "elements", EmitDefaultValue = false)]
        public List<Product> Elements
        {
            get{ return _Elements;}
            set
            {
                _Elements = value;
                _flagElements = true;
            }
        }
        private List<Product> _Elements;
        private bool _flagElements;

        /// <summary>
        /// Returns false as Elements should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeElements()
        {
            return _flagElements;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductListingResultAllOf {\n");
            sb.Append("  CurrentFilters: ").Append(CurrentFilters).Append("\n");
            sb.Append("  AvailableSortings: ").Append(AvailableSortings).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductListingResultAllOf);
        }

        /// <summary>
        /// Returns true if ProductListingResultAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductListingResultAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductListingResultAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrentFilters == input.CurrentFilters ||
                    (this.CurrentFilters != null &&
                    this.CurrentFilters.Equals(input.CurrentFilters))
                ) && 
                (
                    this.AvailableSortings == input.AvailableSortings ||
                    this.AvailableSortings != null &&
                    input.AvailableSortings != null &&
                    this.AvailableSortings.SequenceEqual(input.AvailableSortings)
                ) && 
                (
                    this.Sorting == input.Sorting ||
                    (this.Sorting != null &&
                    this.Sorting.Equals(input.Sorting))
                ) && 
                (
                    this.Elements == input.Elements ||
                    this.Elements != null &&
                    input.Elements != null &&
                    this.Elements.SequenceEqual(input.Elements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentFilters != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentFilters.GetHashCode();
                }
                if (this.AvailableSortings != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableSortings.GetHashCode();
                }
                if (this.Sorting != null)
                {
                    hashCode = (hashCode * 59) + this.Sorting.GetHashCode();
                }
                if (this.Elements != null)
                {
                    hashCode = (hashCode * 59) + this.Elements.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

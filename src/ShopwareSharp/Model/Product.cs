/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="versionId">versionId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="parentVersionId">parentVersionId.</param>
        /// <param name="manufacturerId">manufacturerId.</param>
        /// <param name="productManufacturerVersionId">productManufacturerVersionId.</param>
        /// <param name="unitId">unitId.</param>
        /// <param name="taxId">taxId (required).</param>
        /// <param name="coverId">coverId.</param>
        /// <param name="productMediaVersionId">productMediaVersionId.</param>
        /// <param name="deliveryTimeId">deliveryTimeId.</param>
        /// <param name="canonicalProductId">canonicalProductId.</param>
        /// <param name="cmsPageId">cmsPageId.</param>
        /// <param name="cmsPageVersionId">cmsPageVersionId.</param>
        /// <param name="productNumber">productNumber (required).</param>
        /// <param name="stock">stock (required).</param>
        /// <param name="restockTime">restockTime.</param>
        /// <param name="active">active.</param>
        /// <param name="isCloseout">isCloseout.</param>
        /// <param name="mainVariantId">mainVariantId.</param>
        /// <param name="manufacturerNumber">manufacturerNumber.</param>
        /// <param name="ean">ean.</param>
        /// <param name="purchaseSteps">purchaseSteps.</param>
        /// <param name="maxPurchase">maxPurchase.</param>
        /// <param name="minPurchase">minPurchase.</param>
        /// <param name="purchaseUnit">purchaseUnit.</param>
        /// <param name="referenceUnit">referenceUnit.</param>
        /// <param name="shippingFree">shippingFree.</param>
        /// <param name="markAsTopseller">markAsTopseller.</param>
        /// <param name="weight">weight.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="length">length.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="name">name (required).</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="description">description.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="packUnit">packUnit.</param>
        /// <param name="packUnitPlural">packUnitPlural.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="calculatedPrice">calculatedPrice.</param>
        /// <param name="calculatedPrices">calculatedPrices.</param>
        /// <param name="calculatedMaxPurchase">calculatedMaxPurchase.</param>
        /// <param name="calculatedCheapestPrice">calculatedCheapestPrice.</param>
        /// <param name="isNew">isNew.</param>
        /// <param name="translated">translated.</param>
        /// <param name="parent">parent.</param>
        /// <param name="children">children.</param>
        /// <param name="deliveryTime">deliveryTime.</param>
        /// <param name="tax">tax.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="unit">unit.</param>
        /// <param name="cover">cover.</param>
        /// <param name="cmsPage">cmsPage.</param>
        /// <param name="canonicalProduct">canonicalProduct.</param>
        /// <param name="media">media.</param>
        /// <param name="crossSellings">crossSellings.</param>
        /// <param name="configuratorSettings">configuratorSettings.</param>
        /// <param name="productReviews">productReviews.</param>
        /// <param name="mainCategories">mainCategories.</param>
        /// <param name="seoUrls">seoUrls.</param>
        /// <param name="options">options.</param>
        /// <param name="properties">properties.</param>
        /// <param name="categories">categories.</param>
        /// <param name="streams">streams.</param>
        /// <param name="categoriesRo">categoriesRo.</param>
        /// <param name="seoCategory">seoCategory.</param>
        public Product(string id = default(string), string versionId = default(string), string parentId = default(string), string parentVersionId = default(string), string manufacturerId = default(string), string productManufacturerVersionId = default(string), string unitId = default(string), string taxId = default(string), string coverId = default(string), string productMediaVersionId = default(string), string deliveryTimeId = default(string), string canonicalProductId = default(string), string cmsPageId = default(string), string cmsPageVersionId = default(string), string productNumber = default(string), long stock = default(long), long restockTime = default(long), bool active = default(bool), bool isCloseout = default(bool), string mainVariantId = default(string), string manufacturerNumber = default(string), string ean = default(string), long purchaseSteps = default(long), long maxPurchase = default(long), long minPurchase = default(long), float purchaseUnit = default(float), float referenceUnit = default(float), bool shippingFree = default(bool), bool markAsTopseller = default(bool), float weight = default(float), float width = default(float), float height = default(float), float length = default(float), DateTime releaseDate = default(DateTime), string metaDescription = default(string), string name = default(string), string keywords = default(string), string description = default(string), string metaTitle = default(string), string packUnit = default(string), string packUnitPlural = default(string), Object customFields = default(Object), Object calculatedPrice = default(Object), List<Object> calculatedPrices = default(List<Object>), long calculatedMaxPurchase = default(long), Object calculatedCheapestPrice = default(Object), bool isNew = default(bool), Object translated = default(Object), Product parent = default(Product), Product children = default(Product), DeliveryTime deliveryTime = default(DeliveryTime), Tax tax = default(Tax), ProductManufacturer manufacturer = default(ProductManufacturer), Unit unit = default(Unit), ProductMedia cover = default(ProductMedia), CmsPage cmsPage = default(CmsPage), Product canonicalProduct = default(Product), ProductMedia media = default(ProductMedia), ProductCrossSelling crossSellings = default(ProductCrossSelling), ProductConfiguratorSetting configuratorSettings = default(ProductConfiguratorSetting), ProductReview productReviews = default(ProductReview), MainCategory mainCategories = default(MainCategory), SeoUrl seoUrls = default(SeoUrl), PropertyGroupOption options = default(PropertyGroupOption), PropertyGroupOption properties = default(PropertyGroupOption), Category categories = default(Category), ProductStream streams = default(ProductStream), Category categoriesRo = default(Category), Category seoCategory = default(Category))
        {
            // to ensure "taxId" is required (not null)
            if (taxId == null)
            {
                throw new ArgumentNullException("taxId is a required property for Product and cannot be null");
            }
            this.TaxId = taxId;
            // to ensure "productNumber" is required (not null)
            if (productNumber == null)
            {
                throw new ArgumentNullException("productNumber is a required property for Product and cannot be null");
            }
            this.ProductNumber = productNumber;
            this.Stock = stock;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Product and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.VersionId = versionId;
            this.ParentId = parentId;
            this.ParentVersionId = parentVersionId;
            this.ManufacturerId = manufacturerId;
            this.ProductManufacturerVersionId = productManufacturerVersionId;
            this.UnitId = unitId;
            this.CoverId = coverId;
            this.ProductMediaVersionId = productMediaVersionId;
            this.DeliveryTimeId = deliveryTimeId;
            this.CanonicalProductId = canonicalProductId;
            this.CmsPageId = cmsPageId;
            this.CmsPageVersionId = cmsPageVersionId;
            this.RestockTime = restockTime;
            this.Active = active;
            this.IsCloseout = isCloseout;
            this.MainVariantId = mainVariantId;
            this.ManufacturerNumber = manufacturerNumber;
            this.Ean = ean;
            this.PurchaseSteps = purchaseSteps;
            this.MaxPurchase = maxPurchase;
            this.MinPurchase = minPurchase;
            this.PurchaseUnit = purchaseUnit;
            this.ReferenceUnit = referenceUnit;
            this.ShippingFree = shippingFree;
            this.MarkAsTopseller = markAsTopseller;
            this.Weight = weight;
            this.Width = width;
            this.Height = height;
            this.Length = length;
            this.ReleaseDate = releaseDate;
            this.MetaDescription = metaDescription;
            this.Keywords = keywords;
            this.Description = description;
            this.MetaTitle = metaTitle;
            this.PackUnit = packUnit;
            this.PackUnitPlural = packUnitPlural;
            this.CustomFields = customFields;
            this.CalculatedPrice = calculatedPrice;
            this.CalculatedPrices = calculatedPrices;
            this.CalculatedMaxPurchase = calculatedMaxPurchase;
            this.CalculatedCheapestPrice = calculatedCheapestPrice;
            this.IsNew = isNew;
            this.Translated = translated;
            this.Parent = parent;
            this.Children = children;
            this.DeliveryTime = deliveryTime;
            this.Tax = tax;
            this.Manufacturer = manufacturer;
            this.Unit = unit;
            this.Cover = cover;
            this.CmsPage = cmsPage;
            this.CanonicalProduct = canonicalProduct;
            this.Media = media;
            this.CrossSellings = crossSellings;
            this.ConfiguratorSettings = configuratorSettings;
            this.ProductReviews = productReviews;
            this.MainCategories = mainCategories;
            this.SeoUrls = seoUrls;
            this.Options = options;
            this.Properties = properties;
            this.Categories = categories;
            this.Streams = streams;
            this.CategoriesRo = categoriesRo;
            this.SeoCategory = seoCategory;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets ParentVersionId
        /// </summary>
        [DataMember(Name = "parentVersionId", EmitDefaultValue = false)]
        public string ParentVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerId
        /// </summary>
        [DataMember(Name = "manufacturerId", EmitDefaultValue = false)]
        public string ManufacturerId { get; set; }

        /// <summary>
        /// Gets or Sets ProductManufacturerVersionId
        /// </summary>
        [DataMember(Name = "productManufacturerVersionId", EmitDefaultValue = false)]
        public string ProductManufacturerVersionId { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name = "unitId", EmitDefaultValue = false)]
        public string UnitId { get; set; }

        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name = "taxId", IsRequired = true, EmitDefaultValue = false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or Sets CoverId
        /// </summary>
        [DataMember(Name = "coverId", EmitDefaultValue = false)]
        public string CoverId { get; set; }

        /// <summary>
        /// Gets or Sets ProductMediaVersionId
        /// </summary>
        [DataMember(Name = "productMediaVersionId", EmitDefaultValue = false)]
        public string ProductMediaVersionId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryTimeId
        /// </summary>
        [DataMember(Name = "deliveryTimeId", EmitDefaultValue = false)]
        public string DeliveryTimeId { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalProductId
        /// </summary>
        [DataMember(Name = "canonicalProductId", EmitDefaultValue = false)]
        public string CanonicalProductId { get; set; }

        /// <summary>
        /// Gets or Sets CmsPageId
        /// </summary>
        [DataMember(Name = "cmsPageId", EmitDefaultValue = false)]
        public string CmsPageId { get; set; }

        /// <summary>
        /// Gets or Sets CmsPageVersionId
        /// </summary>
        [DataMember(Name = "cmsPageVersionId", EmitDefaultValue = false)]
        public string CmsPageVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ProductNumber
        /// </summary>
        [DataMember(Name = "productNumber", IsRequired = true, EmitDefaultValue = false)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "stock", IsRequired = true, EmitDefaultValue = false)]
        public long Stock { get; set; }

        /// <summary>
        /// Gets or Sets RestockTime
        /// </summary>
        [DataMember(Name = "restockTime", EmitDefaultValue = false)]
        public long RestockTime { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AvailableStock
        /// </summary>
        [DataMember(Name = "availableStock", EmitDefaultValue = false)]
        public long AvailableStock { get; private set; }

        /// <summary>
        /// Returns false as AvailableStock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvailableStock()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; private set; }

        /// <summary>
        /// Returns false as Available should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvailable()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsCloseout
        /// </summary>
        [DataMember(Name = "isCloseout", EmitDefaultValue = true)]
        public bool IsCloseout { get; set; }

        /// <summary>
        /// Gets or Sets DisplayGroup
        /// </summary>
        [DataMember(Name = "displayGroup", EmitDefaultValue = false)]
        public string DisplayGroup { get; private set; }

        /// <summary>
        /// Returns false as DisplayGroup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayGroup()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MainVariantId
        /// </summary>
        [DataMember(Name = "mainVariantId", EmitDefaultValue = false)]
        public string MainVariantId { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerNumber
        /// </summary>
        [DataMember(Name = "manufacturerNumber", EmitDefaultValue = false)]
        public string ManufacturerNumber { get; set; }

        /// <summary>
        /// Gets or Sets Ean
        /// </summary>
        [DataMember(Name = "ean", EmitDefaultValue = false)]
        public string Ean { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseSteps
        /// </summary>
        [DataMember(Name = "purchaseSteps", EmitDefaultValue = false)]
        public long PurchaseSteps { get; set; }

        /// <summary>
        /// Gets or Sets MaxPurchase
        /// </summary>
        [DataMember(Name = "maxPurchase", EmitDefaultValue = false)]
        public long MaxPurchase { get; set; }

        /// <summary>
        /// Gets or Sets MinPurchase
        /// </summary>
        [DataMember(Name = "minPurchase", EmitDefaultValue = false)]
        public long MinPurchase { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseUnit
        /// </summary>
        [DataMember(Name = "purchaseUnit", EmitDefaultValue = false)]
        public float PurchaseUnit { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceUnit
        /// </summary>
        [DataMember(Name = "referenceUnit", EmitDefaultValue = false)]
        public float ReferenceUnit { get; set; }

        /// <summary>
        /// Gets or Sets ShippingFree
        /// </summary>
        [DataMember(Name = "shippingFree", EmitDefaultValue = true)]
        public bool ShippingFree { get; set; }

        /// <summary>
        /// Gets or Sets MarkAsTopseller
        /// </summary>
        [DataMember(Name = "markAsTopseller", EmitDefaultValue = true)]
        public bool MarkAsTopseller { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public float Weight { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public float Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public float Height { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public float Length { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        public DateTime ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets RatingAverage
        /// </summary>
        [DataMember(Name = "ratingAverage", EmitDefaultValue = false)]
        public float RatingAverage { get; private set; }

        /// <summary>
        /// Returns false as RatingAverage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRatingAverage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CategoryTree
        /// </summary>
        [DataMember(Name = "categoryTree", EmitDefaultValue = false)]
        public List<string> CategoryTree { get; private set; }

        /// <summary>
        /// Returns false as CategoryTree should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryTree()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PropertyIds
        /// </summary>
        [DataMember(Name = "propertyIds", EmitDefaultValue = false)]
        public List<string> PropertyIds { get; private set; }

        /// <summary>
        /// Returns false as PropertyIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OptionIds
        /// </summary>
        [DataMember(Name = "optionIds", EmitDefaultValue = false)]
        public List<string> OptionIds { get; private set; }

        /// <summary>
        /// Returns false as OptionIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptionIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [DataMember(Name = "categoryIds", EmitDefaultValue = false)]
        public List<string> CategoryIds { get; private set; }

        /// <summary>
        /// Returns false as CategoryIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ChildCount
        /// </summary>
        [DataMember(Name = "childCount", EmitDefaultValue = false)]
        public long ChildCount { get; private set; }

        /// <summary>
        /// Returns false as ChildCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChildCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public long Sales { get; private set; }

        /// <summary>
        /// Returns false as Sales should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSales()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name = "metaDescription", EmitDefaultValue = false)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name = "metaTitle", EmitDefaultValue = false)]
        public string MetaTitle { get; set; }

        /// <summary>
        /// Gets or Sets PackUnit
        /// </summary>
        [DataMember(Name = "packUnit", EmitDefaultValue = false)]
        public string PackUnit { get; set; }

        /// <summary>
        /// Gets or Sets PackUnitPlural
        /// </summary>
        [DataMember(Name = "packUnitPlural", EmitDefaultValue = false)]
        public string PackUnitPlural { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedPrice
        /// </summary>
        [DataMember(Name = "calculatedPrice", EmitDefaultValue = false)]
        public Object CalculatedPrice { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedPrices
        /// </summary>
        [DataMember(Name = "calculatedPrices", EmitDefaultValue = false)]
        public List<Object> CalculatedPrices { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedMaxPurchase
        /// </summary>
        [DataMember(Name = "calculatedMaxPurchase", EmitDefaultValue = false)]
        public long CalculatedMaxPurchase { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedCheapestPrice
        /// </summary>
        [DataMember(Name = "calculatedCheapestPrice", EmitDefaultValue = false)]
        public Object CalculatedCheapestPrice { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name = "isNew", EmitDefaultValue = true)]
        public bool IsNew { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public Product Parent { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public Product Children { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryTime
        /// </summary>
        [DataMember(Name = "deliveryTime", EmitDefaultValue = false)]
        public DeliveryTime DeliveryTime { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public Tax Tax { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public ProductManufacturer Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public Unit Unit { get; set; }

        /// <summary>
        /// Gets or Sets Cover
        /// </summary>
        [DataMember(Name = "cover", EmitDefaultValue = false)]
        public ProductMedia Cover { get; set; }

        /// <summary>
        /// Gets or Sets CmsPage
        /// </summary>
        [DataMember(Name = "cmsPage", EmitDefaultValue = false)]
        public CmsPage CmsPage { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalProduct
        /// </summary>
        [DataMember(Name = "canonicalProduct", EmitDefaultValue = false)]
        public Product CanonicalProduct { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public ProductMedia Media { get; set; }

        /// <summary>
        /// Gets or Sets CrossSellings
        /// </summary>
        [DataMember(Name = "crossSellings", EmitDefaultValue = false)]
        public ProductCrossSelling CrossSellings { get; set; }

        /// <summary>
        /// Gets or Sets ConfiguratorSettings
        /// </summary>
        [DataMember(Name = "configuratorSettings", EmitDefaultValue = false)]
        public ProductConfiguratorSetting ConfiguratorSettings { get; set; }

        /// <summary>
        /// Gets or Sets ProductReviews
        /// </summary>
        [DataMember(Name = "productReviews", EmitDefaultValue = false)]
        public ProductReview ProductReviews { get; set; }

        /// <summary>
        /// Gets or Sets MainCategories
        /// </summary>
        [DataMember(Name = "mainCategories", EmitDefaultValue = false)]
        public MainCategory MainCategories { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrls
        /// </summary>
        [DataMember(Name = "seoUrls", EmitDefaultValue = false)]
        public SeoUrl SeoUrls { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public PropertyGroupOption Options { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public PropertyGroupOption Properties { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public Category Categories { get; set; }

        /// <summary>
        /// Gets or Sets Streams
        /// </summary>
        [DataMember(Name = "streams", EmitDefaultValue = false)]
        public ProductStream Streams { get; set; }

        /// <summary>
        /// Gets or Sets CategoriesRo
        /// </summary>
        [DataMember(Name = "categoriesRo", EmitDefaultValue = false)]
        public Category CategoriesRo { get; set; }

        /// <summary>
        /// Gets or Sets SeoCategory
        /// </summary>
        [DataMember(Name = "seoCategory", EmitDefaultValue = false)]
        public Category SeoCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentVersionId: ").Append(ParentVersionId).Append("\n");
            sb.Append("  ManufacturerId: ").Append(ManufacturerId).Append("\n");
            sb.Append("  ProductManufacturerVersionId: ").Append(ProductManufacturerVersionId).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  CoverId: ").Append(CoverId).Append("\n");
            sb.Append("  ProductMediaVersionId: ").Append(ProductMediaVersionId).Append("\n");
            sb.Append("  DeliveryTimeId: ").Append(DeliveryTimeId).Append("\n");
            sb.Append("  CanonicalProductId: ").Append(CanonicalProductId).Append("\n");
            sb.Append("  CmsPageId: ").Append(CmsPageId).Append("\n");
            sb.Append("  CmsPageVersionId: ").Append(CmsPageVersionId).Append("\n");
            sb.Append("  ProductNumber: ").Append(ProductNumber).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  RestockTime: ").Append(RestockTime).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AvailableStock: ").Append(AvailableStock).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  IsCloseout: ").Append(IsCloseout).Append("\n");
            sb.Append("  DisplayGroup: ").Append(DisplayGroup).Append("\n");
            sb.Append("  MainVariantId: ").Append(MainVariantId).Append("\n");
            sb.Append("  ManufacturerNumber: ").Append(ManufacturerNumber).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  PurchaseSteps: ").Append(PurchaseSteps).Append("\n");
            sb.Append("  MaxPurchase: ").Append(MaxPurchase).Append("\n");
            sb.Append("  MinPurchase: ").Append(MinPurchase).Append("\n");
            sb.Append("  PurchaseUnit: ").Append(PurchaseUnit).Append("\n");
            sb.Append("  ReferenceUnit: ").Append(ReferenceUnit).Append("\n");
            sb.Append("  ShippingFree: ").Append(ShippingFree).Append("\n");
            sb.Append("  MarkAsTopseller: ").Append(MarkAsTopseller).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  RatingAverage: ").Append(RatingAverage).Append("\n");
            sb.Append("  CategoryTree: ").Append(CategoryTree).Append("\n");
            sb.Append("  PropertyIds: ").Append(PropertyIds).Append("\n");
            sb.Append("  OptionIds: ").Append(OptionIds).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  ChildCount: ").Append(ChildCount).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  PackUnit: ").Append(PackUnit).Append("\n");
            sb.Append("  PackUnitPlural: ").Append(PackUnitPlural).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CalculatedPrice: ").Append(CalculatedPrice).Append("\n");
            sb.Append("  CalculatedPrices: ").Append(CalculatedPrices).Append("\n");
            sb.Append("  CalculatedMaxPurchase: ").Append(CalculatedMaxPurchase).Append("\n");
            sb.Append("  CalculatedCheapestPrice: ").Append(CalculatedCheapestPrice).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  CmsPage: ").Append(CmsPage).Append("\n");
            sb.Append("  CanonicalProduct: ").Append(CanonicalProduct).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  CrossSellings: ").Append(CrossSellings).Append("\n");
            sb.Append("  ConfiguratorSettings: ").Append(ConfiguratorSettings).Append("\n");
            sb.Append("  ProductReviews: ").Append(ProductReviews).Append("\n");
            sb.Append("  MainCategories: ").Append(MainCategories).Append("\n");
            sb.Append("  SeoUrls: ").Append(SeoUrls).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Streams: ").Append(Streams).Append("\n");
            sb.Append("  CategoriesRo: ").Append(CategoriesRo).Append("\n");
            sb.Append("  SeoCategory: ").Append(SeoCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ParentVersionId == input.ParentVersionId ||
                    (this.ParentVersionId != null &&
                    this.ParentVersionId.Equals(input.ParentVersionId))
                ) && 
                (
                    this.ManufacturerId == input.ManufacturerId ||
                    (this.ManufacturerId != null &&
                    this.ManufacturerId.Equals(input.ManufacturerId))
                ) && 
                (
                    this.ProductManufacturerVersionId == input.ProductManufacturerVersionId ||
                    (this.ProductManufacturerVersionId != null &&
                    this.ProductManufacturerVersionId.Equals(input.ProductManufacturerVersionId))
                ) && 
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.CoverId == input.CoverId ||
                    (this.CoverId != null &&
                    this.CoverId.Equals(input.CoverId))
                ) && 
                (
                    this.ProductMediaVersionId == input.ProductMediaVersionId ||
                    (this.ProductMediaVersionId != null &&
                    this.ProductMediaVersionId.Equals(input.ProductMediaVersionId))
                ) && 
                (
                    this.DeliveryTimeId == input.DeliveryTimeId ||
                    (this.DeliveryTimeId != null &&
                    this.DeliveryTimeId.Equals(input.DeliveryTimeId))
                ) && 
                (
                    this.CanonicalProductId == input.CanonicalProductId ||
                    (this.CanonicalProductId != null &&
                    this.CanonicalProductId.Equals(input.CanonicalProductId))
                ) && 
                (
                    this.CmsPageId == input.CmsPageId ||
                    (this.CmsPageId != null &&
                    this.CmsPageId.Equals(input.CmsPageId))
                ) && 
                (
                    this.CmsPageVersionId == input.CmsPageVersionId ||
                    (this.CmsPageVersionId != null &&
                    this.CmsPageVersionId.Equals(input.CmsPageVersionId))
                ) && 
                (
                    this.ProductNumber == input.ProductNumber ||
                    (this.ProductNumber != null &&
                    this.ProductNumber.Equals(input.ProductNumber))
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.RestockTime == input.RestockTime ||
                    this.RestockTime.Equals(input.RestockTime)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.AvailableStock == input.AvailableStock ||
                    this.AvailableStock.Equals(input.AvailableStock)
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.IsCloseout == input.IsCloseout ||
                    this.IsCloseout.Equals(input.IsCloseout)
                ) && 
                (
                    this.DisplayGroup == input.DisplayGroup ||
                    (this.DisplayGroup != null &&
                    this.DisplayGroup.Equals(input.DisplayGroup))
                ) && 
                (
                    this.MainVariantId == input.MainVariantId ||
                    (this.MainVariantId != null &&
                    this.MainVariantId.Equals(input.MainVariantId))
                ) && 
                (
                    this.ManufacturerNumber == input.ManufacturerNumber ||
                    (this.ManufacturerNumber != null &&
                    this.ManufacturerNumber.Equals(input.ManufacturerNumber))
                ) && 
                (
                    this.Ean == input.Ean ||
                    (this.Ean != null &&
                    this.Ean.Equals(input.Ean))
                ) && 
                (
                    this.PurchaseSteps == input.PurchaseSteps ||
                    this.PurchaseSteps.Equals(input.PurchaseSteps)
                ) && 
                (
                    this.MaxPurchase == input.MaxPurchase ||
                    this.MaxPurchase.Equals(input.MaxPurchase)
                ) && 
                (
                    this.MinPurchase == input.MinPurchase ||
                    this.MinPurchase.Equals(input.MinPurchase)
                ) && 
                (
                    this.PurchaseUnit == input.PurchaseUnit ||
                    this.PurchaseUnit.Equals(input.PurchaseUnit)
                ) && 
                (
                    this.ReferenceUnit == input.ReferenceUnit ||
                    this.ReferenceUnit.Equals(input.ReferenceUnit)
                ) && 
                (
                    this.ShippingFree == input.ShippingFree ||
                    this.ShippingFree.Equals(input.ShippingFree)
                ) && 
                (
                    this.MarkAsTopseller == input.MarkAsTopseller ||
                    this.MarkAsTopseller.Equals(input.MarkAsTopseller)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.RatingAverage == input.RatingAverage ||
                    this.RatingAverage.Equals(input.RatingAverage)
                ) && 
                (
                    this.CategoryTree == input.CategoryTree ||
                    this.CategoryTree != null &&
                    input.CategoryTree != null &&
                    this.CategoryTree.SequenceEqual(input.CategoryTree)
                ) && 
                (
                    this.PropertyIds == input.PropertyIds ||
                    this.PropertyIds != null &&
                    input.PropertyIds != null &&
                    this.PropertyIds.SequenceEqual(input.PropertyIds)
                ) && 
                (
                    this.OptionIds == input.OptionIds ||
                    this.OptionIds != null &&
                    input.OptionIds != null &&
                    this.OptionIds.SequenceEqual(input.OptionIds)
                ) && 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.ChildCount == input.ChildCount ||
                    this.ChildCount.Equals(input.ChildCount)
                ) && 
                (
                    this.Sales == input.Sales ||
                    this.Sales.Equals(input.Sales)
                ) && 
                (
                    this.MetaDescription == input.MetaDescription ||
                    (this.MetaDescription != null &&
                    this.MetaDescription.Equals(input.MetaDescription))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MetaTitle == input.MetaTitle ||
                    (this.MetaTitle != null &&
                    this.MetaTitle.Equals(input.MetaTitle))
                ) && 
                (
                    this.PackUnit == input.PackUnit ||
                    (this.PackUnit != null &&
                    this.PackUnit.Equals(input.PackUnit))
                ) && 
                (
                    this.PackUnitPlural == input.PackUnitPlural ||
                    (this.PackUnitPlural != null &&
                    this.PackUnitPlural.Equals(input.PackUnitPlural))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CalculatedPrice == input.CalculatedPrice ||
                    (this.CalculatedPrice != null &&
                    this.CalculatedPrice.Equals(input.CalculatedPrice))
                ) && 
                (
                    this.CalculatedPrices == input.CalculatedPrices ||
                    this.CalculatedPrices != null &&
                    input.CalculatedPrices != null &&
                    this.CalculatedPrices.SequenceEqual(input.CalculatedPrices)
                ) && 
                (
                    this.CalculatedMaxPurchase == input.CalculatedMaxPurchase ||
                    this.CalculatedMaxPurchase.Equals(input.CalculatedMaxPurchase)
                ) && 
                (
                    this.CalculatedCheapestPrice == input.CalculatedCheapestPrice ||
                    (this.CalculatedCheapestPrice != null &&
                    this.CalculatedCheapestPrice.Equals(input.CalculatedCheapestPrice))
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    (this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(input.DeliveryTime))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Cover == input.Cover ||
                    (this.Cover != null &&
                    this.Cover.Equals(input.Cover))
                ) && 
                (
                    this.CmsPage == input.CmsPage ||
                    (this.CmsPage != null &&
                    this.CmsPage.Equals(input.CmsPage))
                ) && 
                (
                    this.CanonicalProduct == input.CanonicalProduct ||
                    (this.CanonicalProduct != null &&
                    this.CanonicalProduct.Equals(input.CanonicalProduct))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.CrossSellings == input.CrossSellings ||
                    (this.CrossSellings != null &&
                    this.CrossSellings.Equals(input.CrossSellings))
                ) && 
                (
                    this.ConfiguratorSettings == input.ConfiguratorSettings ||
                    (this.ConfiguratorSettings != null &&
                    this.ConfiguratorSettings.Equals(input.ConfiguratorSettings))
                ) && 
                (
                    this.ProductReviews == input.ProductReviews ||
                    (this.ProductReviews != null &&
                    this.ProductReviews.Equals(input.ProductReviews))
                ) && 
                (
                    this.MainCategories == input.MainCategories ||
                    (this.MainCategories != null &&
                    this.MainCategories.Equals(input.MainCategories))
                ) && 
                (
                    this.SeoUrls == input.SeoUrls ||
                    (this.SeoUrls != null &&
                    this.SeoUrls.Equals(input.SeoUrls))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.Streams == input.Streams ||
                    (this.Streams != null &&
                    this.Streams.Equals(input.Streams))
                ) && 
                (
                    this.CategoriesRo == input.CategoriesRo ||
                    (this.CategoriesRo != null &&
                    this.CategoriesRo.Equals(input.CategoriesRo))
                ) && 
                (
                    this.SeoCategory == input.SeoCategory ||
                    (this.SeoCategory != null &&
                    this.SeoCategory.Equals(input.SeoCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.ParentVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentVersionId.GetHashCode();
                }
                if (this.ManufacturerId != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerId.GetHashCode();
                }
                if (this.ProductManufacturerVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductManufacturerVersionId.GetHashCode();
                }
                if (this.UnitId != null)
                {
                    hashCode = (hashCode * 59) + this.UnitId.GetHashCode();
                }
                if (this.TaxId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxId.GetHashCode();
                }
                if (this.CoverId != null)
                {
                    hashCode = (hashCode * 59) + this.CoverId.GetHashCode();
                }
                if (this.ProductMediaVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductMediaVersionId.GetHashCode();
                }
                if (this.DeliveryTimeId != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryTimeId.GetHashCode();
                }
                if (this.CanonicalProductId != null)
                {
                    hashCode = (hashCode * 59) + this.CanonicalProductId.GetHashCode();
                }
                if (this.CmsPageId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageId.GetHashCode();
                }
                if (this.CmsPageVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPageVersionId.GetHashCode();
                }
                if (this.ProductNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ProductNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                hashCode = (hashCode * 59) + this.RestockTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.AvailableStock.GetHashCode();
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCloseout.GetHashCode();
                if (this.DisplayGroup != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayGroup.GetHashCode();
                }
                if (this.MainVariantId != null)
                {
                    hashCode = (hashCode * 59) + this.MainVariantId.GetHashCode();
                }
                if (this.ManufacturerNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerNumber.GetHashCode();
                }
                if (this.Ean != null)
                {
                    hashCode = (hashCode * 59) + this.Ean.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PurchaseSteps.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPurchase.GetHashCode();
                hashCode = (hashCode * 59) + this.MinPurchase.GetHashCode();
                hashCode = (hashCode * 59) + this.PurchaseUnit.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferenceUnit.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFree.GetHashCode();
                hashCode = (hashCode * 59) + this.MarkAsTopseller.GetHashCode();
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                if (this.ReleaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RatingAverage.GetHashCode();
                if (this.CategoryTree != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryTree.GetHashCode();
                }
                if (this.PropertyIds != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyIds.GetHashCode();
                }
                if (this.OptionIds != null)
                {
                    hashCode = (hashCode * 59) + this.OptionIds.GetHashCode();
                }
                if (this.CategoryIds != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChildCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                if (this.MetaDescription != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDescription.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.MetaTitle != null)
                {
                    hashCode = (hashCode * 59) + this.MetaTitle.GetHashCode();
                }
                if (this.PackUnit != null)
                {
                    hashCode = (hashCode * 59) + this.PackUnit.GetHashCode();
                }
                if (this.PackUnitPlural != null)
                {
                    hashCode = (hashCode * 59) + this.PackUnitPlural.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CalculatedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedPrice.GetHashCode();
                }
                if (this.CalculatedPrices != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedPrices.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CalculatedMaxPurchase.GetHashCode();
                if (this.CalculatedCheapestPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedCheapestPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsNew.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                if (this.DeliveryTime != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryTime.GetHashCode();
                }
                if (this.Tax != null)
                {
                    hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Cover != null)
                {
                    hashCode = (hashCode * 59) + this.Cover.GetHashCode();
                }
                if (this.CmsPage != null)
                {
                    hashCode = (hashCode * 59) + this.CmsPage.GetHashCode();
                }
                if (this.CanonicalProduct != null)
                {
                    hashCode = (hashCode * 59) + this.CanonicalProduct.GetHashCode();
                }
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                if (this.CrossSellings != null)
                {
                    hashCode = (hashCode * 59) + this.CrossSellings.GetHashCode();
                }
                if (this.ConfiguratorSettings != null)
                {
                    hashCode = (hashCode * 59) + this.ConfiguratorSettings.GetHashCode();
                }
                if (this.ProductReviews != null)
                {
                    hashCode = (hashCode * 59) + this.ProductReviews.GetHashCode();
                }
                if (this.MainCategories != null)
                {
                    hashCode = (hashCode * 59) + this.MainCategories.GetHashCode();
                }
                if (this.SeoUrls != null)
                {
                    hashCode = (hashCode * 59) + this.SeoUrls.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Streams != null)
                {
                    hashCode = (hashCode * 59) + this.Streams.GetHashCode();
                }
                if (this.CategoriesRo != null)
                {
                    hashCode = (hashCode * 59) + this.CategoriesRo.GetHashCode();
                }
                if (this.SeoCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SeoCategory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // ParentVersionId (string) pattern
            Regex regexParentVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentVersionId.Match(this.ParentVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentVersionId, must match a pattern of " + regexParentVersionId, new [] { "ParentVersionId" });
            }

            // ManufacturerId (string) pattern
            Regex regexManufacturerId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexManufacturerId.Match(this.ManufacturerId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManufacturerId, must match a pattern of " + regexManufacturerId, new [] { "ManufacturerId" });
            }

            // ProductManufacturerVersionId (string) pattern
            Regex regexProductManufacturerVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductManufacturerVersionId.Match(this.ProductManufacturerVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductManufacturerVersionId, must match a pattern of " + regexProductManufacturerVersionId, new [] { "ProductManufacturerVersionId" });
            }

            // UnitId (string) pattern
            Regex regexUnitId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexUnitId.Match(this.UnitId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitId, must match a pattern of " + regexUnitId, new [] { "UnitId" });
            }

            // TaxId (string) pattern
            Regex regexTaxId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexTaxId.Match(this.TaxId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxId, must match a pattern of " + regexTaxId, new [] { "TaxId" });
            }

            // CoverId (string) pattern
            Regex regexCoverId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCoverId.Match(this.CoverId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoverId, must match a pattern of " + regexCoverId, new [] { "CoverId" });
            }

            // ProductMediaVersionId (string) pattern
            Regex regexProductMediaVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexProductMediaVersionId.Match(this.ProductMediaVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductMediaVersionId, must match a pattern of " + regexProductMediaVersionId, new [] { "ProductMediaVersionId" });
            }

            // DeliveryTimeId (string) pattern
            Regex regexDeliveryTimeId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexDeliveryTimeId.Match(this.DeliveryTimeId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryTimeId, must match a pattern of " + regexDeliveryTimeId, new [] { "DeliveryTimeId" });
            }

            // CanonicalProductId (string) pattern
            Regex regexCanonicalProductId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCanonicalProductId.Match(this.CanonicalProductId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CanonicalProductId, must match a pattern of " + regexCanonicalProductId, new [] { "CanonicalProductId" });
            }

            // CmsPageId (string) pattern
            Regex regexCmsPageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageId.Match(this.CmsPageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageId, must match a pattern of " + regexCmsPageId, new [] { "CmsPageId" });
            }

            // CmsPageVersionId (string) pattern
            Regex regexCmsPageVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCmsPageVersionId.Match(this.CmsPageVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsPageVersionId, must match a pattern of " + regexCmsPageVersionId, new [] { "CmsPageVersionId" });
            }

            // MainVariantId (string) pattern
            Regex regexMainVariantId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexMainVariantId.Match(this.MainVariantId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MainVariantId, must match a pattern of " + regexMainVariantId, new [] { "MainVariantId" });
            }

            yield break;
        }
    }

}

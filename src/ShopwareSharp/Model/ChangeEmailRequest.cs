// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ChangeEmailRequest
    /// </summary>
    public partial class ChangeEmailRequest : IEquatable<ChangeEmailRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeEmailRequest" /> class.
        /// </summary>
        /// <param name="email">New email address. Has to be unique amongst all customers (required)</param>
        /// <param name="emailConfirmation">Confirmation of the new email address. (required)</param>
        /// <param name="password">Customer&#39;s current password (required)</param>
        public ChangeEmailRequest(string email, string emailConfirmation, string password)
        {
            if (email == null)
                throw new ArgumentNullException("email is a required property for ChangeEmailRequest and cannot be null.");

            if (emailConfirmation == null)
                throw new ArgumentNullException("emailConfirmation is a required property for ChangeEmailRequest and cannot be null.");

            if (password == null)
                throw new ArgumentNullException("password is a required property for ChangeEmailRequest and cannot be null.");

            Email = email;
            EmailConfirmation = emailConfirmation;
            Password = password;
        }

        /// <summary>
        /// New email address. Has to be unique amongst all customers
        /// </summary>
        /// <value>New email address. Has to be unique amongst all customers</value>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Confirmation of the new email address.
        /// </summary>
        /// <value>Confirmation of the new email address.</value>
        [JsonPropertyName("emailConfirmation")]
        public string EmailConfirmation { get; set; }

        /// <summary>
        /// Customer&#39;s current password
        /// </summary>
        /// <value>Customer&#39;s current password</value>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeEmailRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailConfirmation: ").Append(EmailConfirmation).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ChangeEmailRequest);
        }

        /// <summary>
        /// Returns true if ChangeEmailRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeEmailRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeEmailRequest? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailConfirmation == input.EmailConfirmation ||
                    (this.EmailConfirmation != null &&
                    this.EmailConfirmation.Equals(input.EmailConfirmation))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.EmailConfirmation != null)
                {
                    hashCode = (hashCode * 59) + this.EmailConfirmation.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

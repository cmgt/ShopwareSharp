/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// UpdateContextRequest
    /// </summary>
    [DataContract(Name = "updateContext_request")]
    public partial class UpdateContextRequest : IEquatable<UpdateContextRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateContextRequest" /> class.
        /// </summary>
        /// <param name="currencyId">Currency.</param>
        /// <param name="languageId">Language.</param>
        /// <param name="billingAddressId">Billing Address.</param>
        /// <param name="shippingAddressId">Shipping Address.</param>
        /// <param name="paymentMethodId">Payment Method.</param>
        /// <param name="shippingMethodId">Shipping Method.</param>
        /// <param name="countryId">Country.</param>
        /// <param name="countryStateId">Country State.</param>
        public UpdateContextRequest(string currencyId = default(string), string languageId = default(string), string billingAddressId = default(string), string shippingAddressId = default(string), string paymentMethodId = default(string), string shippingMethodId = default(string), string countryId = default(string), string countryStateId = default(string))
        {
            this._CurrencyId = currencyId;
            if (this.CurrencyId != null)
            {
                this._flagCurrencyId = true;
            }
            this._LanguageId = languageId;
            if (this.LanguageId != null)
            {
                this._flagLanguageId = true;
            }
            this._BillingAddressId = billingAddressId;
            if (this.BillingAddressId != null)
            {
                this._flagBillingAddressId = true;
            }
            this._ShippingAddressId = shippingAddressId;
            if (this.ShippingAddressId != null)
            {
                this._flagShippingAddressId = true;
            }
            this._PaymentMethodId = paymentMethodId;
            if (this.PaymentMethodId != null)
            {
                this._flagPaymentMethodId = true;
            }
            this._ShippingMethodId = shippingMethodId;
            if (this.ShippingMethodId != null)
            {
                this._flagShippingMethodId = true;
            }
            this._CountryId = countryId;
            if (this.CountryId != null)
            {
                this._flagCountryId = true;
            }
            this._CountryStateId = countryStateId;
            if (this.CountryStateId != null)
            {
                this._flagCountryStateId = true;
            }
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name = "currencyId", EmitDefaultValue = false)]
        public string CurrencyId
        {
            get{ return _CurrencyId;}
            set
            {
                _CurrencyId = value;
                _flagCurrencyId = true;
            }
        }
        private string _CurrencyId;
        private bool _flagCurrencyId;

        /// <summary>
        /// Returns false as CurrencyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyId()
        {
            return _flagCurrencyId;
        }
        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name = "languageId", EmitDefaultValue = false)]
        public string LanguageId
        {
            get{ return _LanguageId;}
            set
            {
                _LanguageId = value;
                _flagLanguageId = true;
            }
        }
        private string _LanguageId;
        private bool _flagLanguageId;

        /// <summary>
        /// Returns false as LanguageId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageId()
        {
            return _flagLanguageId;
        }
        /// <summary>
        /// Billing Address
        /// </summary>
        /// <value>Billing Address</value>
        [DataMember(Name = "billingAddressId", EmitDefaultValue = false)]
        public string BillingAddressId
        {
            get{ return _BillingAddressId;}
            set
            {
                _BillingAddressId = value;
                _flagBillingAddressId = true;
            }
        }
        private string _BillingAddressId;
        private bool _flagBillingAddressId;

        /// <summary>
        /// Returns false as BillingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBillingAddressId()
        {
            return _flagBillingAddressId;
        }
        /// <summary>
        /// Shipping Address
        /// </summary>
        /// <value>Shipping Address</value>
        [DataMember(Name = "shippingAddressId", EmitDefaultValue = false)]
        public string ShippingAddressId
        {
            get{ return _ShippingAddressId;}
            set
            {
                _ShippingAddressId = value;
                _flagShippingAddressId = true;
            }
        }
        private string _ShippingAddressId;
        private bool _flagShippingAddressId;

        /// <summary>
        /// Returns false as ShippingAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingAddressId()
        {
            return _flagShippingAddressId;
        }
        /// <summary>
        /// Payment Method
        /// </summary>
        /// <value>Payment Method</value>
        [DataMember(Name = "paymentMethodId", EmitDefaultValue = false)]
        public string PaymentMethodId
        {
            get{ return _PaymentMethodId;}
            set
            {
                _PaymentMethodId = value;
                _flagPaymentMethodId = true;
            }
        }
        private string _PaymentMethodId;
        private bool _flagPaymentMethodId;

        /// <summary>
        /// Returns false as PaymentMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethodId()
        {
            return _flagPaymentMethodId;
        }
        /// <summary>
        /// Shipping Method
        /// </summary>
        /// <value>Shipping Method</value>
        [DataMember(Name = "shippingMethodId", EmitDefaultValue = false)]
        public string ShippingMethodId
        {
            get{ return _ShippingMethodId;}
            set
            {
                _ShippingMethodId = value;
                _flagShippingMethodId = true;
            }
        }
        private string _ShippingMethodId;
        private bool _flagShippingMethodId;

        /// <summary>
        /// Returns false as ShippingMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethodId()
        {
            return _flagShippingMethodId;
        }
        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public string CountryId
        {
            get{ return _CountryId;}
            set
            {
                _CountryId = value;
                _flagCountryId = true;
            }
        }
        private string _CountryId;
        private bool _flagCountryId;

        /// <summary>
        /// Returns false as CountryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryId()
        {
            return _flagCountryId;
        }
        /// <summary>
        /// Country State
        /// </summary>
        /// <value>Country State</value>
        [DataMember(Name = "countryStateId", EmitDefaultValue = false)]
        public string CountryStateId
        {
            get{ return _CountryStateId;}
            set
            {
                _CountryStateId = value;
                _flagCountryStateId = true;
            }
        }
        private string _CountryStateId;
        private bool _flagCountryStateId;

        /// <summary>
        /// Returns false as CountryStateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryStateId()
        {
            return _flagCountryStateId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateContextRequest {\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  BillingAddressId: ").Append(BillingAddressId).Append("\n");
            sb.Append("  ShippingAddressId: ").Append(ShippingAddressId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryStateId: ").Append(CountryStateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateContextRequest);
        }

        /// <summary>
        /// Returns true if UpdateContextRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateContextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateContextRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.BillingAddressId == input.BillingAddressId ||
                    (this.BillingAddressId != null &&
                    this.BillingAddressId.Equals(input.BillingAddressId))
                ) && 
                (
                    this.ShippingAddressId == input.ShippingAddressId ||
                    (this.ShippingAddressId != null &&
                    this.ShippingAddressId.Equals(input.ShippingAddressId))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountryStateId == input.CountryStateId ||
                    (this.CountryStateId != null &&
                    this.CountryStateId.Equals(input.CountryStateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.BillingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddressId.GetHashCode();
                }
                if (this.ShippingAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddressId.GetHashCode();
                }
                if (this.PaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodId.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.CountryStateId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryStateId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CurrencyId (string) pattern
            Regex regexCurrencyId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCurrencyId.Match(this.CurrencyId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyId, must match a pattern of " + regexCurrencyId, new [] { "CurrencyId" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // BillingAddressId (string) pattern
            Regex regexBillingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexBillingAddressId.Match(this.BillingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingAddressId, must match a pattern of " + regexBillingAddressId, new [] { "BillingAddressId" });
            }

            // ShippingAddressId (string) pattern
            Regex regexShippingAddressId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingAddressId.Match(this.ShippingAddressId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingAddressId, must match a pattern of " + regexShippingAddressId, new [] { "ShippingAddressId" });
            }

            // PaymentMethodId (string) pattern
            Regex regexPaymentMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexPaymentMethodId.Match(this.PaymentMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethodId, must match a pattern of " + regexPaymentMethodId, new [] { "PaymentMethodId" });
            }

            // ShippingMethodId (string) pattern
            Regex regexShippingMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingMethodId.Match(this.ShippingMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMethodId, must match a pattern of " + regexShippingMethodId, new [] { "ShippingMethodId" });
            }

            // CountryId (string) pattern
            Regex regexCountryId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCountryId.Match(this.CountryId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryId, must match a pattern of " + regexCountryId, new [] { "CountryId" });
            }

            // CountryStateId (string) pattern
            Regex regexCountryStateId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCountryStateId.Match(this.CountryStateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryStateId, must match a pattern of " + regexCountryStateId, new [] { "CountryStateId" });
            }

            yield break;
        }
    }

}

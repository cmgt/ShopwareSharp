/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// SalesChannelContextAllOf
    /// </summary>
    [DataContract(Name = "SalesChannelContext_allOf")]
    public partial class SalesChannelContextAllOf : IEquatable<SalesChannelContextAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesChannelContextAllOf" /> class.
        /// </summary>
        /// <param name="token">Context the user session.</param>
        /// <param name="currentCustomerGroup">currentCustomerGroup.</param>
        /// <param name="fallbackCustomerGroup">fallbackCustomerGroup.</param>
        /// <param name="currency">currency.</param>
        /// <param name="salesChannel">salesChannel.</param>
        /// <param name="taxRules">Currently active tax rules and/or rates.</param>
        /// <param name="customer">customer.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="context">context.</param>
        public SalesChannelContextAllOf(string token = default(string), SalesChannelContextAllOfCurrentCustomerGroup currentCustomerGroup = default(SalesChannelContextAllOfCurrentCustomerGroup), SalesChannelContextAllOfFallbackCustomerGroup fallbackCustomerGroup = default(SalesChannelContextAllOfFallbackCustomerGroup), SalesChannelContextAllOfCurrency currency = default(SalesChannelContextAllOfCurrency), SalesChannelContextAllOfSalesChannel salesChannel = default(SalesChannelContextAllOfSalesChannel), List<SalesChannelContextAllOfTaxRules> taxRules = default(List<SalesChannelContextAllOfTaxRules>), SalesChannelContextAllOfCustomer customer = default(SalesChannelContextAllOfCustomer), SalesChannelContextAllOfPaymentMethod paymentMethod = default(SalesChannelContextAllOfPaymentMethod), SalesChannelContextAllOfShippingMethod shippingMethod = default(SalesChannelContextAllOfShippingMethod), SalesChannelContextAllOfContext context = default(SalesChannelContextAllOfContext))
        {
            this.Token = token;
            this.CurrentCustomerGroup = currentCustomerGroup;
            this.FallbackCustomerGroup = fallbackCustomerGroup;
            this.Currency = currency;
            this.SalesChannel = salesChannel;
            this.TaxRules = taxRules;
            this.Customer = customer;
            this.PaymentMethod = paymentMethod;
            this.ShippingMethod = shippingMethod;
            this.Context = context;
        }

        /// <summary>
        /// Context the user session
        /// </summary>
        /// <value>Context the user session</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCustomerGroup
        /// </summary>
        [DataMember(Name = "currentCustomerGroup", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCurrentCustomerGroup CurrentCustomerGroup { get; set; }

        /// <summary>
        /// Gets or Sets FallbackCustomerGroup
        /// </summary>
        [DataMember(Name = "fallbackCustomerGroup", EmitDefaultValue = false)]
        public SalesChannelContextAllOfFallbackCustomerGroup FallbackCustomerGroup { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets SalesChannel
        /// </summary>
        [DataMember(Name = "salesChannel", EmitDefaultValue = false)]
        public SalesChannelContextAllOfSalesChannel SalesChannel { get; set; }

        /// <summary>
        /// Currently active tax rules and/or rates
        /// </summary>
        /// <value>Currently active tax rules and/or rates</value>
        [DataMember(Name = "taxRules", EmitDefaultValue = false)]
        public List<SalesChannelContextAllOfTaxRules> TaxRules { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public SalesChannelContextAllOfCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public SalesChannelContextAllOfPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "shippingMethod", EmitDefaultValue = false)]
        public SalesChannelContextAllOfShippingMethod ShippingMethod { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public SalesChannelContextAllOfContext Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesChannelContextAllOf {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CurrentCustomerGroup: ").Append(CurrentCustomerGroup).Append("\n");
            sb.Append("  FallbackCustomerGroup: ").Append(FallbackCustomerGroup).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesChannelContextAllOf);
        }

        /// <summary>
        /// Returns true if SalesChannelContextAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesChannelContextAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelContextAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CurrentCustomerGroup == input.CurrentCustomerGroup ||
                    (this.CurrentCustomerGroup != null &&
                    this.CurrentCustomerGroup.Equals(input.CurrentCustomerGroup))
                ) && 
                (
                    this.FallbackCustomerGroup == input.FallbackCustomerGroup ||
                    (this.FallbackCustomerGroup != null &&
                    this.FallbackCustomerGroup.Equals(input.FallbackCustomerGroup))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SalesChannel == input.SalesChannel ||
                    (this.SalesChannel != null &&
                    this.SalesChannel.Equals(input.SalesChannel))
                ) && 
                (
                    this.TaxRules == input.TaxRules ||
                    this.TaxRules != null &&
                    input.TaxRules != null &&
                    this.TaxRules.SequenceEqual(input.TaxRules)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.CurrentCustomerGroup != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentCustomerGroup.GetHashCode();
                }
                if (this.FallbackCustomerGroup != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackCustomerGroup.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.SalesChannel != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannel.GetHashCode();
                }
                if (this.TaxRules != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRules.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

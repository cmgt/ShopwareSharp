/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "MailHeaderFooter")]
    public partial class MailHeaderFooter : IEquatable<MailHeaderFooter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailHeaderFooter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MailHeaderFooter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MailHeaderFooter" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="systemDefault">systemDefault.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="headerHtml">headerHtml.</param>
        /// <param name="headerPlain">headerPlain.</param>
        /// <param name="footerHtml">footerHtml.</param>
        /// <param name="footerPlain">footerPlain.</param>
        /// <param name="translated">translated.</param>
        public MailHeaderFooter(string id = default(string), bool systemDefault = default(bool), string name = default(string), string description = default(string), string headerHtml = default(string), string headerPlain = default(string), string footerHtml = default(string), string footerPlain = default(string), Object translated = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MailHeaderFooter and cannot be null");
            }
            this._Name = name;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._SystemDefault = systemDefault;
            if (this.SystemDefault != null)
            {
                this._flagSystemDefault = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._HeaderHtml = headerHtml;
            if (this.HeaderHtml != null)
            {
                this._flagHeaderHtml = true;
            }
            this._HeaderPlain = headerPlain;
            if (this.HeaderPlain != null)
            {
                this._flagHeaderPlain = true;
            }
            this._FooterHtml = footerHtml;
            if (this.FooterHtml != null)
            {
                this._flagFooterHtml = true;
            }
            this._FooterPlain = footerPlain;
            if (this.FooterPlain != null)
            {
                this._flagFooterPlain = true;
            }
            this._Translated = translated;
            if (this.Translated != null)
            {
                this._flagTranslated = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets SystemDefault
        /// </summary>
        [DataMember(Name = "systemDefault", EmitDefaultValue = true)]
        public bool SystemDefault
        {
            get{ return _SystemDefault;}
            set
            {
                _SystemDefault = value;
                _flagSystemDefault = true;
            }
        }
        private bool _SystemDefault;
        private bool _flagSystemDefault;

        /// <summary>
        /// Returns false as SystemDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSystemDefault()
        {
            return _flagSystemDefault;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Gets or Sets HeaderHtml
        /// </summary>
        [DataMember(Name = "headerHtml", EmitDefaultValue = false)]
        public string HeaderHtml
        {
            get{ return _HeaderHtml;}
            set
            {
                _HeaderHtml = value;
                _flagHeaderHtml = true;
            }
        }
        private string _HeaderHtml;
        private bool _flagHeaderHtml;

        /// <summary>
        /// Returns false as HeaderHtml should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHeaderHtml()
        {
            return _flagHeaderHtml;
        }
        /// <summary>
        /// Gets or Sets HeaderPlain
        /// </summary>
        [DataMember(Name = "headerPlain", EmitDefaultValue = false)]
        public string HeaderPlain
        {
            get{ return _HeaderPlain;}
            set
            {
                _HeaderPlain = value;
                _flagHeaderPlain = true;
            }
        }
        private string _HeaderPlain;
        private bool _flagHeaderPlain;

        /// <summary>
        /// Returns false as HeaderPlain should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHeaderPlain()
        {
            return _flagHeaderPlain;
        }
        /// <summary>
        /// Gets or Sets FooterHtml
        /// </summary>
        [DataMember(Name = "footerHtml", EmitDefaultValue = false)]
        public string FooterHtml
        {
            get{ return _FooterHtml;}
            set
            {
                _FooterHtml = value;
                _flagFooterHtml = true;
            }
        }
        private string _FooterHtml;
        private bool _flagFooterHtml;

        /// <summary>
        /// Returns false as FooterHtml should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFooterHtml()
        {
            return _flagFooterHtml;
        }
        /// <summary>
        /// Gets or Sets FooterPlain
        /// </summary>
        [DataMember(Name = "footerPlain", EmitDefaultValue = false)]
        public string FooterPlain
        {
            get{ return _FooterPlain;}
            set
            {
                _FooterPlain = value;
                _flagFooterPlain = true;
            }
        }
        private string _FooterPlain;
        private bool _flagFooterPlain;

        /// <summary>
        /// Returns false as FooterPlain should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFooterPlain()
        {
            return _flagFooterPlain;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [DataMember(Name = "translated", EmitDefaultValue = false)]
        public Object Translated
        {
            get{ return _Translated;}
            set
            {
                _Translated = value;
                _flagTranslated = true;
            }
        }
        private Object _Translated;
        private bool _flagTranslated;

        /// <summary>
        /// Returns false as Translated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTranslated()
        {
            return _flagTranslated;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MailHeaderFooter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SystemDefault: ").Append(SystemDefault).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HeaderHtml: ").Append(HeaderHtml).Append("\n");
            sb.Append("  HeaderPlain: ").Append(HeaderPlain).Append("\n");
            sb.Append("  FooterHtml: ").Append(FooterHtml).Append("\n");
            sb.Append("  FooterPlain: ").Append(FooterPlain).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailHeaderFooter);
        }

        /// <summary>
        /// Returns true if MailHeaderFooter instances are equal
        /// </summary>
        /// <param name="input">Instance of MailHeaderFooter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailHeaderFooter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SystemDefault == input.SystemDefault ||
                    this.SystemDefault.Equals(input.SystemDefault)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HeaderHtml == input.HeaderHtml ||
                    (this.HeaderHtml != null &&
                    this.HeaderHtml.Equals(input.HeaderHtml))
                ) && 
                (
                    this.HeaderPlain == input.HeaderPlain ||
                    (this.HeaderPlain != null &&
                    this.HeaderPlain.Equals(input.HeaderPlain))
                ) && 
                (
                    this.FooterHtml == input.FooterHtml ||
                    (this.FooterHtml != null &&
                    this.FooterHtml.Equals(input.FooterHtml))
                ) && 
                (
                    this.FooterPlain == input.FooterPlain ||
                    (this.FooterPlain != null &&
                    this.FooterPlain.Equals(input.FooterPlain))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SystemDefault.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.HeaderHtml != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderHtml.GetHashCode();
                }
                if (this.HeaderPlain != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderPlain.GetHashCode();
                }
                if (this.FooterHtml != null)
                {
                    hashCode = (hashCode * 59) + this.FooterHtml.GetHashCode();
                }
                if (this.FooterPlain != null)
                {
                    hashCode = (hashCode * 59) + this.FooterPlain.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "SeoUrl")]
    public partial class SeoUrl : IEquatable<SeoUrl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeoUrl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SeoUrl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeoUrl" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="salesChannelId">salesChannelId.</param>
        /// <param name="languageId">languageId (required).</param>
        /// <param name="foreignKey">foreignKey (required).</param>
        /// <param name="routeName">routeName (required).</param>
        /// <param name="pathInfo">pathInfo (required).</param>
        /// <param name="seoPathInfo">seoPathInfo (required).</param>
        /// <param name="isCanonical">isCanonical.</param>
        /// <param name="isModified">isModified.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="url">url.</param>
        /// <param name="customFields">customFields.</param>
        public SeoUrl(string id = default(string), string salesChannelId = default(string), string languageId = default(string), string foreignKey = default(string), string routeName = default(string), string pathInfo = default(string), string seoPathInfo = default(string), bool isCanonical = default(bool), bool isModified = default(bool), bool isDeleted = default(bool), string url = default(string), Object customFields = default(Object))
        {
            // to ensure "languageId" is required (not null)
            if (languageId == null)
            {
                throw new ArgumentNullException("languageId is a required property for SeoUrl and cannot be null");
            }
            this.LanguageId = languageId;
            // to ensure "foreignKey" is required (not null)
            if (foreignKey == null)
            {
                throw new ArgumentNullException("foreignKey is a required property for SeoUrl and cannot be null");
            }
            this.ForeignKey = foreignKey;
            // to ensure "routeName" is required (not null)
            if (routeName == null)
            {
                throw new ArgumentNullException("routeName is a required property for SeoUrl and cannot be null");
            }
            this.RouteName = routeName;
            // to ensure "pathInfo" is required (not null)
            if (pathInfo == null)
            {
                throw new ArgumentNullException("pathInfo is a required property for SeoUrl and cannot be null");
            }
            this.PathInfo = pathInfo;
            // to ensure "seoPathInfo" is required (not null)
            if (seoPathInfo == null)
            {
                throw new ArgumentNullException("seoPathInfo is a required property for SeoUrl and cannot be null");
            }
            this.SeoPathInfo = seoPathInfo;
            this.Id = id;
            this.SalesChannelId = salesChannelId;
            this.IsCanonical = isCanonical;
            this.IsModified = isModified;
            this.IsDeleted = isDeleted;
            this.Url = url;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [DataMember(Name = "salesChannelId", EmitDefaultValue = false)]
        public string SalesChannelId { get; set; }

        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "languageId", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageId { get; set; }

        /// <summary>
        /// Gets or Sets ForeignKey
        /// </summary>
        [DataMember(Name = "foreignKey", IsRequired = true, EmitDefaultValue = false)]
        public string ForeignKey { get; set; }

        /// <summary>
        /// Gets or Sets RouteName
        /// </summary>
        [DataMember(Name = "routeName", IsRequired = true, EmitDefaultValue = false)]
        public string RouteName { get; set; }

        /// <summary>
        /// Gets or Sets PathInfo
        /// </summary>
        [DataMember(Name = "pathInfo", IsRequired = true, EmitDefaultValue = false)]
        public string PathInfo { get; set; }

        /// <summary>
        /// Gets or Sets SeoPathInfo
        /// </summary>
        [DataMember(Name = "seoPathInfo", IsRequired = true, EmitDefaultValue = false)]
        public string SeoPathInfo { get; set; }

        /// <summary>
        /// Gets or Sets IsCanonical
        /// </summary>
        [DataMember(Name = "isCanonical", EmitDefaultValue = true)]
        public bool IsCanonical { get; set; }

        /// <summary>
        /// Gets or Sets IsModified
        /// </summary>
        [DataMember(Name = "isModified", EmitDefaultValue = true)]
        public bool IsModified { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeoUrl {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  ForeignKey: ").Append(ForeignKey).Append("\n");
            sb.Append("  RouteName: ").Append(RouteName).Append("\n");
            sb.Append("  PathInfo: ").Append(PathInfo).Append("\n");
            sb.Append("  SeoPathInfo: ").Append(SeoPathInfo).Append("\n");
            sb.Append("  IsCanonical: ").Append(IsCanonical).Append("\n");
            sb.Append("  IsModified: ").Append(IsModified).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeoUrl);
        }

        /// <summary>
        /// Returns true if SeoUrl instances are equal
        /// </summary>
        /// <param name="input">Instance of SeoUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeoUrl input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.ForeignKey == input.ForeignKey ||
                    (this.ForeignKey != null &&
                    this.ForeignKey.Equals(input.ForeignKey))
                ) && 
                (
                    this.RouteName == input.RouteName ||
                    (this.RouteName != null &&
                    this.RouteName.Equals(input.RouteName))
                ) && 
                (
                    this.PathInfo == input.PathInfo ||
                    (this.PathInfo != null &&
                    this.PathInfo.Equals(input.PathInfo))
                ) && 
                (
                    this.SeoPathInfo == input.SeoPathInfo ||
                    (this.SeoPathInfo != null &&
                    this.SeoPathInfo.Equals(input.SeoPathInfo))
                ) && 
                (
                    this.IsCanonical == input.IsCanonical ||
                    this.IsCanonical.Equals(input.IsCanonical)
                ) && 
                (
                    this.IsModified == input.IsModified ||
                    this.IsModified.Equals(input.IsModified)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.LanguageId != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageId.GetHashCode();
                }
                if (this.ForeignKey != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignKey.GetHashCode();
                }
                if (this.RouteName != null)
                {
                    hashCode = (hashCode * 59) + this.RouteName.GetHashCode();
                }
                if (this.PathInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PathInfo.GetHashCode();
                }
                if (this.SeoPathInfo != null)
                {
                    hashCode = (hashCode * 59) + this.SeoPathInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCanonical.GetHashCode();
                hashCode = (hashCode * 59) + this.IsModified.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // SalesChannelId (string) pattern
            Regex regexSalesChannelId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalesChannelId.Match(this.SalesChannelId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesChannelId, must match a pattern of " + regexSalesChannelId, new [] { "SalesChannelId" });
            }

            // LanguageId (string) pattern
            Regex regexLanguageId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexLanguageId.Match(this.LanguageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageId, must match a pattern of " + regexLanguageId, new [] { "LanguageId" });
            }

            // ForeignKey (string) pattern
            Regex regexForeignKey = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexForeignKey.Match(this.ForeignKey).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForeignKey, must match a pattern of " + regexForeignKey, new [] { "ForeignKey" });
            }

            yield break;
        }
    }

}

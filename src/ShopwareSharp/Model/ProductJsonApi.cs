// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class ProductJsonApi : IEquatable<ProductJsonApi>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductJsonApi" /> class.
        /// </summary>
        /// <param name="resource"></param>
        /// <param name="productJsonApiAllOf"></param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="availableStock">availableStock</param>
        /// <param name="available">available</param>
        /// <param name="displayGroup">displayGroup</param>
        /// <param name="ratingAverage">ratingAverage</param>
        /// <param name="categoryTree">categoryTree</param>
        /// <param name="propertyIds">propertyIds</param>
        /// <param name="optionIds">optionIds</param>
        /// <param name="categoryIds">categoryIds</param>
        /// <param name="childCount">childCount</param>
        /// <param name="sales">sales</param>
        /// <param name="updatedAt">updatedAt</param>
        public ProductJsonApi(Resource resource, ProductJsonApiAllOf productJsonApiAllOf, DateTime createdAt, long? availableStock = default, bool? available = default, string? displayGroup = default, float? ratingAverage = default, List<string>? categoryTree = default, List<string>? propertyIds = default, List<string>? optionIds = default, List<string>? categoryIds = default, long? childCount = default, long? sales = default, DateTime? updatedAt = default)
        {
            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for ProductJsonApi and cannot be null.");

            Resource = resource;
            ProductJsonApiAllOf = productJsonApiAllOf;
            CreatedAt = createdAt;
            AvailableStock = availableStock;
            Available = available;
            DisplayGroup = displayGroup;
            RatingAverage = ratingAverage;
            CategoryTree = categoryTree;
            PropertyIds = propertyIds;
            OptionIds = optionIds;
            CategoryIds = categoryIds;
            ChildCount = childCount;
            Sales = sales;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        public Resource Resource { get; set; }

        /// <summary>
        /// Gets or Sets ProductJsonApiAllOf
        /// </summary>
        public ProductJsonApiAllOf ProductJsonApiAllOf { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableStock
        /// </summary>
        [JsonPropertyName("availableStock")]
        public long? AvailableStock { get; private set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [JsonPropertyName("available")]
        public bool? Available { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayGroup
        /// </summary>
        [JsonPropertyName("displayGroup")]
        public string? DisplayGroup { get; private set; }

        /// <summary>
        /// Gets or Sets RatingAverage
        /// </summary>
        [JsonPropertyName("ratingAverage")]
        public float? RatingAverage { get; private set; }

        /// <summary>
        /// Gets or Sets CategoryTree
        /// </summary>
        [JsonPropertyName("categoryTree")]
        public List<string>? CategoryTree { get; private set; }

        /// <summary>
        /// Gets or Sets PropertyIds
        /// </summary>
        [JsonPropertyName("propertyIds")]
        public List<string>? PropertyIds { get; private set; }

        /// <summary>
        /// Gets or Sets OptionIds
        /// </summary>
        [JsonPropertyName("optionIds")]
        public List<string>? OptionIds { get; private set; }

        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [JsonPropertyName("categoryIds")]
        public List<string>? CategoryIds { get; private set; }

        /// <summary>
        /// Gets or Sets ChildCount
        /// </summary>
        [JsonPropertyName("childCount")]
        public long? ChildCount { get; private set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [JsonPropertyName("sales")]
        public long? Sales { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductJsonApi {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AvailableStock: ").Append(AvailableStock).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  DisplayGroup: ").Append(DisplayGroup).Append("\n");
            sb.Append("  RatingAverage: ").Append(RatingAverage).Append("\n");
            sb.Append("  CategoryTree: ").Append(CategoryTree).Append("\n");
            sb.Append("  PropertyIds: ").Append(PropertyIds).Append("\n");
            sb.Append("  OptionIds: ").Append(OptionIds).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  ChildCount: ").Append(ChildCount).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ProductJsonApi);
        }

        /// <summary>
        /// Returns true if ProductJsonApi instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductJsonApi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductJsonApi? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.AvailableStock == input.AvailableStock ||
                    this.AvailableStock.Equals(input.AvailableStock)
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.DisplayGroup == input.DisplayGroup ||
                    (this.DisplayGroup != null &&
                    this.DisplayGroup.Equals(input.DisplayGroup))
                ) && 
                (
                    this.RatingAverage == input.RatingAverage ||
                    this.RatingAverage.Equals(input.RatingAverage)
                ) && 
                (
                    this.CategoryTree == input.CategoryTree ||
                    this.CategoryTree != null &&
                    input.CategoryTree != null &&
                    this.CategoryTree.SequenceEqual(input.CategoryTree)
                ) && 
                (
                    this.PropertyIds == input.PropertyIds ||
                    this.PropertyIds != null &&
                    input.PropertyIds != null &&
                    this.PropertyIds.SequenceEqual(input.PropertyIds)
                ) && 
                (
                    this.OptionIds == input.OptionIds ||
                    this.OptionIds != null &&
                    input.OptionIds != null &&
                    this.OptionIds.SequenceEqual(input.OptionIds)
                ) && 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.ChildCount == input.ChildCount ||
                    this.ChildCount.Equals(input.ChildCount)
                ) && 
                (
                    this.Sales == input.Sales ||
                    this.Sales.Equals(input.Sales)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AvailableStock.GetHashCode();
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                if (this.DisplayGroup != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RatingAverage.GetHashCode();
                if (this.CategoryTree != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryTree.GetHashCode();
                }
                if (this.PropertyIds != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyIds.GetHashCode();
                }
                if (this.OptionIds != null)
                {
                    hashCode = (hashCode * 59) + this.OptionIds.GetHashCode();
                }
                if (this.CategoryIds != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChildCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ProductJsonApi
    /// </summary>
    public class ProductJsonApiJsonConverter : JsonConverter<ProductJsonApi>
    {
        /// <summary>
        /// Returns a boolean if the type is compatible with this converter.
        /// </summary>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        public override bool CanConvert(Type typeToConvert) => typeof(ProductJsonApi).IsAssignableFrom(typeToConvert);

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProductJsonApi Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            int currentDepth = reader.CurrentDepth;

            if (reader.TokenType != JsonTokenType.StartObject)
                throw new JsonException();

            Utf8JsonReader resourceReader = reader;
            bool resourceDeserialized = Client.ClientUtils.TryDeserialize<Resource>(ref resourceReader, options, out Resource? resource);

            Utf8JsonReader productJsonApiAllOfReader = reader;
            bool productJsonApiAllOfDeserialized = Client.ClientUtils.TryDeserialize<ProductJsonApiAllOf>(ref productJsonApiAllOfReader, options, out ProductJsonApiAllOf? productJsonApiAllOf);

            DateTime? createdAt = default;
            long? availableStock = default;
            bool? available = default;
            string? displayGroup = default;
            float? ratingAverage = default;
            List<string>? categoryTree = default;
            List<string>? propertyIds = default;
            List<string>? optionIds = default;
            List<string>? categoryIds = default;
            long? childCount = default;
            long? sales = default;
            DateTime? updatedAt = default;

            while (reader.Read())
            {
                if (reader.TokenType == JsonTokenType.EndObject && currentDepth == reader.CurrentDepth)
                    break;

                if (reader.TokenType == JsonTokenType.PropertyName)
                {
                    string? propertyName = reader.GetString();
                    reader.Read();

                    switch (propertyName)
                    {
                        case "createdAt":
                            createdAt = reader.GetDateTime();
                            break;
                        case "availableStock":
                            availableStock = reader.GetInt32();
                            availableStock = reader.GetInt64();
                            break;
                        case "available":
                            available = reader.GetBoolean();
                            break;
                        case "displayGroup":
                            displayGroup = reader.GetString();
                            break;
                        case "ratingAverage":
                            ratingAverage = reader.GetInt32();
                            break;
                        case "categoryTree":
                            categoryTree = JsonSerializer.Deserialize<List<string>>(ref reader, options);
                            break;
                        case "propertyIds":
                            propertyIds = JsonSerializer.Deserialize<List<string>>(ref reader, options);
                            break;
                        case "optionIds":
                            optionIds = JsonSerializer.Deserialize<List<string>>(ref reader, options);
                            break;
                        case "categoryIds":
                            categoryIds = JsonSerializer.Deserialize<List<string>>(ref reader, options);
                            break;
                        case "childCount":
                            childCount = reader.GetInt32();
                            childCount = reader.GetInt64();
                            break;
                        case "sales":
                            sales = reader.GetInt32();
                            sales = reader.GetInt64();
                            break;
                        case "updatedAt":
                            updatedAt = reader.GetDateTime();
                            break;
                    }
                }
            }

            return new ProductJsonApi(resource, productJsonApiAllOf, createdAt, availableStock, available, displayGroup, ratingAverage, categoryTree, propertyIds, optionIds, categoryIds, childCount, sales, updatedAt);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productJsonApi"></param>
        /// <param name="options"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProductJsonApi productJsonApi, JsonSerializerOptions options) => throw new NotImplementedException();
    }
}

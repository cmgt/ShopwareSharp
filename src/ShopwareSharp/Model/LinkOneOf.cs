/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// LinkOneOf
    /// </summary>
    [DataContract(Name = "link_oneOf")]
    public partial class LinkOneOf : IEquatable<LinkOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkOneOf" /> class.
        /// </summary>
        /// <param name="href">A string containing the link&#39;s URL. (required).</param>
        /// <param name="meta">Non-standard meta-information that can not be represented as an attribute or relationship..</param>
        public LinkOneOf(string href = default(string), Dictionary<string, Object> meta = default(Dictionary<string, Object>))
        {
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new ArgumentNullException("href is a required property for LinkOneOf and cannot be null");
            }
            this.Href = href;
            this.Meta = meta;
        }

        /// <summary>
        /// A string containing the link&#39;s URL.
        /// </summary>
        /// <value>A string containing the link&#39;s URL.</value>
        [DataMember(Name = "href", IsRequired = true, EmitDefaultValue = false)]
        public string Href { get; set; }

        /// <summary>
        /// Non-standard meta-information that can not be represented as an attribute or relationship.
        /// </summary>
        /// <value>Non-standard meta-information that can not be represented as an attribute or relationship.</value>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkOneOf {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkOneOf);
        }

        /// <summary>
        /// Returns true if LinkOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class OrderTransaction : IEquatable<OrderTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTransaction" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required)</param>
        /// <param name="paymentMethodId">paymentMethodId (required)</param>
        /// <param name="amount">amount (required)</param>
        /// <param name="stateId">stateId (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="versionId">versionId</param>
        /// <param name="orderVersionId">orderVersionId</param>
        /// <param name="customFields">customFields</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="stateMachineState">stateMachineState</param>
        /// <param name="paymentMethod">paymentMethod</param>
        public OrderTransaction(string orderId, string paymentMethodId, OrderShippingCosts amount, string stateId, DateTime createdAt, string? id = default, string? versionId = default, string? orderVersionId = default, Object? customFields = default, DateTime? updatedAt = default, StateMachineState? stateMachineState = default, PaymentMethod? paymentMethod = default)
        {
            if (orderId == null)
                throw new ArgumentNullException("orderId is a required property for OrderTransaction and cannot be null.");

            if (paymentMethodId == null)
                throw new ArgumentNullException("paymentMethodId is a required property for OrderTransaction and cannot be null.");

            if (amount == null)
                throw new ArgumentNullException("amount is a required property for OrderTransaction and cannot be null.");

            if (stateId == null)
                throw new ArgumentNullException("stateId is a required property for OrderTransaction and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for OrderTransaction and cannot be null.");

            OrderId = orderId;
            PaymentMethodId = paymentMethodId;
            Amount = amount;
            StateId = stateId;
            CreatedAt = createdAt;
            Id = id;
            VersionId = versionId;
            OrderVersionId = orderVersionId;
            CustomFields = customFields;
            UpdatedAt = updatedAt;
            StateMachineState = stateMachineState;
            PaymentMethod = paymentMethod;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [JsonPropertyName("paymentMethodId")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public OrderShippingCosts Amount { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [JsonPropertyName("stateId")]
        public string StateId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [JsonPropertyName("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Gets or Sets OrderVersionId
        /// </summary>
        [JsonPropertyName("orderVersionId")]
        public string? OrderVersionId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets StateMachineState
        /// </summary>
        [JsonPropertyName("stateMachineState")]
        public StateMachineState? StateMachineState { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public PaymentMethod? PaymentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderTransaction {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  OrderVersionId: ").Append(OrderVersionId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  StateMachineState: ").Append(StateMachineState).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as OrderTransaction);
        }

        /// <summary>
        /// Returns true if OrderTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderTransaction? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt 
                    
                    
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.OrderVersionId == input.OrderVersionId ||
                    (this.OrderVersionId != null &&
                    this.OrderVersionId.Equals(input.OrderVersionId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.StateMachineState == input.StateMachineState ||
                    (this.StateMachineState != null &&
                    this.StateMachineState.Equals(input.StateMachineState))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.PaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodId.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.StateId != null)
                {
                    hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VersionId != null)
                {
                    hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                }
                if (this.OrderVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVersionId.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.StateMachineState != null)
                {
                    hashCode = (hashCode * 59) + this.StateMachineState.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // PaymentMethodId (string) pattern
            Regex regexPaymentMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexPaymentMethodId.Match(this.PaymentMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethodId, must match a pattern of " + regexPaymentMethodId, new [] { "PaymentMethodId" });
            }

            // StateId (string) pattern
            Regex regexStateId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexStateId.Match(this.StateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateId, must match a pattern of " + regexStateId, new [] { "StateId" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // VersionId (string) pattern
            Regex regexVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexVersionId.Match(this.VersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VersionId, must match a pattern of " + regexVersionId, new [] { "VersionId" });
            }

            // OrderVersionId (string) pattern
            Regex regexOrderVersionId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexOrderVersionId.Match(this.OrderVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderVersionId, must match a pattern of " + regexOrderVersionId, new [] { "OrderVersionId" });
            }

            yield break;
        }
    }

}

/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    [DataContract(Name = "SystemConfig")]
    public partial class SystemConfig : IEquatable<SystemConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfig" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="configurationKey">configurationKey (required).</param>
        /// <param name="configurationValue">configurationValue (required).</param>
        /// <param name="salesChannelId">salesChannelId.</param>
        /// <param name="salesChannel">salesChannel.</param>
        public SystemConfig(string id = default(string), string configurationKey = default(string), SystemConfigConfigurationValue configurationValue = default(SystemConfigConfigurationValue), string salesChannelId = default(string), SalesChannel salesChannel = default(SalesChannel))
        {
            // to ensure "configurationKey" is required (not null)
            if (configurationKey == null)
            {
                throw new ArgumentNullException("configurationKey is a required property for SystemConfig and cannot be null");
            }
            this.ConfigurationKey = configurationKey;
            // to ensure "configurationValue" is required (not null)
            if (configurationValue == null)
            {
                throw new ArgumentNullException("configurationValue is a required property for SystemConfig and cannot be null");
            }
            this.ConfigurationValue = configurationValue;
            this.Id = id;
            this.SalesChannelId = salesChannelId;
            this.SalesChannel = salesChannel;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationKey
        /// </summary>
        [DataMember(Name = "configurationKey", IsRequired = true, EmitDefaultValue = false)]
        public string ConfigurationKey { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationValue
        /// </summary>
        [DataMember(Name = "configurationValue", IsRequired = true, EmitDefaultValue = false)]
        public SystemConfigConfigurationValue ConfigurationValue { get; set; }

        /// <summary>
        /// Gets or Sets SalesChannelId
        /// </summary>
        [DataMember(Name = "salesChannelId", EmitDefaultValue = false)]
        public string SalesChannelId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SalesChannel
        /// </summary>
        [DataMember(Name = "salesChannel", EmitDefaultValue = false)]
        public SalesChannel SalesChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfig {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfigurationKey: ").Append(ConfigurationKey).Append("\n");
            sb.Append("  ConfigurationValue: ").Append(ConfigurationValue).Append("\n");
            sb.Append("  SalesChannelId: ").Append(SalesChannelId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfig);
        }

        /// <summary>
        /// Returns true if SystemConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConfigurationKey == input.ConfigurationKey ||
                    (this.ConfigurationKey != null &&
                    this.ConfigurationKey.Equals(input.ConfigurationKey))
                ) && 
                (
                    this.ConfigurationValue == input.ConfigurationValue ||
                    (this.ConfigurationValue != null &&
                    this.ConfigurationValue.Equals(input.ConfigurationValue))
                ) && 
                (
                    this.SalesChannelId == input.SalesChannelId ||
                    (this.SalesChannelId != null &&
                    this.SalesChannelId.Equals(input.SalesChannelId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.SalesChannel == input.SalesChannel ||
                    (this.SalesChannel != null &&
                    this.SalesChannel.Equals(input.SalesChannel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ConfigurationKey != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationKey.GetHashCode();
                }
                if (this.ConfigurationValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationValue.GetHashCode();
                }
                if (this.SalesChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannelId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.SalesChannel != null)
                {
                    hashCode = (hashCode * 59) + this.SalesChannel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // SalesChannelId (string) pattern
            Regex regexSalesChannelId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexSalesChannelId.Match(this.SalesChannelId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesChannelId, must match a pattern of " + regexSalesChannelId, new [] { "SalesChannelId" });
            }

            yield break;
        }
    }

}

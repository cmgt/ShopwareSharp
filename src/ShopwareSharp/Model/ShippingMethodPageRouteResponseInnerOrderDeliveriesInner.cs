/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ShopwareSharp.Client.FileParameter;
using OpenAPIDateConverter = ShopwareSharp.Client.OpenAPIDateConverter;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// ShippingMethodPageRouteResponseInnerOrderDeliveriesInner
    /// </summary>
    [DataContract(Name = "ShippingMethodPageRouteResponse_inner_orderDeliveries_inner")]
    public partial class ShippingMethodPageRouteResponseInnerOrderDeliveriesInner : IEquatable<ShippingMethodPageRouteResponseInnerOrderDeliveriesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPageRouteResponseInnerOrderDeliveriesInner" /> class.
        /// </summary>
        /// <param name="orderId">orderId.</param>
        /// <param name="shippingOrderAddressId">shippingOrderAddressId.</param>
        /// <param name="shippingMethodId">shippingMethodId.</param>
        /// <param name="shippingDateEarliest">shippingDateEarliest.</param>
        /// <param name="shippingDateLatest">shippingDateLatest.</param>
        /// <param name="stateId">stateId.</param>
        public ShippingMethodPageRouteResponseInnerOrderDeliveriesInner(string orderId = default(string), string shippingOrderAddressId = default(string), string shippingMethodId = default(string), DateTime shippingDateEarliest = default(DateTime), DateTime shippingDateLatest = default(DateTime), string stateId = default(string))
        {
            this._OrderId = orderId;
            if (this.OrderId != null)
            {
                this._flagOrderId = true;
            }
            this._ShippingOrderAddressId = shippingOrderAddressId;
            if (this.ShippingOrderAddressId != null)
            {
                this._flagShippingOrderAddressId = true;
            }
            this._ShippingMethodId = shippingMethodId;
            if (this.ShippingMethodId != null)
            {
                this._flagShippingMethodId = true;
            }
            this._ShippingDateEarliest = shippingDateEarliest;
            if (this.ShippingDateEarliest != null)
            {
                this._flagShippingDateEarliest = true;
            }
            this._ShippingDateLatest = shippingDateLatest;
            if (this.ShippingDateLatest != null)
            {
                this._flagShippingDateLatest = true;
            }
            this._StateId = stateId;
            if (this.StateId != null)
            {
                this._flagStateId = true;
            }
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Gets or Sets ShippingOrderAddressId
        /// </summary>
        [DataMember(Name = "shippingOrderAddressId", EmitDefaultValue = false)]
        public string ShippingOrderAddressId
        {
            get{ return _ShippingOrderAddressId;}
            set
            {
                _ShippingOrderAddressId = value;
                _flagShippingOrderAddressId = true;
            }
        }
        private string _ShippingOrderAddressId;
        private bool _flagShippingOrderAddressId;

        /// <summary>
        /// Returns false as ShippingOrderAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingOrderAddressId()
        {
            return _flagShippingOrderAddressId;
        }
        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [DataMember(Name = "shippingMethodId", EmitDefaultValue = false)]
        public string ShippingMethodId
        {
            get{ return _ShippingMethodId;}
            set
            {
                _ShippingMethodId = value;
                _flagShippingMethodId = true;
            }
        }
        private string _ShippingMethodId;
        private bool _flagShippingMethodId;

        /// <summary>
        /// Returns false as ShippingMethodId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingMethodId()
        {
            return _flagShippingMethodId;
        }
        /// <summary>
        /// Gets or Sets ShippingDateEarliest
        /// </summary>
        [DataMember(Name = "shippingDateEarliest", EmitDefaultValue = false)]
        public DateTime ShippingDateEarliest
        {
            get{ return _ShippingDateEarliest;}
            set
            {
                _ShippingDateEarliest = value;
                _flagShippingDateEarliest = true;
            }
        }
        private DateTime _ShippingDateEarliest;
        private bool _flagShippingDateEarliest;

        /// <summary>
        /// Returns false as ShippingDateEarliest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingDateEarliest()
        {
            return _flagShippingDateEarliest;
        }
        /// <summary>
        /// Gets or Sets ShippingDateLatest
        /// </summary>
        [DataMember(Name = "shippingDateLatest", EmitDefaultValue = false)]
        public DateTime ShippingDateLatest
        {
            get{ return _ShippingDateLatest;}
            set
            {
                _ShippingDateLatest = value;
                _flagShippingDateLatest = true;
            }
        }
        private DateTime _ShippingDateLatest;
        private bool _flagShippingDateLatest;

        /// <summary>
        /// Returns false as ShippingDateLatest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingDateLatest()
        {
            return _flagShippingDateLatest;
        }
        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", EmitDefaultValue = false)]
        public string StateId
        {
            get{ return _StateId;}
            set
            {
                _StateId = value;
                _flagStateId = true;
            }
        }
        private string _StateId;
        private bool _flagStateId;

        /// <summary>
        /// Returns false as StateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStateId()
        {
            return _flagStateId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPageRouteResponseInnerOrderDeliveriesInner {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ShippingOrderAddressId: ").Append(ShippingOrderAddressId).Append("\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  ShippingDateEarliest: ").Append(ShippingDateEarliest).Append("\n");
            sb.Append("  ShippingDateLatest: ").Append(ShippingDateLatest).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingMethodPageRouteResponseInnerOrderDeliveriesInner);
        }

        /// <summary>
        /// Returns true if ShippingMethodPageRouteResponseInnerOrderDeliveriesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPageRouteResponseInnerOrderDeliveriesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPageRouteResponseInnerOrderDeliveriesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ShippingOrderAddressId == input.ShippingOrderAddressId ||
                    (this.ShippingOrderAddressId != null &&
                    this.ShippingOrderAddressId.Equals(input.ShippingOrderAddressId))
                ) && 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.ShippingDateEarliest == input.ShippingDateEarliest ||
                    (this.ShippingDateEarliest != null &&
                    this.ShippingDateEarliest.Equals(input.ShippingDateEarliest))
                ) && 
                (
                    this.ShippingDateLatest == input.ShippingDateLatest ||
                    (this.ShippingDateLatest != null &&
                    this.ShippingDateLatest.Equals(input.ShippingDateLatest))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.ShippingOrderAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingOrderAddressId.GetHashCode();
                }
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.ShippingDateEarliest != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDateEarliest.GetHashCode();
                }
                if (this.ShippingDateLatest != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDateLatest.GetHashCode();
                }
                if (this.StateId != null)
                {
                    hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class Theme : IEquatable<Theme>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Theme" /> class.
        /// </summary>
        /// <param name="name">name (required)</param>
        /// <param name="author">author (required)</param>
        /// <param name="active">active (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="technicalName">technicalName</param>
        /// <param name="description">description</param>
        /// <param name="labels">labels</param>
        /// <param name="helpTexts">helpTexts</param>
        /// <param name="customFields">customFields</param>
        /// <param name="previewMediaId">previewMediaId</param>
        /// <param name="parentThemeId">parentThemeId</param>
        /// <param name="baseConfig">baseConfig</param>
        /// <param name="configValues">configValues</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="translated">translated</param>
        /// <param name="media">media</param>
        public Theme(string name, string author, bool active, DateTime createdAt, string? id = default, string? technicalName = default, string? description = default, Object? labels = default, Object? helpTexts = default, Object? customFields = default, string? previewMediaId = default, string? parentThemeId = default, Object? baseConfig = default, Object? configValues = default, DateTime? updatedAt = default, Object? translated = default, Media? media = default)
        {
            if (name == null)
                throw new ArgumentNullException("name is a required property for Theme and cannot be null.");

            if (author == null)
                throw new ArgumentNullException("author is a required property for Theme and cannot be null.");

            if (active == null)
                throw new ArgumentNullException("active is a required property for Theme and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for Theme and cannot be null.");

            Name = name;
            Author = author;
            Active = active;
            CreatedAt = createdAt;
            Id = id;
            TechnicalName = technicalName;
            Description = description;
            Labels = labels;
            HelpTexts = helpTexts;
            CustomFields = customFields;
            PreviewMediaId = previewMediaId;
            ParentThemeId = parentThemeId;
            BaseConfig = baseConfig;
            ConfigValues = configValues;
            UpdatedAt = updatedAt;
            Translated = translated;
            Media = media;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalName
        /// </summary>
        [JsonPropertyName("technicalName")]
        public string? TechnicalName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public Object? Labels { get; set; }

        /// <summary>
        /// Gets or Sets HelpTexts
        /// </summary>
        [JsonPropertyName("helpTexts")]
        public Object? HelpTexts { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets PreviewMediaId
        /// </summary>
        [JsonPropertyName("previewMediaId")]
        public string? PreviewMediaId { get; set; }

        /// <summary>
        /// Gets or Sets ParentThemeId
        /// </summary>
        [JsonPropertyName("parentThemeId")]
        public string? ParentThemeId { get; set; }

        /// <summary>
        /// Gets or Sets BaseConfig
        /// </summary>
        [JsonPropertyName("baseConfig")]
        public Object? BaseConfig { get; set; }

        /// <summary>
        /// Gets or Sets ConfigValues
        /// </summary>
        [JsonPropertyName("configValues")]
        public Object? ConfigValues { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [JsonPropertyName("translated")]
        public Object? Translated { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [JsonPropertyName("media")]
        public Media? Media { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Theme {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TechnicalName: ").Append(TechnicalName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  HelpTexts: ").Append(HelpTexts).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PreviewMediaId: ").Append(PreviewMediaId).Append("\n");
            sb.Append("  ParentThemeId: ").Append(ParentThemeId).Append("\n");
            sb.Append("  BaseConfig: ").Append(BaseConfig).Append("\n");
            sb.Append("  ConfigValues: ").Append(ConfigValues).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Theme);
        }

        /// <summary>
        /// Returns true if Theme instances are equal
        /// </summary>
        /// <param name="input">Instance of Theme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Theme? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TechnicalName == input.TechnicalName ||
                    (this.TechnicalName != null &&
                    this.TechnicalName.Equals(input.TechnicalName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Labels == input.Labels ||
                    (this.Labels != null &&
                    this.Labels.Equals(input.Labels))
                ) && 
                (
                    this.HelpTexts == input.HelpTexts ||
                    (this.HelpTexts != null &&
                    this.HelpTexts.Equals(input.HelpTexts))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.PreviewMediaId == input.PreviewMediaId ||
                    (this.PreviewMediaId != null &&
                    this.PreviewMediaId.Equals(input.PreviewMediaId))
                ) && 
                (
                    this.ParentThemeId == input.ParentThemeId ||
                    (this.ParentThemeId != null &&
                    this.ParentThemeId.Equals(input.ParentThemeId))
                ) && 
                (
                    this.BaseConfig == input.BaseConfig ||
                    (this.BaseConfig != null &&
                    this.BaseConfig.Equals(input.BaseConfig))
                ) && 
                (
                    this.ConfigValues == input.ConfigValues ||
                    (this.ConfigValues != null &&
                    this.ConfigValues.Equals(input.ConfigValues))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TechnicalName != null)
                {
                    hashCode = (hashCode * 59) + this.TechnicalName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.HelpTexts != null)
                {
                    hashCode = (hashCode * 59) + this.HelpTexts.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.PreviewMediaId != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewMediaId.GetHashCode();
                }
                if (this.ParentThemeId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentThemeId.GetHashCode();
                }
                if (this.BaseConfig != null)
                {
                    hashCode = (hashCode * 59) + this.BaseConfig.GetHashCode();
                }
                if (this.ConfigValues != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigValues.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // PreviewMediaId (string) pattern
            Regex regexPreviewMediaId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexPreviewMediaId.Match(this.PreviewMediaId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviewMediaId, must match a pattern of " + regexPreviewMediaId, new [] { "PreviewMediaId" });
            }

            // ParentThemeId (string) pattern
            Regex regexParentThemeId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexParentThemeId.Match(this.ParentThemeId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentThemeId, must match a pattern of " + regexParentThemeId, new [] { "ParentThemeId" });
            }

            yield break;
        }
    }

}

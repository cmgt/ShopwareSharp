// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class ShippingMethodPrice : IEquatable<ShippingMethodPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingMethodPrice" /> class.
        /// </summary>
        /// <param name="shippingMethodId">shippingMethodId (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="ruleId">ruleId</param>
        /// <param name="calculation">calculation</param>
        /// <param name="calculationRuleId">calculationRuleId</param>
        /// <param name="quantityStart">quantityStart</param>
        /// <param name="quantityEnd">quantityEnd</param>
        /// <param name="currencyPrice">currencyPrice</param>
        /// <param name="customFields">customFields</param>
        /// <param name="updatedAt">updatedAt</param>
        public ShippingMethodPrice(string shippingMethodId, DateTime createdAt, string? id = default, string? ruleId = default, long? calculation = default, string? calculationRuleId = default, float? quantityStart = default, float? quantityEnd = default, Object? currencyPrice = default, Object? customFields = default, DateTime? updatedAt = default)
        {
            if (shippingMethodId == null)
                throw new ArgumentNullException("shippingMethodId is a required property for ShippingMethodPrice and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for ShippingMethodPrice and cannot be null.");

            ShippingMethodId = shippingMethodId;
            CreatedAt = createdAt;
            Id = id;
            RuleId = ruleId;
            Calculation = calculation;
            CalculationRuleId = calculationRuleId;
            QuantityStart = quantityStart;
            QuantityEnd = quantityEnd;
            CurrencyPrice = currencyPrice;
            CustomFields = customFields;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets ShippingMethodId
        /// </summary>
        [JsonPropertyName("shippingMethodId")]
        public string ShippingMethodId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [JsonPropertyName("ruleId")]
        public string? RuleId { get; set; }

        /// <summary>
        /// Gets or Sets Calculation
        /// </summary>
        [JsonPropertyName("calculation")]
        public long? Calculation { get; set; }

        /// <summary>
        /// Gets or Sets CalculationRuleId
        /// </summary>
        [JsonPropertyName("calculationRuleId")]
        public string? CalculationRuleId { get; set; }

        /// <summary>
        /// Gets or Sets QuantityStart
        /// </summary>
        [JsonPropertyName("quantityStart")]
        public float? QuantityStart { get; set; }

        /// <summary>
        /// Gets or Sets QuantityEnd
        /// </summary>
        [JsonPropertyName("quantityEnd")]
        public float? QuantityEnd { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPrice
        /// </summary>
        [JsonPropertyName("currencyPrice")]
        public Object? CurrencyPrice { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("customFields")]
        public Object? CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingMethodPrice {\n");
            sb.Append("  ShippingMethodId: ").Append(ShippingMethodId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  CalculationRuleId: ").Append(CalculationRuleId).Append("\n");
            sb.Append("  QuantityStart: ").Append(QuantityStart).Append("\n");
            sb.Append("  QuantityEnd: ").Append(QuantityEnd).Append("\n");
            sb.Append("  CurrencyPrice: ").Append(CurrencyPrice).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ShippingMethodPrice);
        }

        /// <summary>
        /// Returns true if ShippingMethodPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingMethodPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingMethodPrice? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShippingMethodId == input.ShippingMethodId ||
                    (this.ShippingMethodId != null &&
                    this.ShippingMethodId.Equals(input.ShippingMethodId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    this.Calculation.Equals(input.Calculation)
                ) && 
                (
                    this.CalculationRuleId == input.CalculationRuleId ||
                    (this.CalculationRuleId != null &&
                    this.CalculationRuleId.Equals(input.CalculationRuleId))
                ) && 
                (
                    this.QuantityStart == input.QuantityStart ||
                    this.QuantityStart.Equals(input.QuantityStart)
                ) && 
                (
                    this.QuantityEnd == input.QuantityEnd ||
                    this.QuantityEnd.Equals(input.QuantityEnd)
                ) && 
                (
                    this.CurrencyPrice == input.CurrencyPrice ||
                    (this.CurrencyPrice != null &&
                    this.CurrencyPrice.Equals(input.CurrencyPrice))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShippingMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethodId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Calculation.GetHashCode();
                if (this.CalculationRuleId != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationRuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuantityStart.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityEnd.GetHashCode();
                if (this.CurrencyPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyPrice.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ShippingMethodId (string) pattern
            Regex regexShippingMethodId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexShippingMethodId.Match(this.ShippingMethodId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMethodId, must match a pattern of " + regexShippingMethodId, new [] { "ShippingMethodId" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // RuleId (string) pattern
            Regex regexRuleId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexRuleId.Match(this.RuleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, must match a pattern of " + regexRuleId, new [] { "RuleId" });
            }

            // CalculationRuleId (string) pattern
            Regex regexCalculationRuleId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexCalculationRuleId.Match(this.CalculationRuleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationRuleId, must match a pattern of " + regexCalculationRuleId, new [] { "CalculationRuleId" });
            }

            yield break;
        }
    }

}

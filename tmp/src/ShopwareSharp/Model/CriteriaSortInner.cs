// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// CriteriaSortInner
    /// </summary>
    public partial class CriteriaSortInner : IEquatable<CriteriaSortInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CriteriaSortInner" /> class.
        /// </summary>
        /// <param name="field">field (required)</param>
        /// <param name="order">order</param>
        /// <param name="naturalSorting">naturalSorting</param>
        public CriteriaSortInner(string field, string? order = default, bool? naturalSorting = default)
        {
            if (field == null)
                throw new ArgumentNullException("field is a required property for CriteriaSortInner and cannot be null.");

            Field = field;
            Order = order;
            NaturalSorting = naturalSorting;
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [JsonPropertyName("field")]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public string? Order { get; set; }

        /// <summary>
        /// Gets or Sets NaturalSorting
        /// </summary>
        [JsonPropertyName("naturalSorting")]
        public bool? NaturalSorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CriteriaSortInner {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  NaturalSorting: ").Append(NaturalSorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CriteriaSortInner);
        }

        /// <summary>
        /// Returns true if CriteriaSortInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CriteriaSortInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CriteriaSortInner? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.NaturalSorting == input.NaturalSorting ||
                    this.NaturalSorting.Equals(input.NaturalSorting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NaturalSorting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

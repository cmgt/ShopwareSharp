// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// Added since version: 6.0.0.0
    /// </summary>
    public partial class MailHeaderFooter : IEquatable<MailHeaderFooter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailHeaderFooter" /> class.
        /// </summary>
        /// <param name="name">name (required)</param>
        /// <param name="createdAt">createdAt (required)</param>
        /// <param name="id">id</param>
        /// <param name="systemDefault">systemDefault</param>
        /// <param name="description">description</param>
        /// <param name="headerHtml">headerHtml</param>
        /// <param name="headerPlain">headerPlain</param>
        /// <param name="footerHtml">footerHtml</param>
        /// <param name="footerPlain">footerPlain</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="translated">translated</param>
        public MailHeaderFooter(string name, DateTime createdAt, string? id = default, bool? systemDefault = default, string? description = default, string? headerHtml = default, string? headerPlain = default, string? footerHtml = default, string? footerPlain = default, DateTime? updatedAt = default, Object? translated = default)
        {
            if (name == null)
                throw new ArgumentNullException("name is a required property for MailHeaderFooter and cannot be null.");

            if (createdAt == null)
                throw new ArgumentNullException("createdAt is a required property for MailHeaderFooter and cannot be null.");

            Name = name;
            CreatedAt = createdAt;
            Id = id;
            SystemDefault = systemDefault;
            Description = description;
            HeaderHtml = headerHtml;
            HeaderPlain = headerPlain;
            FooterHtml = footerHtml;
            FooterPlain = footerPlain;
            UpdatedAt = updatedAt;
            Translated = translated;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets SystemDefault
        /// </summary>
        [JsonPropertyName("systemDefault")]
        public bool? SystemDefault { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets HeaderHtml
        /// </summary>
        [JsonPropertyName("headerHtml")]
        public string? HeaderHtml { get; set; }

        /// <summary>
        /// Gets or Sets HeaderPlain
        /// </summary>
        [JsonPropertyName("headerPlain")]
        public string? HeaderPlain { get; set; }

        /// <summary>
        /// Gets or Sets FooterHtml
        /// </summary>
        [JsonPropertyName("footerHtml")]
        public string? FooterHtml { get; set; }

        /// <summary>
        /// Gets or Sets FooterPlain
        /// </summary>
        [JsonPropertyName("footerPlain")]
        public string? FooterPlain { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Translated
        /// </summary>
        [JsonPropertyName("translated")]
        public Object? Translated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MailHeaderFooter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SystemDefault: ").Append(SystemDefault).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HeaderHtml: ").Append(HeaderHtml).Append("\n");
            sb.Append("  HeaderPlain: ").Append(HeaderPlain).Append("\n");
            sb.Append("  FooterHtml: ").Append(FooterHtml).Append("\n");
            sb.Append("  FooterPlain: ").Append(FooterPlain).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Translated: ").Append(Translated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as MailHeaderFooter);
        }

        /// <summary>
        /// Returns true if MailHeaderFooter instances are equal
        /// </summary>
        /// <param name="input">Instance of MailHeaderFooter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailHeaderFooter? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SystemDefault == input.SystemDefault ||
                    this.SystemDefault.Equals(input.SystemDefault)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HeaderHtml == input.HeaderHtml ||
                    (this.HeaderHtml != null &&
                    this.HeaderHtml.Equals(input.HeaderHtml))
                ) && 
                (
                    this.HeaderPlain == input.HeaderPlain ||
                    (this.HeaderPlain != null &&
                    this.HeaderPlain.Equals(input.HeaderPlain))
                ) && 
                (
                    this.FooterHtml == input.FooterHtml ||
                    (this.FooterHtml != null &&
                    this.FooterHtml.Equals(input.FooterHtml))
                ) && 
                (
                    this.FooterPlain == input.FooterPlain ||
                    (this.FooterPlain != null &&
                    this.FooterPlain.Equals(input.FooterPlain))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Translated == input.Translated ||
                    (this.Translated != null &&
                    this.Translated.Equals(input.Translated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SystemDefault.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.HeaderHtml != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderHtml.GetHashCode();
                }
                if (this.HeaderPlain != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderPlain.GetHashCode();
                }
                if (this.FooterHtml != null)
                {
                    hashCode = (hashCode * 59) + this.FooterHtml.GetHashCode();
                }
                if (this.FooterPlain != null)
                {
                    hashCode = (hashCode * 59) + this.FooterPlain.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Translated != null)
                {
                    hashCode = (hashCode * 59) + this.Translated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{32}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}

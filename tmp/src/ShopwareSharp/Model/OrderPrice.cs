// <auto-generated>
/*
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace ShopwareSharp.Model
{
    /// <summary>
    /// OrderPrice
    /// </summary>
    public partial class OrderPrice : IEquatable<OrderPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPrice" /> class.
        /// </summary>
        /// <param name="netPrice">netPrice (required)</param>
        /// <param name="totalPrice">totalPrice (required)</param>
        /// <param name="positionPrice">positionPrice (required)</param>
        /// <param name="rawTotal">rawTotal (required)</param>
        /// <param name="taxStatus">taxStatus (required)</param>
        /// <param name="calculatedTaxes">calculatedTaxes</param>
        /// <param name="taxRules">taxRules</param>
        public OrderPrice(float netPrice, float totalPrice, float positionPrice, float rawTotal, string taxStatus, Object? calculatedTaxes = default, Object? taxRules = default)
        {
            if (netPrice == null)
                throw new ArgumentNullException("netPrice is a required property for OrderPrice and cannot be null.");

            if (totalPrice == null)
                throw new ArgumentNullException("totalPrice is a required property for OrderPrice and cannot be null.");

            if (positionPrice == null)
                throw new ArgumentNullException("positionPrice is a required property for OrderPrice and cannot be null.");

            if (rawTotal == null)
                throw new ArgumentNullException("rawTotal is a required property for OrderPrice and cannot be null.");

            if (taxStatus == null)
                throw new ArgumentNullException("taxStatus is a required property for OrderPrice and cannot be null.");

            NetPrice = netPrice;
            TotalPrice = totalPrice;
            PositionPrice = positionPrice;
            RawTotal = rawTotal;
            TaxStatus = taxStatus;
            CalculatedTaxes = calculatedTaxes;
            TaxRules = taxRules;
        }

        /// <summary>
        /// Gets or Sets NetPrice
        /// </summary>
        [JsonPropertyName("netPrice")]
        public float NetPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [JsonPropertyName("totalPrice")]
        public float TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets PositionPrice
        /// </summary>
        [JsonPropertyName("positionPrice")]
        public float PositionPrice { get; set; }

        /// <summary>
        /// Gets or Sets RawTotal
        /// </summary>
        [JsonPropertyName("rawTotal")]
        public float RawTotal { get; set; }

        /// <summary>
        /// Gets or Sets TaxStatus
        /// </summary>
        [JsonPropertyName("taxStatus")]
        public string TaxStatus { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedTaxes
        /// </summary>
        [JsonPropertyName("calculatedTaxes")]
        public Object? CalculatedTaxes { get; set; }

        /// <summary>
        /// Gets or Sets TaxRules
        /// </summary>
        [JsonPropertyName("taxRules")]
        public Object? TaxRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderPrice {\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  PositionPrice: ").Append(PositionPrice).Append("\n");
            sb.Append("  RawTotal: ").Append(RawTotal).Append("\n");
            sb.Append("  TaxStatus: ").Append(TaxStatus).Append("\n");
            sb.Append("  CalculatedTaxes: ").Append(CalculatedTaxes).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as OrderPrice);
        }

        /// <summary>
        /// Returns true if OrderPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPrice? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NetPrice == input.NetPrice ||
                    this.NetPrice.Equals(input.NetPrice)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.PositionPrice == input.PositionPrice ||
                    this.PositionPrice.Equals(input.PositionPrice)
                ) && 
                (
                    this.RawTotal == input.RawTotal ||
                    this.RawTotal.Equals(input.RawTotal)
                ) && 
                (
                    this.TaxStatus == input.TaxStatus ||
                    (this.TaxStatus != null &&
                    this.TaxStatus.Equals(input.TaxStatus))
                ) && 
                (
                    this.CalculatedTaxes == input.CalculatedTaxes ||
                    (this.CalculatedTaxes != null &&
                    this.CalculatedTaxes.Equals(input.CalculatedTaxes))
                ) && 
                (
                    this.TaxRules == input.TaxRules ||
                    (this.TaxRules != null &&
                    this.TaxRules.Equals(input.TaxRules))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NetPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.PositionPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.RawTotal.GetHashCode();
                if (this.TaxStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TaxStatus.GetHashCode();
                }
                if (this.CalculatedTaxes != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedTaxes.GetHashCode();
                }
                if (this.TaxRules != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
